/* automatically generated by rust-bindgen 0.60.1 */

pub const DAQmx_Buf_Input_BufSize: u32 = 6252;
pub const DAQmx_Buf_Input_OnbrdBufSize: u32 = 8970;
pub const DAQmx_Buf_Output_BufSize: u32 = 6253;
pub const DAQmx_Buf_Output_OnbrdBufSize: u32 = 8971;
pub const DAQmx_SelfCal_Supported: u32 = 6240;
pub const DAQmx_SelfCal_LastTemp: u32 = 6244;
pub const DAQmx_ExtCal_RecommendedInterval: u32 = 6248;
pub const DAQmx_ExtCal_LastTemp: u32 = 6247;
pub const DAQmx_Cal_UserDefinedInfo: u32 = 6241;
pub const DAQmx_Cal_UserDefinedInfo_MaxSize: u32 = 6428;
pub const DAQmx_Cal_DevTemp: u32 = 8763;
pub const DAQmx_Cal_AccConnectionCount: u32 = 12267;
pub const DAQmx_Cal_RecommendedAccConnectionCountLimit: u32 = 12268;
pub const DAQmx_AI_Max: u32 = 6109;
pub const DAQmx_AI_Min: u32 = 6110;
pub const DAQmx_AI_CustomScaleName: u32 = 6112;
pub const DAQmx_AI_MeasType: u32 = 1685;
pub const DAQmx_AI_Voltage_Units: u32 = 4244;
pub const DAQmx_AI_Voltage_dBRef: u32 = 10672;
pub const DAQmx_AI_Voltage_ACRMS_Units: u32 = 6114;
pub const DAQmx_AI_Temp_Units: u32 = 4147;
pub const DAQmx_AI_Thrmcpl_Type: u32 = 4176;
pub const DAQmx_AI_Thrmcpl_ScaleType: u32 = 10704;
pub const DAQmx_AI_Thrmcpl_CJCSrc: u32 = 4149;
pub const DAQmx_AI_Thrmcpl_CJCVal: u32 = 4150;
pub const DAQmx_AI_Thrmcpl_CJCChan: u32 = 4148;
pub const DAQmx_AI_RTD_Type: u32 = 4146;
pub const DAQmx_AI_RTD_R0: u32 = 4144;
pub const DAQmx_AI_RTD_A: u32 = 4112;
pub const DAQmx_AI_RTD_B: u32 = 4113;
pub const DAQmx_AI_RTD_C: u32 = 4115;
pub const DAQmx_AI_Thrmstr_A: u32 = 6345;
pub const DAQmx_AI_Thrmstr_B: u32 = 6347;
pub const DAQmx_AI_Thrmstr_C: u32 = 6346;
pub const DAQmx_AI_Thrmstr_R1: u32 = 4193;
pub const DAQmx_AI_ForceReadFromChan: u32 = 6392;
pub const DAQmx_AI_Current_Units: u32 = 1793;
pub const DAQmx_AI_Current_ACRMS_Units: u32 = 6115;
pub const DAQmx_AI_Strain_Units: u32 = 2433;
pub const DAQmx_AI_StrainGage_ForceReadFromChan: u32 = 12282;
pub const DAQmx_AI_StrainGage_GageFactor: u32 = 2452;
pub const DAQmx_AI_StrainGage_PoissonRatio: u32 = 2456;
pub const DAQmx_AI_StrainGage_Cfg: u32 = 2434;
pub const DAQmx_AI_RosetteStrainGage_RosetteType: u32 = 12286;
pub const DAQmx_AI_RosetteStrainGage_Orientation: u32 = 12284;
pub const DAQmx_AI_RosetteStrainGage_StrainChans: u32 = 12283;
pub const DAQmx_AI_RosetteStrainGage_RosetteMeasType: u32 = 12285;
pub const DAQmx_AI_Resistance_Units: u32 = 2389;
pub const DAQmx_AI_Freq_Units: u32 = 2054;
pub const DAQmx_AI_Freq_ThreshVoltage: u32 = 2069;
pub const DAQmx_AI_Freq_Hyst: u32 = 2068;
pub const DAQmx_AI_LVDT_Units: u32 = 2320;
pub const DAQmx_AI_LVDT_Sensitivity: u32 = 2361;
pub const DAQmx_AI_LVDT_SensitivityUnits: u32 = 8602;
pub const DAQmx_AI_RVDT_Units: u32 = 2167;
pub const DAQmx_AI_RVDT_Sensitivity: u32 = 2307;
pub const DAQmx_AI_RVDT_SensitivityUnits: u32 = 8603;
pub const DAQmx_AI_EddyCurrentProxProbe_Units: u32 = 10944;
pub const DAQmx_AI_EddyCurrentProxProbe_Sensitivity: u32 = 10942;
pub const DAQmx_AI_EddyCurrentProxProbe_SensitivityUnits: u32 = 10943;
pub const DAQmx_AI_SoundPressure_MaxSoundPressureLvl: u32 = 8762;
pub const DAQmx_AI_SoundPressure_Units: u32 = 5416;
pub const DAQmx_AI_SoundPressure_dBRef: u32 = 10673;
pub const DAQmx_AI_Microphone_Sensitivity: u32 = 5430;
pub const DAQmx_AI_Accel_Units: u32 = 1651;
pub const DAQmx_AI_Accel_dBRef: u32 = 10674;
pub const DAQmx_AI_Accel_4WireDCVoltage_Sensitivity: u32 = 12565;
pub const DAQmx_AI_Accel_4WireDCVoltage_SensitivityUnits: u32 = 12566;
pub const DAQmx_AI_Accel_Sensitivity: u32 = 1682;
pub const DAQmx_AI_Accel_SensitivityUnits: u32 = 8604;
pub const DAQmx_AI_Accel_Charge_Sensitivity: u32 = 12563;
pub const DAQmx_AI_Accel_Charge_SensitivityUnits: u32 = 12564;
pub const DAQmx_AI_Velocity_Units: u32 = 12276;
pub const DAQmx_AI_Velocity_IEPESensor_dBRef: u32 = 12277;
pub const DAQmx_AI_Velocity_IEPESensor_Sensitivity: u32 = 12278;
pub const DAQmx_AI_Velocity_IEPESensor_SensitivityUnits: u32 = 12279;
pub const DAQmx_AI_Force_Units: u32 = 12149;
pub const DAQmx_AI_Force_IEPESensor_Sensitivity: u32 = 12161;
pub const DAQmx_AI_Force_IEPESensor_SensitivityUnits: u32 = 12162;
pub const DAQmx_AI_Pressure_Units: u32 = 12150;
pub const DAQmx_AI_Torque_Units: u32 = 12151;
pub const DAQmx_AI_Bridge_Units: u32 = 12178;
pub const DAQmx_AI_Bridge_ElectricalUnits: u32 = 12167;
pub const DAQmx_AI_Bridge_PhysicalUnits: u32 = 12168;
pub const DAQmx_AI_Bridge_ScaleType: u32 = 12169;
pub const DAQmx_AI_Bridge_TwoPointLin_First_ElectricalVal: u32 = 12170;
pub const DAQmx_AI_Bridge_TwoPointLin_First_PhysicalVal: u32 = 12171;
pub const DAQmx_AI_Bridge_TwoPointLin_Second_ElectricalVal: u32 = 12172;
pub const DAQmx_AI_Bridge_TwoPointLin_Second_PhysicalVal: u32 = 12173;
pub const DAQmx_AI_Bridge_Table_ElectricalVals: u32 = 12174;
pub const DAQmx_AI_Bridge_Table_PhysicalVals: u32 = 12175;
pub const DAQmx_AI_Bridge_Poly_ForwardCoeff: u32 = 12176;
pub const DAQmx_AI_Bridge_Poly_ReverseCoeff: u32 = 12177;
pub const DAQmx_AI_Charge_Units: u32 = 12562;
pub const DAQmx_AI_Is_TEDS: u32 = 10627;
pub const DAQmx_AI_TEDS_Units: u32 = 8672;
pub const DAQmx_AI_Coupling: u32 = 100;
pub const DAQmx_AI_Impedance: u32 = 98;
pub const DAQmx_AI_TermCfg: u32 = 4247;
pub const DAQmx_AI_InputSrc: u32 = 8600;
pub const DAQmx_AI_ResistanceCfg: u32 = 6273;
pub const DAQmx_AI_LeadWireResistance: u32 = 6126;
pub const DAQmx_AI_Bridge_Cfg: u32 = 135;
pub const DAQmx_AI_Bridge_NomResistance: u32 = 6124;
pub const DAQmx_AI_Bridge_InitialVoltage: u32 = 6125;
pub const DAQmx_AI_Bridge_InitialRatio: u32 = 12166;
pub const DAQmx_AI_Bridge_ShuntCal_Enable: u32 = 148;
pub const DAQmx_AI_Bridge_ShuntCal_Select: u32 = 8661;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalASrc: u32 = 12490;
pub const DAQmx_AI_Bridge_ShuntCal_GainAdjust: u32 = 6463;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalAResistance: u32 = 12152;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalAActualResistance: u32 = 12153;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalBResistance: u32 = 12154;
pub const DAQmx_AI_Bridge_ShuntCal_ShuntCalBActualResistance: u32 = 12155;
pub const DAQmx_AI_Bridge_Balance_CoarsePot: u32 = 6129;
pub const DAQmx_AI_Bridge_Balance_FinePot: u32 = 6388;
pub const DAQmx_AI_CurrentShunt_Loc: u32 = 6130;
pub const DAQmx_AI_CurrentShunt_Resistance: u32 = 6131;
pub const DAQmx_AI_Excit_Sense: u32 = 12541;
pub const DAQmx_AI_Excit_Src: u32 = 6132;
pub const DAQmx_AI_Excit_Val: u32 = 6133;
pub const DAQmx_AI_Excit_UseForScaling: u32 = 6140;
pub const DAQmx_AI_Excit_UseMultiplexed: u32 = 8576;
pub const DAQmx_AI_Excit_ActualVal: u32 = 6275;
pub const DAQmx_AI_Excit_DCorAC: u32 = 6139;
pub const DAQmx_AI_Excit_VoltageOrCurrent: u32 = 6134;
pub const DAQmx_AI_Excit_IdleOutputBehavior: u32 = 12472;
pub const DAQmx_AI_ACExcit_Freq: u32 = 257;
pub const DAQmx_AI_ACExcit_SyncEnable: u32 = 258;
pub const DAQmx_AI_ACExcit_WireMode: u32 = 6349;
pub const DAQmx_AI_SensorPower_Voltage: u32 = 12649;
pub const DAQmx_AI_SensorPower_Cfg: u32 = 12650;
pub const DAQmx_AI_SensorPower_Type: u32 = 12651;
pub const DAQmx_AI_OpenThrmcplDetectEnable: u32 = 12146;
pub const DAQmx_AI_Thrmcpl_LeadOffsetVoltage: u32 = 12216;
pub const DAQmx_AI_Atten: u32 = 6145;
pub const DAQmx_AI_ProbeAtten: u32 = 10888;
pub const DAQmx_AI_Lowpass_Enable: u32 = 6146;
pub const DAQmx_AI_Lowpass_CutoffFreq: u32 = 6147;
pub const DAQmx_AI_Lowpass_SwitchCap_ClkSrc: u32 = 6276;
pub const DAQmx_AI_Lowpass_SwitchCap_ExtClkFreq: u32 = 6277;
pub const DAQmx_AI_Lowpass_SwitchCap_ExtClkDiv: u32 = 6278;
pub const DAQmx_AI_Lowpass_SwitchCap_OutClkDiv: u32 = 6279;
pub const DAQmx_AI_DigFltr_Enable: u32 = 12477;
pub const DAQmx_AI_DigFltr_Type: u32 = 12478;
pub const DAQmx_AI_DigFltr_Response: u32 = 12479;
pub const DAQmx_AI_DigFltr_Order: u32 = 12480;
pub const DAQmx_AI_DigFltr_Lowpass_CutoffFreq: u32 = 12481;
pub const DAQmx_AI_DigFltr_Highpass_CutoffFreq: u32 = 12482;
pub const DAQmx_AI_DigFltr_Bandpass_CenterFreq: u32 = 12483;
pub const DAQmx_AI_DigFltr_Bandpass_Width: u32 = 12484;
pub const DAQmx_AI_DigFltr_Notch_CenterFreq: u32 = 12485;
pub const DAQmx_AI_DigFltr_Notch_Width: u32 = 12486;
pub const DAQmx_AI_DigFltr_Coeff: u32 = 12487;
pub const DAQmx_AI_Filter_Enable: u32 = 12659;
pub const DAQmx_AI_Filter_Freq: u32 = 12660;
pub const DAQmx_AI_Filter_Response: u32 = 12661;
pub const DAQmx_AI_Filter_Order: u32 = 12662;
pub const DAQmx_AI_FilterDelay: u32 = 12269;
pub const DAQmx_AI_FilterDelayUnits: u32 = 12401;
pub const DAQmx_AI_RemoveFilterDelay: u32 = 12221;
pub const DAQmx_AI_FilterDelayAdjustment: u32 = 12404;
pub const DAQmx_AI_AveragingWinSize: u32 = 12270;
pub const DAQmx_AI_ResolutionUnits: u32 = 5988;
pub const DAQmx_AI_Resolution: u32 = 5989;
pub const DAQmx_AI_RawSampSize: u32 = 8922;
pub const DAQmx_AI_RawSampJustification: u32 = 80;
pub const DAQmx_AI_ADCTimingMode: u32 = 10745;
pub const DAQmx_AI_ADCCustomTimingMode: u32 = 12139;
pub const DAQmx_AI_Dither_Enable: u32 = 104;
pub const DAQmx_AI_ChanCal_HasValidCalInfo: u32 = 8855;
pub const DAQmx_AI_ChanCal_EnableCal: u32 = 8856;
pub const DAQmx_AI_ChanCal_ApplyCalIfExp: u32 = 8857;
pub const DAQmx_AI_ChanCal_ScaleType: u32 = 8860;
pub const DAQmx_AI_ChanCal_Table_PreScaledVals: u32 = 8861;
pub const DAQmx_AI_ChanCal_Table_ScaledVals: u32 = 8862;
pub const DAQmx_AI_ChanCal_Poly_ForwardCoeff: u32 = 8863;
pub const DAQmx_AI_ChanCal_Poly_ReverseCoeff: u32 = 8864;
pub const DAQmx_AI_ChanCal_OperatorName: u32 = 8867;
pub const DAQmx_AI_ChanCal_Desc: u32 = 8868;
pub const DAQmx_AI_ChanCal_Verif_RefVals: u32 = 8865;
pub const DAQmx_AI_ChanCal_Verif_AcqVals: u32 = 8866;
pub const DAQmx_AI_Rng_High: u32 = 6165;
pub const DAQmx_AI_Rng_Low: u32 = 6166;
pub const DAQmx_AI_DCOffset: u32 = 10889;
pub const DAQmx_AI_Gain: u32 = 6168;
pub const DAQmx_AI_SampAndHold_Enable: u32 = 6170;
pub const DAQmx_AI_AutoZeroMode: u32 = 5984;
pub const DAQmx_AI_ChopEnable: u32 = 12611;
pub const DAQmx_AI_DataXferMaxRate: u32 = 12567;
pub const DAQmx_AI_DataXferMech: u32 = 6177;
pub const DAQmx_AI_DataXferReqCond: u32 = 6283;
pub const DAQmx_AI_DataXferCustomThreshold: u32 = 8972;
pub const DAQmx_AI_UsbXferReqSize: u32 = 10894;
pub const DAQmx_AI_UsbXferReqCount: u32 = 12288;
pub const DAQmx_AI_MemMapEnable: u32 = 6284;
pub const DAQmx_AI_RawDataCompressionType: u32 = 8920;
pub const DAQmx_AI_LossyLSBRemoval_CompressedSampSize: u32 = 8921;
pub const DAQmx_AI_DevScalingCoeff: u32 = 6448;
pub const DAQmx_AI_EnhancedAliasRejectionEnable: u32 = 8852;
pub const DAQmx_AI_OpenChanDetectEnable: u32 = 12543;
pub const DAQmx_AI_InputLimitsFaultDetect_UpperLimit: u32 = 12684;
pub const DAQmx_AI_InputLimitsFaultDetect_LowerLimit: u32 = 12685;
pub const DAQmx_AI_InputLimitsFaultDetectEnable: u32 = 12686;
pub const DAQmx_AI_PowerSupplyFaultDetectEnable: u32 = 12689;
pub const DAQmx_AI_OvercurrentDetectEnable: u32 = 12692;
pub const DAQmx_AO_Max: u32 = 4486;
pub const DAQmx_AO_Min: u32 = 4487;
pub const DAQmx_AO_CustomScaleName: u32 = 4488;
pub const DAQmx_AO_OutputType: u32 = 4360;
pub const DAQmx_AO_Voltage_Units: u32 = 4484;
pub const DAQmx_AO_Voltage_CurrentLimit: u32 = 10781;
pub const DAQmx_AO_Current_Units: u32 = 4361;
pub const DAQmx_AO_FuncGen_Type: u32 = 10776;
pub const DAQmx_AO_FuncGen_Freq: u32 = 10777;
pub const DAQmx_AO_FuncGen_Amplitude: u32 = 10778;
pub const DAQmx_AO_FuncGen_Offset: u32 = 10779;
pub const DAQmx_AO_FuncGen_Square_DutyCycle: u32 = 10780;
pub const DAQmx_AO_FuncGen_ModulationType: u32 = 10786;
pub const DAQmx_AO_FuncGen_FMDeviation: u32 = 10787;
pub const DAQmx_AO_OutputImpedance: u32 = 5264;
pub const DAQmx_AO_LoadImpedance: u32 = 289;
pub const DAQmx_AO_IdleOutputBehavior: u32 = 8768;
pub const DAQmx_AO_TermCfg: u32 = 6286;
pub const DAQmx_AO_Common_Mode_Offset: u32 = 12748;
pub const DAQmx_AO_ResolutionUnits: u32 = 6187;
pub const DAQmx_AO_Resolution: u32 = 6188;
pub const DAQmx_AO_DAC_Rng_High: u32 = 6190;
pub const DAQmx_AO_DAC_Rng_Low: u32 = 6189;
pub const DAQmx_AO_DAC_Ref_ConnToGnd: u32 = 304;
pub const DAQmx_AO_DAC_Ref_AllowConnToGnd: u32 = 6192;
pub const DAQmx_AO_DAC_Ref_Src: u32 = 306;
pub const DAQmx_AO_DAC_Ref_ExtSrc: u32 = 8786;
pub const DAQmx_AO_DAC_Ref_Val: u32 = 6194;
pub const DAQmx_AO_DAC_Offset_Src: u32 = 8787;
pub const DAQmx_AO_DAC_Offset_ExtSrc: u32 = 8788;
pub const DAQmx_AO_DAC_Offset_Val: u32 = 8789;
pub const DAQmx_AO_ReglitchEnable: u32 = 307;
pub const DAQmx_AO_FilterDelay: u32 = 12405;
pub const DAQmx_AO_FilterDelayUnits: u32 = 12406;
pub const DAQmx_AO_FilterDelayAdjustment: u32 = 12402;
pub const DAQmx_AO_Gain: u32 = 280;
pub const DAQmx_AO_UseOnlyOnBrdMem: u32 = 6202;
pub const DAQmx_AO_DataXferMech: u32 = 308;
pub const DAQmx_AO_DataXferReqCond: u32 = 6204;
pub const DAQmx_AO_UsbXferReqSize: u32 = 10895;
pub const DAQmx_AO_UsbXferReqCount: u32 = 12289;
pub const DAQmx_AO_MemMapEnable: u32 = 6287;
pub const DAQmx_AO_DevScalingCoeff: u32 = 6449;
pub const DAQmx_AO_EnhancedImageRejectionEnable: u32 = 8769;
pub const DAQmx_DI_InvertLines: u32 = 1939;
pub const DAQmx_DI_NumLines: u32 = 8568;
pub const DAQmx_DI_DigFltr_Enable: u32 = 8662;
pub const DAQmx_DI_DigFltr_MinPulseWidth: u32 = 8663;
pub const DAQmx_DI_DigFltr_EnableBusMode: u32 = 12030;
pub const DAQmx_DI_DigFltr_TimebaseSrc: u32 = 11988;
pub const DAQmx_DI_DigFltr_TimebaseRate: u32 = 11989;
pub const DAQmx_DI_DigSync_Enable: u32 = 11990;
pub const DAQmx_DI_Tristate: u32 = 6288;
pub const DAQmx_DI_LogicFamily: u32 = 10605;
pub const DAQmx_DI_DataXferMech: u32 = 8803;
pub const DAQmx_DI_DataXferReqCond: u32 = 8804;
pub const DAQmx_DI_UsbXferReqSize: u32 = 10896;
pub const DAQmx_DI_UsbXferReqCount: u32 = 12290;
pub const DAQmx_DI_MemMapEnable: u32 = 10602;
pub const DAQmx_DI_AcquireOn: u32 = 10598;
pub const DAQmx_DO_OutputDriveType: u32 = 4407;
pub const DAQmx_DO_InvertLines: u32 = 4403;
pub const DAQmx_DO_NumLines: u32 = 8569;
pub const DAQmx_DO_Tristate: u32 = 6387;
pub const DAQmx_DO_LineStates_StartState: u32 = 10610;
pub const DAQmx_DO_LineStates_PausedState: u32 = 10599;
pub const DAQmx_DO_LineStates_DoneState: u32 = 10600;
pub const DAQmx_DO_LogicFamily: u32 = 10606;
pub const DAQmx_DO_Overcurrent_Limit: u32 = 10885;
pub const DAQmx_DO_Overcurrent_AutoReenable: u32 = 10886;
pub const DAQmx_DO_Overcurrent_ReenablePeriod: u32 = 10887;
pub const DAQmx_DO_UseOnlyOnBrdMem: u32 = 8805;
pub const DAQmx_DO_DataXferMech: u32 = 8806;
pub const DAQmx_DO_DataXferReqCond: u32 = 8807;
pub const DAQmx_DO_UsbXferReqSize: u32 = 10897;
pub const DAQmx_DO_UsbXferReqCount: u32 = 12291;
pub const DAQmx_DO_MemMapEnable: u32 = 10603;
pub const DAQmx_DO_GenerateOn: u32 = 10601;
pub const DAQmx_CI_Max: u32 = 6300;
pub const DAQmx_CI_Min: u32 = 6301;
pub const DAQmx_CI_CustomScaleName: u32 = 6302;
pub const DAQmx_CI_MeasType: u32 = 6304;
pub const DAQmx_CI_Freq_Units: u32 = 6305;
pub const DAQmx_CI_Freq_Term: u32 = 6306;
pub const DAQmx_CI_Freq_TermCfg: u32 = 12439;
pub const DAQmx_CI_Freq_LogicLvlBehavior: u32 = 12440;
pub const DAQmx_CI_Freq_ThreshVoltage: u32 = 12715;
pub const DAQmx_CI_Freq_Hyst: u32 = 12716;
pub const DAQmx_CI_Freq_DigFltr_Enable: u32 = 8679;
pub const DAQmx_CI_Freq_DigFltr_MinPulseWidth: u32 = 8680;
pub const DAQmx_CI_Freq_DigFltr_TimebaseSrc: u32 = 8681;
pub const DAQmx_CI_Freq_DigFltr_TimebaseRate: u32 = 8682;
pub const DAQmx_CI_Freq_DigSync_Enable: u32 = 8683;
pub const DAQmx_CI_Freq_StartingEdge: u32 = 1945;
pub const DAQmx_CI_Freq_MeasMeth: u32 = 324;
pub const DAQmx_CI_Freq_EnableAveraging: u32 = 11984;
pub const DAQmx_CI_Freq_MeasTime: u32 = 325;
pub const DAQmx_CI_Freq_Div: u32 = 327;
pub const DAQmx_CI_Period_Units: u32 = 6307;
pub const DAQmx_CI_Period_Term: u32 = 6308;
pub const DAQmx_CI_Period_TermCfg: u32 = 12441;
pub const DAQmx_CI_Period_LogicLvlBehavior: u32 = 12442;
pub const DAQmx_CI_Period_ThreshVoltage: u32 = 12717;
pub const DAQmx_CI_Period_Hyst: u32 = 12718;
pub const DAQmx_CI_Period_DigFltr_Enable: u32 = 8684;
pub const DAQmx_CI_Period_DigFltr_MinPulseWidth: u32 = 8685;
pub const DAQmx_CI_Period_DigFltr_TimebaseSrc: u32 = 8686;
pub const DAQmx_CI_Period_DigFltr_TimebaseRate: u32 = 8687;
pub const DAQmx_CI_Period_DigSync_Enable: u32 = 8688;
pub const DAQmx_CI_Period_StartingEdge: u32 = 2130;
pub const DAQmx_CI_Period_MeasMeth: u32 = 6444;
pub const DAQmx_CI_Period_EnableAveraging: u32 = 11985;
pub const DAQmx_CI_Period_MeasTime: u32 = 6445;
pub const DAQmx_CI_Period_Div: u32 = 6446;
pub const DAQmx_CI_CountEdges_Term: u32 = 6343;
pub const DAQmx_CI_CountEdges_TermCfg: u32 = 12443;
pub const DAQmx_CI_CountEdges_LogicLvlBehavior: u32 = 12444;
pub const DAQmx_CI_CountEdges_ThreshVoltage: u32 = 12719;
pub const DAQmx_CI_CountEdges_Hyst: u32 = 12720;
pub const DAQmx_CI_CountEdges_DigFltr_Enable: u32 = 8694;
pub const DAQmx_CI_CountEdges_DigFltr_MinPulseWidth: u32 = 8695;
pub const DAQmx_CI_CountEdges_DigFltr_TimebaseSrc: u32 = 8696;
pub const DAQmx_CI_CountEdges_DigFltr_TimebaseRate: u32 = 8697;
pub const DAQmx_CI_CountEdges_DigSync_Enable: u32 = 8698;
pub const DAQmx_CI_CountEdges_Dir: u32 = 1686;
pub const DAQmx_CI_CountEdges_DirTerm: u32 = 8673;
pub const DAQmx_CI_CountEdges_CountDir_TermCfg: u32 = 12445;
pub const DAQmx_CI_CountEdges_CountDir_LogicLvlBehavior: u32 = 12446;
pub const DAQmx_CI_CountEdges_CountDir_ThreshVoltage: u32 = 12721;
pub const DAQmx_CI_CountEdges_CountDir_Hyst: u32 = 12722;
pub const DAQmx_CI_CountEdges_CountDir_DigFltr_Enable: u32 = 8689;
pub const DAQmx_CI_CountEdges_CountDir_DigFltr_MinPulseWidth: u32 = 8690;
pub const DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseSrc: u32 = 8691;
pub const DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseRate: u32 = 8692;
pub const DAQmx_CI_CountEdges_CountDir_DigSync_Enable: u32 = 8693;
pub const DAQmx_CI_CountEdges_InitialCnt: u32 = 1688;
pub const DAQmx_CI_CountEdges_ActiveEdge: u32 = 1687;
pub const DAQmx_CI_CountEdges_CountReset_Enable: u32 = 12207;
pub const DAQmx_CI_CountEdges_CountReset_ResetCount: u32 = 12208;
pub const DAQmx_CI_CountEdges_CountReset_Term: u32 = 12209;
pub const DAQmx_CI_CountEdges_CountReset_TermCfg: u32 = 12447;
pub const DAQmx_CI_CountEdges_CountReset_LogicLvlBehavior: u32 = 12448;
pub const DAQmx_CI_CountEdges_CountReset_ThreshVoltage: u32 = 12723;
pub const DAQmx_CI_CountEdges_CountReset_Hyst: u32 = 12724;
pub const DAQmx_CI_CountEdges_CountReset_DigFltr_Enable: u32 = 12211;
pub const DAQmx_CI_CountEdges_CountReset_DigFltr_MinPulseWidth: u32 = 12212;
pub const DAQmx_CI_CountEdges_CountReset_DigFltr_TimebaseSrc: u32 = 12213;
pub const DAQmx_CI_CountEdges_CountReset_DigFltr_TimebaseRate: u32 = 12214;
pub const DAQmx_CI_CountEdges_CountReset_DigSync_Enable: u32 = 12215;
pub const DAQmx_CI_CountEdges_CountReset_ActiveEdge: u32 = 12210;
pub const DAQmx_CI_CountEdges_Gate_Enable: u32 = 12525;
pub const DAQmx_CI_CountEdges_Gate_Term: u32 = 12526;
pub const DAQmx_CI_CountEdges_Gate_TermCfg: u32 = 12527;
pub const DAQmx_CI_CountEdges_Gate_LogicLvlBehavior: u32 = 12528;
pub const DAQmx_CI_CountEdges_Gate_ThreshVoltage: u32 = 12725;
pub const DAQmx_CI_CountEdges_Gate_Hyst: u32 = 12726;
pub const DAQmx_CI_CountEdges_Gate_DigFltrEnable: u32 = 12529;
pub const DAQmx_CI_CountEdges_Gate_DigFltrMinPulseWidth: u32 = 12530;
pub const DAQmx_CI_CountEdges_Gate_DigFltrTimebaseSrc: u32 = 12531;
pub const DAQmx_CI_CountEdges_Gate_DigFltrTimebaseRate: u32 = 12532;
pub const DAQmx_CI_CountEdges_GateWhen: u32 = 12533;
pub const DAQmx_CI_DutyCycle_Term: u32 = 12429;
pub const DAQmx_CI_DutyCycle_TermCfg: u32 = 12449;
pub const DAQmx_CI_DutyCycle_LogicLvlBehavior: u32 = 12450;
pub const DAQmx_CI_DutyCycle_DigFltr_Enable: u32 = 12430;
pub const DAQmx_CI_DutyCycle_DigFltr_MinPulseWidth: u32 = 12431;
pub const DAQmx_CI_DutyCycle_DigFltr_TimebaseSrc: u32 = 12432;
pub const DAQmx_CI_DutyCycle_DigFltr_TimebaseRate: u32 = 12433;
pub const DAQmx_CI_DutyCycle_StartingEdge: u32 = 12434;
pub const DAQmx_CI_AngEncoder_Units: u32 = 6310;
pub const DAQmx_CI_AngEncoder_PulsesPerRev: u32 = 2165;
pub const DAQmx_CI_AngEncoder_InitialAngle: u32 = 2177;
pub const DAQmx_CI_LinEncoder_Units: u32 = 6313;
pub const DAQmx_CI_LinEncoder_DistPerPulse: u32 = 2321;
pub const DAQmx_CI_LinEncoder_InitialPos: u32 = 2325;
pub const DAQmx_CI_Encoder_DecodingType: u32 = 8678;
pub const DAQmx_CI_Encoder_AInputTerm: u32 = 8605;
pub const DAQmx_CI_Encoder_AInputTermCfg: u32 = 12451;
pub const DAQmx_CI_Encoder_AInputLogicLvlBehavior: u32 = 12452;
pub const DAQmx_CI_Encoder_AInput_DigFltr_Enable: u32 = 8699;
pub const DAQmx_CI_Encoder_AInput_DigFltr_MinPulseWidth: u32 = 8700;
pub const DAQmx_CI_Encoder_AInput_DigFltr_TimebaseSrc: u32 = 8701;
pub const DAQmx_CI_Encoder_AInput_DigFltr_TimebaseRate: u32 = 8702;
pub const DAQmx_CI_Encoder_AInput_DigSync_Enable: u32 = 8703;
pub const DAQmx_CI_Encoder_BInputTerm: u32 = 8606;
pub const DAQmx_CI_Encoder_BInputTermCfg: u32 = 12453;
pub const DAQmx_CI_Encoder_BInputLogicLvlBehavior: u32 = 12454;
pub const DAQmx_CI_Encoder_BInput_DigFltr_Enable: u32 = 8704;
pub const DAQmx_CI_Encoder_BInput_DigFltr_MinPulseWidth: u32 = 8705;
pub const DAQmx_CI_Encoder_BInput_DigFltr_TimebaseSrc: u32 = 8706;
pub const DAQmx_CI_Encoder_BInput_DigFltr_TimebaseRate: u32 = 8707;
pub const DAQmx_CI_Encoder_BInput_DigSync_Enable: u32 = 8708;
pub const DAQmx_CI_Encoder_ZInputTerm: u32 = 8607;
pub const DAQmx_CI_Encoder_ZInputTermCfg: u32 = 12455;
pub const DAQmx_CI_Encoder_ZInputLogicLvlBehavior: u32 = 12456;
pub const DAQmx_CI_Encoder_ZInput_DigFltr_Enable: u32 = 8709;
pub const DAQmx_CI_Encoder_ZInput_DigFltr_MinPulseWidth: u32 = 8710;
pub const DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseSrc: u32 = 8711;
pub const DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseRate: u32 = 8712;
pub const DAQmx_CI_Encoder_ZInput_DigSync_Enable: u32 = 8713;
pub const DAQmx_CI_Encoder_ZIndexEnable: u32 = 2192;
pub const DAQmx_CI_Encoder_ZIndexVal: u32 = 2184;
pub const DAQmx_CI_Encoder_ZIndexPhase: u32 = 2185;
pub const DAQmx_CI_PulseWidth_Units: u32 = 2083;
pub const DAQmx_CI_PulseWidth_Term: u32 = 6314;
pub const DAQmx_CI_PulseWidth_TermCfg: u32 = 12457;
pub const DAQmx_CI_PulseWidth_LogicLvlBehavior: u32 = 12458;
pub const DAQmx_CI_PulseWidth_DigFltr_Enable: u32 = 8714;
pub const DAQmx_CI_PulseWidth_DigFltr_MinPulseWidth: u32 = 8715;
pub const DAQmx_CI_PulseWidth_DigFltr_TimebaseSrc: u32 = 8716;
pub const DAQmx_CI_PulseWidth_DigFltr_TimebaseRate: u32 = 8717;
pub const DAQmx_CI_PulseWidth_DigSync_Enable: u32 = 8718;
pub const DAQmx_CI_PulseWidth_StartingEdge: u32 = 2085;
pub const DAQmx_CI_Timestamp_Units: u32 = 8883;
pub const DAQmx_CI_Timestamp_InitialSeconds: u32 = 8884;
pub const DAQmx_CI_GPS_SyncMethod: u32 = 4242;
pub const DAQmx_CI_GPS_SyncSrc: u32 = 4243;
pub const DAQmx_CI_Velocity_AngEncoder_Units: u32 = 12504;
pub const DAQmx_CI_Velocity_AngEncoder_PulsesPerRev: u32 = 12505;
pub const DAQmx_CI_Velocity_LinEncoder_Units: u32 = 12506;
pub const DAQmx_CI_Velocity_LinEncoder_DistPerPulse: u32 = 12507;
pub const DAQmx_CI_Velocity_Encoder_DecodingType: u32 = 12508;
pub const DAQmx_CI_Velocity_Encoder_AInputTerm: u32 = 12509;
pub const DAQmx_CI_Velocity_Encoder_AInputTermCfg: u32 = 12510;
pub const DAQmx_CI_Velocity_Encoder_AInputLogicLvlBehavior: u32 = 12511;
pub const DAQmx_CI_Velocity_Encoder_AInputDigFltr_Enable: u32 = 12512;
pub const DAQmx_CI_Velocity_Encoder_AInputDigFltr_MinPulseWidth: u32 = 12513;
pub const DAQmx_CI_Velocity_Encoder_AInputDigFltr_TimebaseSrc: u32 = 12514;
pub const DAQmx_CI_Velocity_Encoder_AInputDigFltr_TimebaseRate: u32 = 12515;
pub const DAQmx_CI_Velocity_Encoder_BInputTerm: u32 = 12516;
pub const DAQmx_CI_Velocity_Encoder_BInputTermCfg: u32 = 12517;
pub const DAQmx_CI_Velocity_Encoder_BInputLogicLvlBehavior: u32 = 12518;
pub const DAQmx_CI_Velocity_Encoder_BInputDigFltr_Enable: u32 = 12519;
pub const DAQmx_CI_Velocity_Encoder_BInputDigFltr_MinPulseWidth: u32 = 12520;
pub const DAQmx_CI_Velocity_Encoder_BInputDigFltr_TimebaseSrc: u32 = 12521;
pub const DAQmx_CI_Velocity_Encoder_BInputDigFltr_TimebaseRate: u32 = 12522;
pub const DAQmx_CI_Velocity_MeasTime: u32 = 12523;
pub const DAQmx_CI_Velocity_Div: u32 = 12524;
pub const DAQmx_CI_TwoEdgeSep_Units: u32 = 6316;
pub const DAQmx_CI_TwoEdgeSep_FirstTerm: u32 = 6317;
pub const DAQmx_CI_TwoEdgeSep_FirstTermCfg: u32 = 12459;
pub const DAQmx_CI_TwoEdgeSep_FirstLogicLvlBehavior: u32 = 12460;
pub const DAQmx_CI_TwoEdgeSep_First_DigFltr_Enable: u32 = 8719;
pub const DAQmx_CI_TwoEdgeSep_First_DigFltr_MinPulseWidth: u32 = 8720;
pub const DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseSrc: u32 = 8721;
pub const DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseRate: u32 = 8722;
pub const DAQmx_CI_TwoEdgeSep_First_DigSync_Enable: u32 = 8723;
pub const DAQmx_CI_TwoEdgeSep_FirstEdge: u32 = 2099;
pub const DAQmx_CI_TwoEdgeSep_SecondTerm: u32 = 6318;
pub const DAQmx_CI_TwoEdgeSep_SecondTermCfg: u32 = 12461;
pub const DAQmx_CI_TwoEdgeSep_SecondLogicLvlBehavior: u32 = 12462;
pub const DAQmx_CI_TwoEdgeSep_Second_DigFltr_Enable: u32 = 8724;
pub const DAQmx_CI_TwoEdgeSep_Second_DigFltr_MinPulseWidth: u32 = 8725;
pub const DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseSrc: u32 = 8726;
pub const DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseRate: u32 = 8727;
pub const DAQmx_CI_TwoEdgeSep_Second_DigSync_Enable: u32 = 8728;
pub const DAQmx_CI_TwoEdgeSep_SecondEdge: u32 = 2100;
pub const DAQmx_CI_SemiPeriod_Units: u32 = 6319;
pub const DAQmx_CI_SemiPeriod_Term: u32 = 6320;
pub const DAQmx_CI_SemiPeriod_TermCfg: u32 = 12463;
pub const DAQmx_CI_SemiPeriod_LogicLvlBehavior: u32 = 12464;
pub const DAQmx_CI_SemiPeriod_DigFltr_Enable: u32 = 8729;
pub const DAQmx_CI_SemiPeriod_DigFltr_MinPulseWidth: u32 = 8730;
pub const DAQmx_CI_SemiPeriod_DigFltr_TimebaseSrc: u32 = 8731;
pub const DAQmx_CI_SemiPeriod_DigFltr_TimebaseRate: u32 = 8732;
pub const DAQmx_CI_SemiPeriod_DigSync_Enable: u32 = 8733;
pub const DAQmx_CI_SemiPeriod_StartingEdge: u32 = 8958;
pub const DAQmx_CI_Pulse_Freq_Units: u32 = 12043;
pub const DAQmx_CI_Pulse_Freq_Term: u32 = 12036;
pub const DAQmx_CI_Pulse_Freq_TermCfg: u32 = 12465;
pub const DAQmx_CI_Pulse_Freq_LogicLvlBehavior: u32 = 12466;
pub const DAQmx_CI_Pulse_Freq_DigFltr_Enable: u32 = 12038;
pub const DAQmx_CI_Pulse_Freq_DigFltr_MinPulseWidth: u32 = 12039;
pub const DAQmx_CI_Pulse_Freq_DigFltr_TimebaseSrc: u32 = 12040;
pub const DAQmx_CI_Pulse_Freq_DigFltr_TimebaseRate: u32 = 12041;
pub const DAQmx_CI_Pulse_Freq_DigSync_Enable: u32 = 12042;
pub const DAQmx_CI_Pulse_Freq_Start_Edge: u32 = 12037;
pub const DAQmx_CI_Pulse_Time_Units: u32 = 12051;
pub const DAQmx_CI_Pulse_Time_Term: u32 = 12044;
pub const DAQmx_CI_Pulse_Time_TermCfg: u32 = 12467;
pub const DAQmx_CI_Pulse_Time_LogicLvlBehavior: u32 = 12468;
pub const DAQmx_CI_Pulse_Time_DigFltr_Enable: u32 = 12046;
pub const DAQmx_CI_Pulse_Time_DigFltr_MinPulseWidth: u32 = 12047;
pub const DAQmx_CI_Pulse_Time_DigFltr_TimebaseSrc: u32 = 12048;
pub const DAQmx_CI_Pulse_Time_DigFltr_TimebaseRate: u32 = 12049;
pub const DAQmx_CI_Pulse_Time_DigSync_Enable: u32 = 12050;
pub const DAQmx_CI_Pulse_Time_StartEdge: u32 = 12045;
pub const DAQmx_CI_Pulse_Ticks_Term: u32 = 12052;
pub const DAQmx_CI_Pulse_Ticks_TermCfg: u32 = 12469;
pub const DAQmx_CI_Pulse_Ticks_LogicLvlBehavior: u32 = 12470;
pub const DAQmx_CI_Pulse_Ticks_DigFltr_Enable: u32 = 12054;
pub const DAQmx_CI_Pulse_Ticks_DigFltr_MinPulseWidth: u32 = 12055;
pub const DAQmx_CI_Pulse_Ticks_DigFltr_TimebaseSrc: u32 = 12056;
pub const DAQmx_CI_Pulse_Ticks_DigFltr_TimebaseRate: u32 = 12057;
pub const DAQmx_CI_Pulse_Ticks_DigSync_Enable: u32 = 12058;
pub const DAQmx_CI_Pulse_Ticks_StartEdge: u32 = 12053;
pub const DAQmx_CI_CtrTimebaseSrc: u32 = 323;
pub const DAQmx_CI_CtrTimebaseRate: u32 = 6322;
pub const DAQmx_CI_CtrTimebaseActiveEdge: u32 = 322;
pub const DAQmx_CI_CtrTimebase_DigFltr_Enable: u32 = 8817;
pub const DAQmx_CI_CtrTimebase_DigFltr_MinPulseWidth: u32 = 8818;
pub const DAQmx_CI_CtrTimebase_DigFltr_TimebaseSrc: u32 = 8819;
pub const DAQmx_CI_CtrTimebase_DigFltr_TimebaseRate: u32 = 8820;
pub const DAQmx_CI_CtrTimebase_DigSync_Enable: u32 = 8821;
pub const DAQmx_CI_ThreshVoltage: u32 = 12471;
pub const DAQmx_CI_Filter_Enable: u32 = 12727;
pub const DAQmx_CI_Filter_Freq: u32 = 12728;
pub const DAQmx_CI_Filter_Response: u32 = 12729;
pub const DAQmx_CI_Filter_Order: u32 = 12730;
pub const DAQmx_CI_FilterDelay: u32 = 12731;
pub const DAQmx_CI_FilterDelayUnits: u32 = 12732;
pub const DAQmx_CI_Count: u32 = 328;
pub const DAQmx_CI_OutputState: u32 = 329;
pub const DAQmx_CI_TCReached: u32 = 336;
pub const DAQmx_CI_CtrTimebaseMasterTimebaseDiv: u32 = 6323;
pub const DAQmx_CI_SampClkOverrunBehavior: u32 = 12435;
pub const DAQmx_CI_SampClkOverrunSentinelVal: u32 = 12436;
pub const DAQmx_CI_DataXferMech: u32 = 512;
pub const DAQmx_CI_DataXferReqCond: u32 = 12027;
pub const DAQmx_CI_UsbXferReqSize: u32 = 10898;
pub const DAQmx_CI_UsbXferReqCount: u32 = 12292;
pub const DAQmx_CI_MemMapEnable: u32 = 11986;
pub const DAQmx_CI_NumPossiblyInvalidSamps: u32 = 6460;
pub const DAQmx_CI_DupCountPrevent: u32 = 8620;
pub const DAQmx_CI_Prescaler: u32 = 8761;
pub const DAQmx_CI_MaxMeasPeriod: u32 = 12437;
pub const DAQmx_CO_OutputType: u32 = 6325;
pub const DAQmx_CO_Pulse_IdleState: u32 = 4464;
pub const DAQmx_CO_Pulse_Term: u32 = 6369;
pub const DAQmx_CO_Pulse_Time_Units: u32 = 6358;
pub const DAQmx_CO_Pulse_HighTime: u32 = 6330;
pub const DAQmx_CO_Pulse_LowTime: u32 = 6331;
pub const DAQmx_CO_Pulse_Time_InitialDelay: u32 = 6332;
pub const DAQmx_CO_Pulse_DutyCyc: u32 = 4470;
pub const DAQmx_CO_Pulse_Freq_Units: u32 = 6357;
pub const DAQmx_CO_Pulse_Freq: u32 = 4472;
pub const DAQmx_CO_Pulse_Freq_InitialDelay: u32 = 665;
pub const DAQmx_CO_Pulse_HighTicks: u32 = 4457;
pub const DAQmx_CO_Pulse_LowTicks: u32 = 4465;
pub const DAQmx_CO_Pulse_Ticks_InitialDelay: u32 = 664;
pub const DAQmx_CO_CtrTimebaseSrc: u32 = 825;
pub const DAQmx_CO_CtrTimebaseRate: u32 = 6338;
pub const DAQmx_CO_CtrTimebaseActiveEdge: u32 = 833;
pub const DAQmx_CO_CtrTimebase_DigFltr_Enable: u32 = 8822;
pub const DAQmx_CO_CtrTimebase_DigFltr_MinPulseWidth: u32 = 8823;
pub const DAQmx_CO_CtrTimebase_DigFltr_TimebaseSrc: u32 = 8824;
pub const DAQmx_CO_CtrTimebase_DigFltr_TimebaseRate: u32 = 8825;
pub const DAQmx_CO_CtrTimebase_DigSync_Enable: u32 = 8826;
pub const DAQmx_CO_Count: u32 = 659;
pub const DAQmx_CO_OutputState: u32 = 660;
pub const DAQmx_CO_AutoIncrCnt: u32 = 661;
pub const DAQmx_CO_CtrTimebaseMasterTimebaseDiv: u32 = 6339;
pub const DAQmx_CO_PulseDone: u32 = 6414;
pub const DAQmx_CO_EnableInitialDelayOnRetrigger: u32 = 11977;
pub const DAQmx_CO_ConstrainedGenMode: u32 = 10738;
pub const DAQmx_CO_UseOnlyOnBrdMem: u32 = 11979;
pub const DAQmx_CO_DataXferMech: u32 = 11980;
pub const DAQmx_CO_DataXferReqCond: u32 = 11981;
pub const DAQmx_CO_UsbXferReqSize: u32 = 10899;
pub const DAQmx_CO_UsbXferReqCount: u32 = 12293;
pub const DAQmx_CO_MemMapEnable: u32 = 11987;
pub const DAQmx_CO_Prescaler: u32 = 8813;
pub const DAQmx_CO_RdyForNewVal: u32 = 8959;
pub const DAQmx_ChanType: u32 = 6271;
pub const DAQmx_PhysicalChanName: u32 = 6389;
pub const DAQmx_ChanDescr: u32 = 6438;
pub const DAQmx_ChanIsGlobal: u32 = 8964;
pub const DAQmx_Chan_SyncUnlockBehavior: u32 = 12604;
pub const DAQmx_Dev_IsSimulated: u32 = 8906;
pub const DAQmx_Dev_ProductCategory: u32 = 10665;
pub const DAQmx_Dev_ProductType: u32 = 1585;
pub const DAQmx_Dev_ProductNum: u32 = 8989;
pub const DAQmx_Dev_SerialNum: u32 = 1586;
pub const DAQmx_Dev_Accessory_ProductTypes: u32 = 12141;
pub const DAQmx_Dev_Accessory_ProductNums: u32 = 12142;
pub const DAQmx_Dev_Accessory_SerialNums: u32 = 12143;
pub const DAQmx_Carrier_SerialNum: u32 = 10890;
pub const DAQmx_FieldDAQ_DevName: u32 = 12657;
pub const DAQmx_FieldDAQ_BankDevNames: u32 = 12664;
pub const DAQmx_Dev_Chassis_ModuleDevNames: u32 = 10678;
pub const DAQmx_Dev_AnlgTrigSupported: u32 = 10628;
pub const DAQmx_Dev_DigTrigSupported: u32 = 10629;
pub const DAQmx_Dev_TimeTrigSupported: u32 = 12319;
pub const DAQmx_Dev_AI_PhysicalChans: u32 = 8990;
pub const DAQmx_Dev_AI_SupportedMeasTypes: u32 = 12242;
pub const DAQmx_Dev_AI_MaxSingleChanRate: u32 = 10636;
pub const DAQmx_Dev_AI_MaxMultiChanRate: u32 = 10637;
pub const DAQmx_Dev_AI_MinRate: u32 = 10638;
pub const DAQmx_Dev_AI_SimultaneousSamplingSupported: u32 = 10639;
pub const DAQmx_Dev_AI_NumSampTimingEngines: u32 = 12643;
pub const DAQmx_Dev_AI_SampModes: u32 = 12252;
pub const DAQmx_Dev_AI_NumSyncPulseSrcs: u32 = 12644;
pub const DAQmx_Dev_AI_TrigUsage: u32 = 10630;
pub const DAQmx_Dev_AI_VoltageRngs: u32 = 10640;
pub const DAQmx_Dev_AI_VoltageIntExcitDiscreteVals: u32 = 10697;
pub const DAQmx_Dev_AI_VoltageIntExcitRangeVals: u32 = 10698;
pub const DAQmx_Dev_AI_ChargeRngs: u32 = 12561;
pub const DAQmx_Dev_AI_CurrentRngs: u32 = 10641;
pub const DAQmx_Dev_AI_CurrentIntExcitDiscreteVals: u32 = 10699;
pub const DAQmx_Dev_AI_BridgeRngs: u32 = 12240;
pub const DAQmx_Dev_AI_ResistanceRngs: u32 = 10773;
pub const DAQmx_Dev_AI_FreqRngs: u32 = 10642;
pub const DAQmx_Dev_AI_Gains: u32 = 10643;
pub const DAQmx_Dev_AI_Couplings: u32 = 10644;
pub const DAQmx_Dev_AI_LowpassCutoffFreqDiscreteVals: u32 = 10645;
pub const DAQmx_Dev_AI_LowpassCutoffFreqRangeVals: u32 = 10703;
pub const DAQmx_AI_DigFltr_Types: u32 = 12551;
pub const DAQmx_Dev_AI_DigFltr_LowpassCutoffFreqDiscreteVals: u32 = 12488;
pub const DAQmx_Dev_AI_DigFltr_LowpassCutoffFreqRangeVals: u32 = 12489;
pub const DAQmx_Dev_AO_PhysicalChans: u32 = 8991;
pub const DAQmx_Dev_AO_SupportedOutputTypes: u32 = 12243;
pub const DAQmx_Dev_AO_MaxRate: u32 = 10647;
pub const DAQmx_Dev_AO_MinRate: u32 = 10648;
pub const DAQmx_Dev_AO_SampClkSupported: u32 = 10646;
pub const DAQmx_Dev_AO_NumSampTimingEngines: u32 = 12645;
pub const DAQmx_Dev_AO_SampModes: u32 = 12253;
pub const DAQmx_Dev_AO_NumSyncPulseSrcs: u32 = 12646;
pub const DAQmx_Dev_AO_TrigUsage: u32 = 10631;
pub const DAQmx_Dev_AO_VoltageRngs: u32 = 10651;
pub const DAQmx_Dev_AO_CurrentRngs: u32 = 10652;
pub const DAQmx_Dev_AO_Gains: u32 = 10653;
pub const DAQmx_Dev_DI_Lines: u32 = 8992;
pub const DAQmx_Dev_DI_Ports: u32 = 8993;
pub const DAQmx_Dev_DI_MaxRate: u32 = 10649;
pub const DAQmx_Dev_DI_NumSampTimingEngines: u32 = 12647;
pub const DAQmx_Dev_DI_TrigUsage: u32 = 10632;
pub const DAQmx_Dev_DO_Lines: u32 = 8994;
pub const DAQmx_Dev_DO_Ports: u32 = 8995;
pub const DAQmx_Dev_DO_MaxRate: u32 = 10650;
pub const DAQmx_Dev_DO_NumSampTimingEngines: u32 = 12648;
pub const DAQmx_Dev_DO_TrigUsage: u32 = 10633;
pub const DAQmx_Dev_CI_PhysicalChans: u32 = 8996;
pub const DAQmx_Dev_CI_SupportedMeasTypes: u32 = 12244;
pub const DAQmx_Dev_CI_TrigUsage: u32 = 10634;
pub const DAQmx_Dev_CI_SampClkSupported: u32 = 10654;
pub const DAQmx_Dev_CI_SampModes: u32 = 12254;
pub const DAQmx_Dev_CI_MaxSize: u32 = 10655;
pub const DAQmx_Dev_CI_MaxTimebase: u32 = 10656;
pub const DAQmx_Dev_CO_PhysicalChans: u32 = 8997;
pub const DAQmx_Dev_CO_SupportedOutputTypes: u32 = 12245;
pub const DAQmx_Dev_CO_SampClkSupported: u32 = 12123;
pub const DAQmx_Dev_CO_SampModes: u32 = 12255;
pub const DAQmx_Dev_CO_TrigUsage: u32 = 10635;
pub const DAQmx_Dev_CO_MaxSize: u32 = 10657;
pub const DAQmx_Dev_CO_MaxTimebase: u32 = 10658;
pub const DAQmx_Dev_TEDS_HWTEDSSupported: u32 = 12246;
pub const DAQmx_Dev_NumDMAChans: u32 = 9020;
pub const DAQmx_Dev_BusType: u32 = 8998;
pub const DAQmx_Dev_PCI_BusNum: u32 = 8999;
pub const DAQmx_Dev_PCI_DevNum: u32 = 9000;
pub const DAQmx_Dev_PXI_ChassisNum: u32 = 9001;
pub const DAQmx_Dev_PXI_SlotNum: u32 = 9002;
pub const DAQmx_Dev_CompactDAQ_ChassisDevName: u32 = 10679;
pub const DAQmx_Dev_CompactDAQ_SlotNum: u32 = 10680;
pub const DAQmx_Dev_CompactRIO_ChassisDevName: u32 = 12641;
pub const DAQmx_Dev_CompactRIO_SlotNum: u32 = 12642;
pub const DAQmx_Dev_TCPIP_Hostname: u32 = 10891;
pub const DAQmx_Dev_TCPIP_EthernetIP: u32 = 10892;
pub const DAQmx_Dev_TCPIP_WirelessIP: u32 = 10893;
pub const DAQmx_Dev_Terminals: u32 = 10816;
pub const DAQmx_Dev_NumTimeTrigs: u32 = 12609;
pub const DAQmx_Dev_NumTimestampEngines: u32 = 12610;
pub const DAQmx_Exported_AIConvClk_OutputTerm: u32 = 5767;
pub const DAQmx_Exported_AIConvClk_Pulse_Polarity: u32 = 5768;
pub const DAQmx_Exported_10MHzRefClk_OutputTerm: u32 = 8814;
pub const DAQmx_Exported_20MHzTimebase_OutputTerm: u32 = 5719;
pub const DAQmx_Exported_SampClk_OutputBehavior: u32 = 6251;
pub const DAQmx_Exported_SampClk_OutputTerm: u32 = 5731;
pub const DAQmx_Exported_SampClk_DelayOffset: u32 = 8644;
pub const DAQmx_Exported_SampClk_Pulse_Polarity: u32 = 5732;
pub const DAQmx_Exported_SampClkTimebase_OutputTerm: u32 = 6393;
pub const DAQmx_Exported_DividedSampClkTimebase_OutputTerm: u32 = 8609;
pub const DAQmx_Exported_AdvTrig_OutputTerm: u32 = 5701;
pub const DAQmx_Exported_AdvTrig_Pulse_Polarity: u32 = 5702;
pub const DAQmx_Exported_AdvTrig_Pulse_WidthUnits: u32 = 5703;
pub const DAQmx_Exported_AdvTrig_Pulse_Width: u32 = 5704;
pub const DAQmx_Exported_PauseTrig_OutputTerm: u32 = 5653;
pub const DAQmx_Exported_PauseTrig_Lvl_ActiveLvl: u32 = 5654;
pub const DAQmx_Exported_RefTrig_OutputTerm: u32 = 1424;
pub const DAQmx_Exported_RefTrig_Pulse_Polarity: u32 = 1425;
pub const DAQmx_Exported_StartTrig_OutputTerm: u32 = 1412;
pub const DAQmx_Exported_StartTrig_Pulse_Polarity: u32 = 1413;
pub const DAQmx_Exported_AdvCmpltEvent_OutputTerm: u32 = 5713;
pub const DAQmx_Exported_AdvCmpltEvent_Delay: u32 = 5975;
pub const DAQmx_Exported_AdvCmpltEvent_Pulse_Polarity: u32 = 5714;
pub const DAQmx_Exported_AdvCmpltEvent_Pulse_Width: u32 = 5716;
pub const DAQmx_Exported_AIHoldCmpltEvent_OutputTerm: u32 = 6381;
pub const DAQmx_Exported_AIHoldCmpltEvent_PulsePolarity: u32 = 6382;
pub const DAQmx_Exported_ChangeDetectEvent_OutputTerm: u32 = 8599;
pub const DAQmx_Exported_ChangeDetectEvent_Pulse_Polarity: u32 = 8963;
pub const DAQmx_Exported_CtrOutEvent_OutputTerm: u32 = 5911;
pub const DAQmx_Exported_CtrOutEvent_OutputBehavior: u32 = 5967;
pub const DAQmx_Exported_CtrOutEvent_Pulse_Polarity: u32 = 5912;
pub const DAQmx_Exported_CtrOutEvent_Toggle_IdleState: u32 = 6250;
pub const DAQmx_Exported_HshkEvent_OutputTerm: u32 = 8890;
pub const DAQmx_Exported_HshkEvent_OutputBehavior: u32 = 8891;
pub const DAQmx_Exported_HshkEvent_Delay: u32 = 8892;
pub const DAQmx_Exported_HshkEvent_Interlocked_AssertedLvl: u32 = 8893;
pub const DAQmx_Exported_HshkEvent_Interlocked_AssertOnStart: u32 = 8894;
pub const DAQmx_Exported_HshkEvent_Interlocked_DeassertDelay: u32 = 8895;
pub const DAQmx_Exported_HshkEvent_Pulse_Polarity: u32 = 8896;
pub const DAQmx_Exported_HshkEvent_Pulse_Width: u32 = 8897;
pub const DAQmx_Exported_RdyForXferEvent_OutputTerm: u32 = 8885;
pub const DAQmx_Exported_RdyForXferEvent_Lvl_ActiveLvl: u32 = 8886;
pub const DAQmx_Exported_RdyForXferEvent_DeassertCond: u32 = 10595;
pub const DAQmx_Exported_RdyForXferEvent_DeassertCondCustomThreshold: u32 = 10596;
pub const DAQmx_Exported_DataActiveEvent_OutputTerm: u32 = 5683;
pub const DAQmx_Exported_DataActiveEvent_Lvl_ActiveLvl: u32 = 5684;
pub const DAQmx_Exported_RdyForStartEvent_OutputTerm: u32 = 5641;
pub const DAQmx_Exported_RdyForStartEvent_Lvl_ActiveLvl: u32 = 5969;
pub const DAQmx_Exported_SyncPulseEvent_OutputTerm: u32 = 8764;
pub const DAQmx_Exported_WatchdogExpiredEvent_OutputTerm: u32 = 8618;
pub const DAQmx_PersistedChan_Author: u32 = 8912;
pub const DAQmx_PersistedChan_AllowInteractiveEditing: u32 = 8913;
pub const DAQmx_PersistedChan_AllowInteractiveDeletion: u32 = 8914;
pub const DAQmx_PersistedScale_Author: u32 = 8916;
pub const DAQmx_PersistedScale_AllowInteractiveEditing: u32 = 8917;
pub const DAQmx_PersistedScale_AllowInteractiveDeletion: u32 = 8918;
pub const DAQmx_PersistedTask_Author: u32 = 8908;
pub const DAQmx_PersistedTask_AllowInteractiveEditing: u32 = 8909;
pub const DAQmx_PersistedTask_AllowInteractiveDeletion: u32 = 8910;
pub const DAQmx_PhysicalChan_AI_SupportedMeasTypes: u32 = 12247;
pub const DAQmx_PhysicalChan_AI_TermCfgs: u32 = 9026;
pub const DAQmx_PhysicalChan_AI_InputSrcs: u32 = 12248;
pub const DAQmx_PhysicalChan_AI_SensorPower_Types: u32 = 12665;
pub const DAQmx_PhysicalChan_AI_SensorPower_VoltageRangeVals: u32 = 12666;
pub const DAQmx_PhysicalChan_AI_PowerControl_Voltage: u32 = 12652;
pub const DAQmx_PhysicalChan_AI_PowerControl_Enable: u32 = 12653;
pub const DAQmx_PhysicalChan_AI_PowerControl_Type: u32 = 12654;
pub const DAQmx_PhysicalChan_AI_SensorPower_OpenChan: u32 = 12668;
pub const DAQmx_PhysicalChan_AI_SensorPower_Overcurrent: u32 = 12669;
pub const DAQmx_PhysicalChan_AO_SupportedOutputTypes: u32 = 12249;
pub const DAQmx_PhysicalChan_AO_SupportedPowerUpOutputTypes: u32 = 12366;
pub const DAQmx_PhysicalChan_AO_TermCfgs: u32 = 10659;
pub const DAQmx_PhysicalChan_AO_ManualControlEnable: u32 = 10782;
pub const DAQmx_PhysicalChan_AO_ManualControl_ShortDetected: u32 = 11971;
pub const DAQmx_PhysicalChan_AO_ManualControlAmplitude: u32 = 10783;
pub const DAQmx_PhysicalChan_AO_ManualControlFreq: u32 = 10784;
pub const DAQmx_AO_PowerAmp_ChannelEnable: u32 = 12386;
pub const DAQmx_AO_PowerAmp_ScalingCoeff: u32 = 12387;
pub const DAQmx_AO_PowerAmp_Overcurrent: u32 = 12388;
pub const DAQmx_AO_PowerAmp_Gain: u32 = 12389;
pub const DAQmx_AO_PowerAmp_Offset: u32 = 12390;
pub const DAQmx_PhysicalChan_DI_PortWidth: u32 = 10660;
pub const DAQmx_PhysicalChan_DI_SampClkSupported: u32 = 10661;
pub const DAQmx_PhysicalChan_DI_SampModes: u32 = 12256;
pub const DAQmx_PhysicalChan_DI_ChangeDetectSupported: u32 = 10662;
pub const DAQmx_PhysicalChan_DO_PortWidth: u32 = 10663;
pub const DAQmx_PhysicalChan_DO_SampClkSupported: u32 = 10664;
pub const DAQmx_PhysicalChan_DO_SampModes: u32 = 12257;
pub const DAQmx_PhysicalChan_CI_SupportedMeasTypes: u32 = 12250;
pub const DAQmx_PhysicalChan_CO_SupportedOutputTypes: u32 = 12251;
pub const DAQmx_PhysicalChan_TEDS_MfgID: u32 = 8666;
pub const DAQmx_PhysicalChan_TEDS_ModelNum: u32 = 8667;
pub const DAQmx_PhysicalChan_TEDS_SerialNum: u32 = 8668;
pub const DAQmx_PhysicalChan_TEDS_VersionNum: u32 = 8669;
pub const DAQmx_PhysicalChan_TEDS_VersionLetter: u32 = 8670;
pub const DAQmx_PhysicalChan_TEDS_BitStream: u32 = 8671;
pub const DAQmx_PhysicalChan_TEDS_TemplateIDs: u32 = 8847;
pub const DAQmx_Read_RelativeTo: u32 = 6410;
pub const DAQmx_Read_Offset: u32 = 6411;
pub const DAQmx_Read_ChannelsToRead: u32 = 6179;
pub const DAQmx_Read_ReadAllAvailSamp: u32 = 4629;
pub const DAQmx_Read_AutoStart: u32 = 6182;
pub const DAQmx_Read_OverWrite: u32 = 4625;
pub const DAQmx_Logging_FilePath: u32 = 11972;
pub const DAQmx_Logging_Mode: u32 = 11973;
pub const DAQmx_Logging_TDMS_GroupName: u32 = 11974;
pub const DAQmx_Logging_TDMS_Operation: u32 = 11975;
pub const DAQmx_Logging_Pause: u32 = 12259;
pub const DAQmx_Logging_SampsPerFile: u32 = 12260;
pub const DAQmx_Logging_FileWriteSize: u32 = 12227;
pub const DAQmx_Logging_FilePreallocationSize: u32 = 12230;
pub const DAQmx_Read_CurrReadPos: u32 = 4641;
pub const DAQmx_Read_AvailSampPerChan: u32 = 4643;
pub const DAQmx_Read_TotalSampPerChanAcquired: u32 = 6442;
pub const DAQmx_Read_CommonModeRangeErrorChansExist: u32 = 10904;
pub const DAQmx_Read_CommonModeRangeErrorChans: u32 = 10905;
pub const DAQmx_Read_ExcitFaultChansExist: u32 = 12424;
pub const DAQmx_Read_ExcitFaultChans: u32 = 12425;
pub const DAQmx_Read_OvercurrentChansExist: u32 = 10726;
pub const DAQmx_Read_OvercurrentChans: u32 = 10727;
pub const DAQmx_Read_OvertemperatureChansExist: u32 = 12417;
pub const DAQmx_Read_OvertemperatureChans: u32 = 12418;
pub const DAQmx_Read_OpenChansExist: u32 = 12544;
pub const DAQmx_Read_OpenChans: u32 = 12545;
pub const DAQmx_Read_OpenChansDetails: u32 = 12546;
pub const DAQmx_Read_OpenCurrentLoopChansExist: u32 = 10761;
pub const DAQmx_Read_OpenCurrentLoopChans: u32 = 10762;
pub const DAQmx_Read_OpenThrmcplChansExist: u32 = 10902;
pub const DAQmx_Read_OpenThrmcplChans: u32 = 10903;
pub const DAQmx_Read_OverloadedChansExist: u32 = 8564;
pub const DAQmx_Read_OverloadedChans: u32 = 8565;
pub const DAQmx_Read_InputLimitsFaultChansExist: u32 = 12687;
pub const DAQmx_Read_InputLimitsFaultChans: u32 = 12688;
pub const DAQmx_Read_PLL_UnlockedChansExist: u32 = 12568;
pub const DAQmx_Read_PLL_UnlockedChans: u32 = 12569;
pub const DAQmx_Read_PowerSupplyFaultChansExist: u32 = 12690;
pub const DAQmx_Read_PowerSupplyFaultChans: u32 = 12691;
pub const DAQmx_Read_Sync_UnlockedChansExist: u32 = 12605;
pub const DAQmx_Read_Sync_UnlockedChans: u32 = 12606;
pub const DAQmx_Read_AccessoryInsertionOrRemovalDetected: u32 = 12144;
pub const DAQmx_Read_DevsWithInsertedOrRemovedAccessories: u32 = 12145;
pub const DAQmx_Read_ChangeDetect_HasOverflowed: u32 = 8596;
pub const DAQmx_Read_RawDataWidth: u32 = 8570;
pub const DAQmx_Read_NumChans: u32 = 8571;
pub const DAQmx_Read_DigitalLines_BytesPerChan: u32 = 8572;
pub const DAQmx_Read_WaitMode: u32 = 8754;
pub const DAQmx_Read_SleepTime: u32 = 8880;
pub const DAQmx_RealTime_ConvLateErrorsToWarnings: u32 = 8942;
pub const DAQmx_RealTime_NumOfWarmupIters: u32 = 8941;
pub const DAQmx_RealTime_WaitForNextSampClkWaitMode: u32 = 8943;
pub const DAQmx_RealTime_ReportMissedSamp: u32 = 8985;
pub const DAQmx_RealTime_WriteRecoveryMode: u32 = 8986;
pub const DAQmx_Scale_Descr: u32 = 4646;
pub const DAQmx_Scale_ScaledUnits: u32 = 6427;
pub const DAQmx_Scale_PreScaledUnits: u32 = 6391;
pub const DAQmx_Scale_Type: u32 = 6441;
pub const DAQmx_Scale_Lin_Slope: u32 = 4647;
pub const DAQmx_Scale_Lin_YIntercept: u32 = 4648;
pub const DAQmx_Scale_Map_ScaledMax: u32 = 4649;
pub const DAQmx_Scale_Map_PreScaledMax: u32 = 4657;
pub const DAQmx_Scale_Map_ScaledMin: u32 = 4656;
pub const DAQmx_Scale_Map_PreScaledMin: u32 = 4658;
pub const DAQmx_Scale_Poly_ForwardCoeff: u32 = 4660;
pub const DAQmx_Scale_Poly_ReverseCoeff: u32 = 4661;
pub const DAQmx_Scale_Table_ScaledVals: u32 = 4662;
pub const DAQmx_Scale_Table_PreScaledVals: u32 = 4663;
pub const DAQmx_SwitchChan_Usage: u32 = 6372;
pub const DAQmx_SwitchChan_AnlgBusSharingEnable: u32 = 12190;
pub const DAQmx_SwitchChan_MaxACCarryCurrent: u32 = 1608;
pub const DAQmx_SwitchChan_MaxACSwitchCurrent: u32 = 1606;
pub const DAQmx_SwitchChan_MaxACCarryPwr: u32 = 1602;
pub const DAQmx_SwitchChan_MaxACSwitchPwr: u32 = 1604;
pub const DAQmx_SwitchChan_MaxDCCarryCurrent: u32 = 1607;
pub const DAQmx_SwitchChan_MaxDCSwitchCurrent: u32 = 1605;
pub const DAQmx_SwitchChan_MaxDCCarryPwr: u32 = 1603;
pub const DAQmx_SwitchChan_MaxDCSwitchPwr: u32 = 1609;
pub const DAQmx_SwitchChan_MaxACVoltage: u32 = 1617;
pub const DAQmx_SwitchChan_MaxDCVoltage: u32 = 1616;
pub const DAQmx_SwitchChan_WireMode: u32 = 6373;
pub const DAQmx_SwitchChan_Bandwidth: u32 = 1600;
pub const DAQmx_SwitchChan_Impedance: u32 = 1601;
pub const DAQmx_SwitchDev_SettlingTime: u32 = 4676;
pub const DAQmx_SwitchDev_AutoConnAnlgBus: u32 = 6106;
pub const DAQmx_SwitchDev_PwrDownLatchRelaysAfterSettling: u32 = 8923;
pub const DAQmx_SwitchDev_Settled: u32 = 4675;
pub const DAQmx_SwitchDev_RelayList: u32 = 6108;
pub const DAQmx_SwitchDev_NumRelays: u32 = 6374;
pub const DAQmx_SwitchDev_SwitchChanList: u32 = 6375;
pub const DAQmx_SwitchDev_NumSwitchChans: u32 = 6376;
pub const DAQmx_SwitchDev_NumRows: u32 = 6377;
pub const DAQmx_SwitchDev_NumColumns: u32 = 6378;
pub const DAQmx_SwitchDev_Topology: u32 = 6461;
pub const DAQmx_SwitchDev_Temperature: u32 = 12314;
pub const DAQmx_SwitchScan_BreakMode: u32 = 4679;
pub const DAQmx_SwitchScan_RepeatMode: u32 = 4680;
pub const DAQmx_SwitchScan_WaitingForAdv: u32 = 6105;
pub const DAQmx_Sys_GlobalChans: u32 = 4709;
pub const DAQmx_Sys_Scales: u32 = 4710;
pub const DAQmx_Sys_Tasks: u32 = 4711;
pub const DAQmx_Sys_DevNames: u32 = 6459;
pub const DAQmx_Sys_NIDAQMajorVersion: u32 = 4722;
pub const DAQmx_Sys_NIDAQMinorVersion: u32 = 6435;
pub const DAQmx_Sys_NIDAQUpdateVersion: u32 = 12066;
pub const DAQmx_Task_Name: u32 = 4726;
pub const DAQmx_Task_Channels: u32 = 4723;
pub const DAQmx_Task_NumChans: u32 = 8577;
pub const DAQmx_Task_Devices: u32 = 8974;
pub const DAQmx_Task_NumDevices: u32 = 10682;
pub const DAQmx_Task_Complete: u32 = 4724;
pub const DAQmx_SampQuant_SampMode: u32 = 4864;
pub const DAQmx_SampQuant_SampPerChan: u32 = 4880;
pub const DAQmx_SampTimingType: u32 = 4935;
pub const DAQmx_SampClk_Rate: u32 = 4932;
pub const DAQmx_SampClk_MaxRate: u32 = 8904;
pub const DAQmx_SampClk_Src: u32 = 6226;
pub const DAQmx_SampClk_ActiveEdge: u32 = 4865;
pub const DAQmx_SampClk_OverrunBehavior: u32 = 12028;
pub const DAQmx_SampClk_UnderflowBehavior: u32 = 10593;
pub const DAQmx_SampClk_TimebaseDiv: u32 = 6379;
pub const DAQmx_SampClk_Term: u32 = 12059;
pub const DAQmx_SampClk_Timebase_Rate: u32 = 4867;
pub const DAQmx_SampClk_Timebase_Src: u32 = 4872;
pub const DAQmx_SampClk_Timebase_ActiveEdge: u32 = 6380;
pub const DAQmx_SampClk_Timebase_MasterTimebaseDiv: u32 = 4869;
pub const DAQmx_SampClkTimebase_Term: u32 = 12060;
pub const DAQmx_SampClk_DigFltr_Enable: u32 = 8734;
pub const DAQmx_SampClk_DigFltr_MinPulseWidth: u32 = 8735;
pub const DAQmx_SampClk_DigFltr_TimebaseSrc: u32 = 8736;
pub const DAQmx_SampClk_DigFltr_TimebaseRate: u32 = 8737;
pub const DAQmx_SampClk_DigSync_Enable: u32 = 8738;
pub const DAQmx_SampClk_WriteWfm_UseInitialWfmDT: u32 = 12540;
pub const DAQmx_Hshk_DelayAfterXfer: u32 = 8898;
pub const DAQmx_Hshk_StartCond: u32 = 8899;
pub const DAQmx_Hshk_SampleInputDataWhen: u32 = 8900;
pub const DAQmx_ChangeDetect_DI_RisingEdgePhysicalChans: u32 = 8597;
pub const DAQmx_ChangeDetect_DI_FallingEdgePhysicalChans: u32 = 8598;
pub const DAQmx_ChangeDetect_DI_Tristate: u32 = 12026;
pub const DAQmx_OnDemand_SimultaneousAOEnable: u32 = 8608;
pub const DAQmx_Implicit_UnderflowBehavior: u32 = 12029;
pub const DAQmx_AIConv_Rate: u32 = 6216;
pub const DAQmx_AIConv_MaxRate: u32 = 8905;
pub const DAQmx_AIConv_Src: u32 = 5378;
pub const DAQmx_AIConv_ActiveEdge: u32 = 6227;
pub const DAQmx_AIConv_TimebaseDiv: u32 = 4917;
pub const DAQmx_AIConv_Timebase_Src: u32 = 4921;
pub const DAQmx_DelayFromSampClk_DelayUnits: u32 = 4868;
pub const DAQmx_DelayFromSampClk_Delay: u32 = 4887;
pub const DAQmx_AIConv_DigFltr_Enable: u32 = 11996;
pub const DAQmx_AIConv_DigFltr_MinPulseWidth: u32 = 11997;
pub const DAQmx_AIConv_DigFltr_TimebaseSrc: u32 = 11998;
pub const DAQmx_AIConv_DigFltr_TimebaseRate: u32 = 11999;
pub const DAQmx_AIConv_DigSync_Enable: u32 = 12000;
pub const DAQmx_MasterTimebase_Rate: u32 = 5269;
pub const DAQmx_MasterTimebase_Src: u32 = 4931;
pub const DAQmx_RefClk_Rate: u32 = 4885;
pub const DAQmx_RefClk_Src: u32 = 4886;
pub const DAQmx_SyncPulse_Type: u32 = 12598;
pub const DAQmx_SyncPulse_Src: u32 = 8765;
pub const DAQmx_SyncPulse_Time_When: u32 = 12599;
pub const DAQmx_SyncPulse_Time_Timescale: u32 = 12600;
pub const DAQmx_SyncPulse_SyncTime: u32 = 8766;
pub const DAQmx_SyncPulse_MinDelayToStart: u32 = 8767;
pub const DAQmx_SyncPulse_ResetTime: u32 = 12156;
pub const DAQmx_SyncPulse_ResetDelay: u32 = 12157;
pub const DAQmx_SyncPulse_Term: u32 = 12165;
pub const DAQmx_SyncClk_Interval: u32 = 12158;
pub const DAQmx_SampTimingEngine: u32 = 10790;
pub const DAQmx_FirstSampTimestamp_Enable: u32 = 12601;
pub const DAQmx_FirstSampTimestamp_Timescale: u32 = 12603;
pub const DAQmx_FirstSampTimestamp_Val: u32 = 12602;
pub const DAQmx_FirstSampClk_When: u32 = 12674;
pub const DAQmx_FirstSampClk_Timescale: u32 = 12675;
pub const DAQmx_FirstSampClk_Offset: u32 = 12714;
pub const DAQmx_StartTrig_Type: u32 = 5011;
pub const DAQmx_StartTrig_Term: u32 = 12062;
pub const DAQmx_DigEdge_StartTrig_Src: u32 = 5127;
pub const DAQmx_DigEdge_StartTrig_Edge: u32 = 5124;
pub const DAQmx_DigEdge_StartTrig_DigFltr_Enable: u32 = 8739;
pub const DAQmx_DigEdge_StartTrig_DigFltr_MinPulseWidth: u32 = 8740;
pub const DAQmx_DigEdge_StartTrig_DigFltr_TimebaseSrc: u32 = 8741;
pub const DAQmx_DigEdge_StartTrig_DigFltr_TimebaseRate: u32 = 8742;
pub const DAQmx_DigEdge_StartTrig_DigSync_Enable: u32 = 8743;
pub const DAQmx_DigPattern_StartTrig_Src: u32 = 5136;
pub const DAQmx_DigPattern_StartTrig_Pattern: u32 = 8582;
pub const DAQmx_DigPattern_StartTrig_When: u32 = 5137;
pub const DAQmx_AnlgEdge_StartTrig_Src: u32 = 5016;
pub const DAQmx_AnlgEdge_StartTrig_Slope: u32 = 5015;
pub const DAQmx_AnlgEdge_StartTrig_Lvl: u32 = 5014;
pub const DAQmx_AnlgEdge_StartTrig_Hyst: u32 = 5013;
pub const DAQmx_AnlgEdge_StartTrig_Coupling: u32 = 8755;
pub const DAQmx_AnlgEdge_StartTrig_DigFltr_Enable: u32 = 12001;
pub const DAQmx_AnlgEdge_StartTrig_DigFltr_MinPulseWidth: u32 = 12002;
pub const DAQmx_AnlgEdge_StartTrig_DigFltr_TimebaseSrc: u32 = 12003;
pub const DAQmx_AnlgEdge_StartTrig_DigFltr_TimebaseRate: u32 = 12004;
pub const DAQmx_AnlgEdge_StartTrig_DigSync_Enable: u32 = 12005;
pub const DAQmx_AnlgMultiEdge_StartTrig_Srcs: u32 = 12577;
pub const DAQmx_AnlgMultiEdge_StartTrig_Slopes: u32 = 12578;
pub const DAQmx_AnlgMultiEdge_StartTrig_Lvls: u32 = 12579;
pub const DAQmx_AnlgMultiEdge_StartTrig_Hysts: u32 = 12580;
pub const DAQmx_AnlgMultiEdge_StartTrig_Couplings: u32 = 12581;
pub const DAQmx_AnlgWin_StartTrig_Src: u32 = 5120;
pub const DAQmx_AnlgWin_StartTrig_When: u32 = 5121;
pub const DAQmx_AnlgWin_StartTrig_Top: u32 = 5123;
pub const DAQmx_AnlgWin_StartTrig_Btm: u32 = 5122;
pub const DAQmx_AnlgWin_StartTrig_Coupling: u32 = 8756;
pub const DAQmx_AnlgWin_StartTrig_DigFltr_Enable: u32 = 12031;
pub const DAQmx_AnlgWin_StartTrig_DigFltr_MinPulseWidth: u32 = 12032;
pub const DAQmx_AnlgWin_StartTrig_DigFltr_TimebaseSrc: u32 = 12033;
pub const DAQmx_AnlgWin_StartTrig_DigFltr_TimebaseRate: u32 = 12034;
pub const DAQmx_AnlgWin_StartTrig_DigSync_Enable: u32 = 12035;
pub const DAQmx_StartTrig_TrigWhen: u32 = 12365;
pub const DAQmx_StartTrig_Timescale: u32 = 12342;
pub const DAQmx_StartTrig_TimestampEnable: u32 = 12618;
pub const DAQmx_StartTrig_TimestampTimescale: u32 = 12589;
pub const DAQmx_StartTrig_TimestampVal: u32 = 12619;
pub const DAQmx_StartTrig_Delay: u32 = 6230;
pub const DAQmx_StartTrig_DelayUnits: u32 = 6344;
pub const DAQmx_StartTrig_Retriggerable: u32 = 6415;
pub const DAQmx_StartTrig_TrigWin: u32 = 12570;
pub const DAQmx_StartTrig_RetriggerWin: u32 = 12571;
pub const DAQmx_StartTrig_MaxNumTrigsToDetect: u32 = 12572;
pub const DAQmx_RefTrig_Type: u32 = 5145;
pub const DAQmx_RefTrig_PretrigSamples: u32 = 5189;
pub const DAQmx_RefTrig_Term: u32 = 12063;
pub const DAQmx_DigEdge_RefTrig_Src: u32 = 5172;
pub const DAQmx_DigEdge_RefTrig_Edge: u32 = 5168;
pub const DAQmx_DigEdge_RefTrig_DigFltr_Enable: u32 = 11991;
pub const DAQmx_DigEdge_RefTrig_DigFltr_MinPulseWidth: u32 = 11992;
pub const DAQmx_DigEdge_RefTrig_DigFltr_TimebaseSrc: u32 = 11993;
pub const DAQmx_DigEdge_RefTrig_DigFltr_TimebaseRate: u32 = 11994;
pub const DAQmx_DigEdge_RefTrig_DigSync_Enable: u32 = 11995;
pub const DAQmx_DigPattern_RefTrig_Src: u32 = 5175;
pub const DAQmx_DigPattern_RefTrig_Pattern: u32 = 8583;
pub const DAQmx_DigPattern_RefTrig_When: u32 = 5176;
pub const DAQmx_AnlgEdge_RefTrig_Src: u32 = 5156;
pub const DAQmx_AnlgEdge_RefTrig_Slope: u32 = 5155;
pub const DAQmx_AnlgEdge_RefTrig_Lvl: u32 = 5154;
pub const DAQmx_AnlgEdge_RefTrig_Hyst: u32 = 5153;
pub const DAQmx_AnlgEdge_RefTrig_Coupling: u32 = 8757;
pub const DAQmx_AnlgEdge_RefTrig_DigFltr_Enable: u32 = 12006;
pub const DAQmx_AnlgEdge_RefTrig_DigFltr_MinPulseWidth: u32 = 12007;
pub const DAQmx_AnlgEdge_RefTrig_DigFltr_TimebaseSrc: u32 = 12008;
pub const DAQmx_AnlgEdge_RefTrig_DigFltr_TimebaseRate: u32 = 12009;
pub const DAQmx_AnlgEdge_RefTrig_DigSync_Enable: u32 = 12010;
pub const DAQmx_AnlgMultiEdge_RefTrig_Srcs: u32 = 12582;
pub const DAQmx_AnlgMultiEdge_RefTrig_Slopes: u32 = 12583;
pub const DAQmx_AnlgMultiEdge_RefTrig_Lvls: u32 = 12584;
pub const DAQmx_AnlgMultiEdge_RefTrig_Hysts: u32 = 12585;
pub const DAQmx_AnlgMultiEdge_RefTrig_Couplings: u32 = 12586;
pub const DAQmx_AnlgWin_RefTrig_Src: u32 = 5158;
pub const DAQmx_AnlgWin_RefTrig_When: u32 = 5159;
pub const DAQmx_AnlgWin_RefTrig_Top: u32 = 5161;
pub const DAQmx_AnlgWin_RefTrig_Btm: u32 = 5160;
pub const DAQmx_AnlgWin_RefTrig_Coupling: u32 = 6231;
pub const DAQmx_AnlgWin_RefTrig_DigFltr_Enable: u32 = 12011;
pub const DAQmx_AnlgWin_RefTrig_DigFltr_MinPulseWidth: u32 = 12012;
pub const DAQmx_AnlgWin_RefTrig_DigFltr_TimebaseSrc: u32 = 12013;
pub const DAQmx_AnlgWin_RefTrig_DigFltr_TimebaseRate: u32 = 12014;
pub const DAQmx_AnlgWin_RefTrig_DigSync_Enable: u32 = 12015;
pub const DAQmx_RefTrig_AutoTrigEnable: u32 = 11969;
pub const DAQmx_RefTrig_AutoTriggered: u32 = 11970;
pub const DAQmx_RefTrig_TimestampEnable: u32 = 12590;
pub const DAQmx_RefTrig_TimestampTimescale: u32 = 12592;
pub const DAQmx_RefTrig_TimestampVal: u32 = 12591;
pub const DAQmx_RefTrig_Delay: u32 = 5251;
pub const DAQmx_RefTrig_Retriggerable: u32 = 12573;
pub const DAQmx_RefTrig_TrigWin: u32 = 12574;
pub const DAQmx_RefTrig_RetriggerWin: u32 = 12575;
pub const DAQmx_RefTrig_MaxNumTrigsToDetect: u32 = 12576;
pub const DAQmx_AdvTrig_Type: u32 = 4965;
pub const DAQmx_DigEdge_AdvTrig_Src: u32 = 4962;
pub const DAQmx_DigEdge_AdvTrig_Edge: u32 = 4960;
pub const DAQmx_DigEdge_AdvTrig_DigFltr_Enable: u32 = 8760;
pub const DAQmx_HshkTrig_Type: u32 = 8887;
pub const DAQmx_Interlocked_HshkTrig_Src: u32 = 8888;
pub const DAQmx_Interlocked_HshkTrig_AssertedLvl: u32 = 8889;
pub const DAQmx_PauseTrig_Type: u32 = 4966;
pub const DAQmx_PauseTrig_Term: u32 = 12064;
pub const DAQmx_AnlgLvl_PauseTrig_Src: u32 = 4976;
pub const DAQmx_AnlgLvl_PauseTrig_When: u32 = 4977;
pub const DAQmx_AnlgLvl_PauseTrig_Lvl: u32 = 4969;
pub const DAQmx_AnlgLvl_PauseTrig_Hyst: u32 = 4968;
pub const DAQmx_AnlgLvl_PauseTrig_Coupling: u32 = 8758;
pub const DAQmx_AnlgLvl_PauseTrig_DigFltr_Enable: u32 = 12016;
pub const DAQmx_AnlgLvl_PauseTrig_DigFltr_MinPulseWidth: u32 = 12017;
pub const DAQmx_AnlgLvl_PauseTrig_DigFltr_TimebaseSrc: u32 = 12018;
pub const DAQmx_AnlgLvl_PauseTrig_DigFltr_TimebaseRate: u32 = 12019;
pub const DAQmx_AnlgLvl_PauseTrig_DigSync_Enable: u32 = 12020;
pub const DAQmx_AnlgWin_PauseTrig_Src: u32 = 4979;
pub const DAQmx_AnlgWin_PauseTrig_When: u32 = 4980;
pub const DAQmx_AnlgWin_PauseTrig_Top: u32 = 4982;
pub const DAQmx_AnlgWin_PauseTrig_Btm: u32 = 4981;
pub const DAQmx_AnlgWin_PauseTrig_Coupling: u32 = 8759;
pub const DAQmx_AnlgWin_PauseTrig_DigFltr_Enable: u32 = 12021;
pub const DAQmx_AnlgWin_PauseTrig_DigFltr_MinPulseWidth: u32 = 12022;
pub const DAQmx_AnlgWin_PauseTrig_DigFltr_TimebaseSrc: u32 = 12023;
pub const DAQmx_AnlgWin_PauseTrig_DigFltr_TimebaseRate: u32 = 12024;
pub const DAQmx_AnlgWin_PauseTrig_DigSync_Enable: u32 = 12025;
pub const DAQmx_DigLvl_PauseTrig_Src: u32 = 4985;
pub const DAQmx_DigLvl_PauseTrig_When: u32 = 4992;
pub const DAQmx_DigLvl_PauseTrig_DigFltr_Enable: u32 = 8744;
pub const DAQmx_DigLvl_PauseTrig_DigFltr_MinPulseWidth: u32 = 8745;
pub const DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseSrc: u32 = 8746;
pub const DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseRate: u32 = 8747;
pub const DAQmx_DigLvl_PauseTrig_DigSync_Enable: u32 = 8748;
pub const DAQmx_DigPattern_PauseTrig_Src: u32 = 8559;
pub const DAQmx_DigPattern_PauseTrig_Pattern: u32 = 8584;
pub const DAQmx_DigPattern_PauseTrig_When: u32 = 8560;
pub const DAQmx_ArmStartTrig_Type: u32 = 5140;
pub const DAQmx_ArmStart_Term: u32 = 12159;
pub const DAQmx_DigEdge_ArmStartTrig_Src: u32 = 5143;
pub const DAQmx_DigEdge_ArmStartTrig_Edge: u32 = 5141;
pub const DAQmx_DigEdge_ArmStartTrig_DigFltr_Enable: u32 = 8749;
pub const DAQmx_DigEdge_ArmStartTrig_DigFltr_MinPulseWidth: u32 = 8750;
pub const DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseSrc: u32 = 8751;
pub const DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseRate: u32 = 8752;
pub const DAQmx_DigEdge_ArmStartTrig_DigSync_Enable: u32 = 8753;
pub const DAQmx_ArmStartTrig_TrigWhen: u32 = 12593;
pub const DAQmx_ArmStartTrig_Timescale: u32 = 12594;
pub const DAQmx_ArmStartTrig_TimestampEnable: u32 = 12595;
pub const DAQmx_ArmStartTrig_TimestampTimescale: u32 = 12597;
pub const DAQmx_ArmStartTrig_TimestampVal: u32 = 12596;
pub const DAQmx_Trigger_SyncType: u32 = 12160;
pub const DAQmx_Watchdog_Timeout: u32 = 8617;
pub const DAQmx_WatchdogExpirTrig_Type: u32 = 8611;
pub const DAQmx_WatchdogExpirTrig_TrigOnNetworkConnLoss: u32 = 12381;
pub const DAQmx_DigEdge_WatchdogExpirTrig_Src: u32 = 8612;
pub const DAQmx_DigEdge_WatchdogExpirTrig_Edge: u32 = 8613;
pub const DAQmx_Watchdog_DO_ExpirState: u32 = 8615;
pub const DAQmx_Watchdog_AO_OutputType: u32 = 12382;
pub const DAQmx_Watchdog_AO_ExpirState: u32 = 12383;
pub const DAQmx_Watchdog_CO_ExpirState: u32 = 12384;
pub const DAQmx_Watchdog_HasExpired: u32 = 8616;
pub const DAQmx_Write_RelativeTo: u32 = 6412;
pub const DAQmx_Write_Offset: u32 = 6413;
pub const DAQmx_Write_RegenMode: u32 = 5203;
pub const DAQmx_Write_CurrWritePos: u32 = 5208;
pub const DAQmx_Write_OvercurrentChansExist: u32 = 10728;
pub const DAQmx_Write_OvercurrentChans: u32 = 10729;
pub const DAQmx_Write_OvertemperatureChansExist: u32 = 10884;
pub const DAQmx_Write_OvertemperatureChans: u32 = 12419;
pub const DAQmx_Write_ExternalOvervoltageChansExist: u32 = 12475;
pub const DAQmx_Write_ExternalOvervoltageChans: u32 = 12476;
pub const DAQmx_Write_OverloadedChansExist: u32 = 12420;
pub const DAQmx_Write_OverloadedChans: u32 = 12421;
pub const DAQmx_Write_OpenCurrentLoopChansExist: u32 = 10730;
pub const DAQmx_Write_OpenCurrentLoopChans: u32 = 10731;
pub const DAQmx_Write_PowerSupplyFaultChansExist: u32 = 10732;
pub const DAQmx_Write_PowerSupplyFaultChans: u32 = 10733;
pub const DAQmx_Write_Sync_UnlockedChansExist: u32 = 12607;
pub const DAQmx_Write_Sync_UnlockedChans: u32 = 12608;
pub const DAQmx_Write_SpaceAvail: u32 = 5216;
pub const DAQmx_Write_TotalSampPerChanGenerated: u32 = 6443;
pub const DAQmx_Write_AccessoryInsertionOrRemovalDetected: u32 = 12371;
pub const DAQmx_Write_DevsWithInsertedOrRemovedAccessories: u32 = 12372;
pub const DAQmx_Write_RawDataWidth: u32 = 8573;
pub const DAQmx_Write_NumChans: u32 = 8574;
pub const DAQmx_Write_WaitMode: u32 = 8881;
pub const DAQmx_Write_SleepTime: u32 = 8882;
pub const DAQmx_Write_DigitalLines_BytesPerChan: u32 = 8575;
pub const DAQmx_ReadWaitMode: u32 = 8754;
pub const DAQmx_Val_Task_Start: u32 = 0;
pub const DAQmx_Val_Task_Stop: u32 = 1;
pub const DAQmx_Val_Task_Verify: u32 = 2;
pub const DAQmx_Val_Task_Commit: u32 = 3;
pub const DAQmx_Val_Task_Reserve: u32 = 4;
pub const DAQmx_Val_Task_Unreserve: u32 = 5;
pub const DAQmx_Val_Task_Abort: u32 = 6;
pub const DAQmx_Val_SynchronousEventCallbacks: u32 = 1;
pub const DAQmx_Val_Acquired_Into_Buffer: u32 = 1;
pub const DAQmx_Val_Transferred_From_Buffer: u32 = 2;
pub const DAQmx_Val_ResetTimer: u32 = 0;
pub const DAQmx_Val_ClearExpiration: u32 = 1;
pub const DAQmx_Val_ChanPerLine: u32 = 0;
pub const DAQmx_Val_ChanForAllLines: u32 = 1;
pub const DAQmx_Val_GroupByChannel: u32 = 0;
pub const DAQmx_Val_GroupByScanNumber: u32 = 1;
pub const DAQmx_Val_DoNotInvertPolarity: u32 = 0;
pub const DAQmx_Val_InvertPolarity: u32 = 1;
pub const DAQmx_Val_Action_Commit: u32 = 0;
pub const DAQmx_Val_Action_Cancel: u32 = 1;
pub const DAQmx_Val_AdvanceTrigger: u32 = 12488;
pub const DAQmx_Val_Rising: u32 = 10280;
pub const DAQmx_Val_Falling: u32 = 10171;
pub const DAQmx_Val_PathStatus_Available: u32 = 10431;
pub const DAQmx_Val_PathStatus_AlreadyExists: u32 = 10432;
pub const DAQmx_Val_PathStatus_Unsupported: u32 = 10433;
pub const DAQmx_Val_PathStatus_ChannelInUse: u32 = 10434;
pub const DAQmx_Val_PathStatus_SourceChannelConflict: u32 = 10435;
pub const DAQmx_Val_PathStatus_ChannelReservedForRouting: u32 = 10436;
pub const DAQmx_Val_DegC: u32 = 10143;
pub const DAQmx_Val_DegF: u32 = 10144;
pub const DAQmx_Val_Kelvins: u32 = 10325;
pub const DAQmx_Val_DegR: u32 = 10145;
pub const DAQmx_Val_High: u32 = 10192;
pub const DAQmx_Val_Low: u32 = 10214;
pub const DAQmx_Val_Tristate: u32 = 10310;
pub const DAQmx_Val_PullUp: u32 = 15950;
pub const DAQmx_Val_PullDown: u32 = 15951;
pub const DAQmx_Val_ChannelVoltage: u32 = 0;
pub const DAQmx_Val_ChannelCurrent: u32 = 1;
pub const DAQmx_Val_ChannelHighImpedance: u32 = 2;
pub const DAQmx_Val_Open: u32 = 10437;
pub const DAQmx_Val_Closed: u32 = 10438;
pub const DAQmx_Val_Loopback0: u32 = 0;
pub const DAQmx_Val_Loopback180: u32 = 1;
pub const DAQmx_Val_Ground: u32 = 2;
pub const DAQmx_Val_Voltage: u32 = 10322;
pub const DAQmx_Val_Bridge: u32 = 15908;
pub const DAQmx_Val_Current: u32 = 10134;
pub const DAQmx_Val_Diff: u32 = 10106;
pub const DAQmx_Val_PseudoDiff: u32 = 12529;
pub const DAQmx_Val_Charge: u32 = 16105;
pub const DAQmx_Val_A: u32 = 12513;
pub const DAQmx_Val_B: u32 = 12514;
pub const DAQmx_Val_Newtons: u32 = 15875;
pub const DAQmx_Val_Pounds: u32 = 15876;
pub const DAQmx_Val_FromCustomScale: u32 = 10065;
pub const DAQmx_Val_StartTrigger: u32 = 12491;
pub const DAQmx_Val_ReferenceTrigger: u32 = 12490;
pub const DAQmx_Val_ArmStartTrigger: u32 = 14641;
pub const DAQmx_Val_FirstSampleTimestamp: u32 = 16130;
pub const DAQmx_Val_Cfg_Default: i32 = -1;
pub const DAQmx_Val_Default: i32 = -1;
pub const DAQmx_Val_WaitInfinitely: f64 = -1.0;
pub const DAQmx_Val_Auto: i32 = -1;
pub const DAQmx_Val_Save_Overwrite: u32 = 1;
pub const DAQmx_Val_Save_AllowInteractiveEditing: u32 = 2;
pub const DAQmx_Val_Save_AllowInteractiveDeletion: u32 = 4;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Advance: u32 = 1;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Pause: u32 = 2;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Reference: u32 = 4;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Start: u32 = 8;
pub const DAQmx_Val_Bit_TriggerUsageTypes_Handshake: u32 = 16;
pub const DAQmx_Val_Bit_TriggerUsageTypes_ArmStart: u32 = 32;
pub const DAQmx_Val_Bit_CouplingTypes_AC: u32 = 1;
pub const DAQmx_Val_Bit_CouplingTypes_DC: u32 = 2;
pub const DAQmx_Val_Bit_CouplingTypes_Ground: u32 = 4;
pub const DAQmx_Val_Bit_CouplingTypes_HFReject: u32 = 8;
pub const DAQmx_Val_Bit_CouplingTypes_LFReject: u32 = 16;
pub const DAQmx_Val_Bit_CouplingTypes_NoiseReject: u32 = 32;
pub const DAQmx_Val_Bit_TermCfg_RSE: u32 = 1;
pub const DAQmx_Val_Bit_TermCfg_NRSE: u32 = 2;
pub const DAQmx_Val_Bit_TermCfg_Diff: u32 = 4;
pub const DAQmx_Val_Bit_TermCfg_PseudoDIFF: u32 = 8;
pub const DAQmx_Val_4Wire: u32 = 4;
pub const DAQmx_Val_5Wire: u32 = 5;
pub const DAQmx_Val_6Wire: u32 = 6;
pub const DAQmx_Val_Automatic: u32 = 16097;
pub const DAQmx_Val_HighResolution: u32 = 10195;
pub const DAQmx_Val_HighSpeed: u32 = 14712;
pub const DAQmx_Val_Best50HzRejection: u32 = 14713;
pub const DAQmx_Val_Best60HzRejection: u32 = 14714;
pub const DAQmx_Val_Custom: u32 = 10137;
pub const DAQmx_Val_VoltageRMS: u32 = 10350;
pub const DAQmx_Val_CurrentRMS: u32 = 10351;
pub const DAQmx_Val_Voltage_CustomWithExcitation: u32 = 10323;
pub const DAQmx_Val_Freq_Voltage: u32 = 10181;
pub const DAQmx_Val_Resistance: u32 = 10278;
pub const DAQmx_Val_Temp_TC: u32 = 10303;
pub const DAQmx_Val_Temp_Thrmstr: u32 = 10302;
pub const DAQmx_Val_Temp_RTD: u32 = 10301;
pub const DAQmx_Val_Temp_BuiltInSensor: u32 = 10311;
pub const DAQmx_Val_Strain_Gage: u32 = 10300;
pub const DAQmx_Val_Rosette_Strain_Gage: u32 = 15980;
pub const DAQmx_Val_Position_LVDT: u32 = 10352;
pub const DAQmx_Val_Position_RVDT: u32 = 10353;
pub const DAQmx_Val_Position_EddyCurrentProximityProbe: u32 = 14835;
pub const DAQmx_Val_Accelerometer: u32 = 10356;
pub const DAQmx_Val_Acceleration_Charge: u32 = 16104;
pub const DAQmx_Val_Acceleration_4WireDCVoltage: u32 = 16106;
pub const DAQmx_Val_Velocity_IEPESensor: u32 = 15966;
pub const DAQmx_Val_Force_Bridge: u32 = 15899;
pub const DAQmx_Val_Force_IEPESensor: u32 = 15895;
pub const DAQmx_Val_Pressure_Bridge: u32 = 15902;
pub const DAQmx_Val_SoundPressure_Microphone: u32 = 10354;
pub const DAQmx_Val_Torque_Bridge: u32 = 15905;
pub const DAQmx_Val_TEDS_Sensor: u32 = 12531;
pub const DAQmx_Val_ZeroVolts: u32 = 12526;
pub const DAQmx_Val_HighImpedance: u32 = 12527;
pub const DAQmx_Val_MaintainExistingValue: u32 = 12528;
pub const DAQmx_Val_FuncGen: u32 = 14750;
pub const DAQmx_Val_PicoCoulombsPerG: u32 = 16099;
pub const DAQmx_Val_PicoCoulombsPerMetersPerSecondSquared: u32 = 16100;
pub const DAQmx_Val_PicoCoulombsPerInchesPerSecondSquared: u32 = 16101;
pub const DAQmx_Val_mVoltsPerG: u32 = 12509;
pub const DAQmx_Val_VoltsPerG: u32 = 12510;
pub const DAQmx_Val_AccelUnit_g: u32 = 10186;
pub const DAQmx_Val_MetersPerSecondSquared: u32 = 12470;
pub const DAQmx_Val_InchesPerSecondSquared: u32 = 12471;
pub const DAQmx_Val_FiniteSamps: u32 = 10178;
pub const DAQmx_Val_ContSamps: u32 = 10123;
pub const DAQmx_Val_HWTimedSinglePoint: u32 = 12522;
pub const DAQmx_Val_AboveLvl: u32 = 10093;
pub const DAQmx_Val_BelowLvl: u32 = 10107;
pub const DAQmx_Val_Degrees: u32 = 10146;
pub const DAQmx_Val_Radians: u32 = 10273;
pub const DAQmx_Val_Ticks: u32 = 10304;
pub const DAQmx_Val_RPM: u32 = 16080;
pub const DAQmx_Val_RadiansPerSecond: u32 = 16081;
pub const DAQmx_Val_DegreesPerSecond: u32 = 16082;
pub const DAQmx_Val_None: u32 = 10230;
pub const DAQmx_Val_Once: u32 = 10244;
pub const DAQmx_Val_EverySample: u32 = 10164;
pub const DAQmx_Val_NoAction: u32 = 10227;
pub const DAQmx_Val_BreakBeforeMake: u32 = 10110;
pub const DAQmx_Val_FullBridge: u32 = 10182;
pub const DAQmx_Val_HalfBridge: u32 = 10187;
pub const DAQmx_Val_QuarterBridge: u32 = 10270;
pub const DAQmx_Val_NoBridge: u32 = 10228;
pub const DAQmx_Val_VoltsPerVolt: u32 = 15896;
pub const DAQmx_Val_mVoltsPerVolt: u32 = 15897;
pub const DAQmx_Val_KilogramForce: u32 = 15877;
pub const DAQmx_Val_Pascals: u32 = 10081;
pub const DAQmx_Val_PoundsPerSquareInch: u32 = 15879;
pub const DAQmx_Val_Bar: u32 = 15880;
pub const DAQmx_Val_NewtonMeters: u32 = 15881;
pub const DAQmx_Val_InchOunces: u32 = 15882;
pub const DAQmx_Val_InchPounds: u32 = 15883;
pub const DAQmx_Val_FootPounds: u32 = 15884;
pub const DAQmx_Val_FromTEDS: u32 = 12516;
pub const DAQmx_Val_PCI: u32 = 12582;
pub const DAQmx_Val_PCIe: u32 = 13612;
pub const DAQmx_Val_PXI: u32 = 12583;
pub const DAQmx_Val_PXIe: u32 = 14706;
pub const DAQmx_Val_SCXI: u32 = 12584;
pub const DAQmx_Val_SCC: u32 = 14707;
pub const DAQmx_Val_PCCard: u32 = 12585;
pub const DAQmx_Val_USB: u32 = 12586;
pub const DAQmx_Val_CompactDAQ: u32 = 14637;
pub const DAQmx_Val_CompactRIO: u32 = 16143;
pub const DAQmx_Val_TCPIP: u32 = 14828;
pub const DAQmx_Val_Unknown: u32 = 12588;
pub const DAQmx_Val_SwitchBlock: u32 = 15870;
pub const DAQmx_Val_CountEdges: u32 = 10125;
pub const DAQmx_Val_Freq: u32 = 10179;
pub const DAQmx_Val_Period: u32 = 10256;
pub const DAQmx_Val_PulseWidth: u32 = 10359;
pub const DAQmx_Val_SemiPeriod: u32 = 10289;
pub const DAQmx_Val_PulseFrequency: u32 = 15864;
pub const DAQmx_Val_PulseTime: u32 = 15865;
pub const DAQmx_Val_PulseTicks: u32 = 15866;
pub const DAQmx_Val_DutyCycle: u32 = 16070;
pub const DAQmx_Val_Position_AngEncoder: u32 = 10360;
pub const DAQmx_Val_Position_LinEncoder: u32 = 10361;
pub const DAQmx_Val_Velocity_AngEncoder: u32 = 16078;
pub const DAQmx_Val_Velocity_LinEncoder: u32 = 16079;
pub const DAQmx_Val_TwoEdgeSep: u32 = 10267;
pub const DAQmx_Val_GPS_Timestamp: u32 = 10362;
pub const DAQmx_Val_BuiltIn: u32 = 10200;
pub const DAQmx_Val_ConstVal: u32 = 10116;
pub const DAQmx_Val_Chan: u32 = 10113;
pub const DAQmx_Val_Pulse_Time: u32 = 10269;
pub const DAQmx_Val_Pulse_Freq: u32 = 10119;
pub const DAQmx_Val_Pulse_Ticks: u32 = 10268;
pub const DAQmx_Val_AI: u32 = 10100;
pub const DAQmx_Val_AO: u32 = 10102;
pub const DAQmx_Val_DI: u32 = 10151;
pub const DAQmx_Val_DO: u32 = 10153;
pub const DAQmx_Val_CI: u32 = 10131;
pub const DAQmx_Val_CO: u32 = 10132;
pub const DAQmx_Val_Unconstrained: u32 = 14708;
pub const DAQmx_Val_FixedHighFreq: u32 = 14709;
pub const DAQmx_Val_FixedLowFreq: u32 = 14710;
pub const DAQmx_Val_Fixed50PercentDutyCycle: u32 = 14711;
pub const DAQmx_Val_CountUp: u32 = 10128;
pub const DAQmx_Val_CountDown: u32 = 10124;
pub const DAQmx_Val_ExtControlled: u32 = 10326;
pub const DAQmx_Val_LowFreq1Ctr: u32 = 10105;
pub const DAQmx_Val_HighFreq2Ctr: u32 = 10157;
pub const DAQmx_Val_LargeRng2Ctr: u32 = 10205;
pub const DAQmx_Val_DynAvg: u32 = 16065;
pub const DAQmx_Val_AC: u32 = 10045;
pub const DAQmx_Val_DC: u32 = 10050;
pub const DAQmx_Val_GND: u32 = 10066;
pub const DAQmx_Val_Internal: u32 = 10200;
pub const DAQmx_Val_External: u32 = 10167;
pub const DAQmx_Val_UserProvided: u32 = 10167;
pub const DAQmx_Val_Coulombs: u32 = 16102;
pub const DAQmx_Val_PicoCoulombs: u32 = 16103;
pub const DAQmx_Val_Amps: u32 = 10342;
pub const DAQmx_Val_RightJustified: u32 = 10279;
pub const DAQmx_Val_LeftJustified: u32 = 10209;
pub const DAQmx_Val_DMA: u32 = 10054;
pub const DAQmx_Val_Interrupts: u32 = 10204;
pub const DAQmx_Val_ProgrammedIO: u32 = 10264;
pub const DAQmx_Val_USBbulk: u32 = 12590;
pub const DAQmx_Val_OnbrdMemMoreThanHalfFull: u32 = 10237;
pub const DAQmx_Val_OnbrdMemFull: u32 = 10236;
pub const DAQmx_Val_OnbrdMemCustomThreshold: u32 = 12577;
pub const DAQmx_Val_ActiveDrive: u32 = 12573;
pub const DAQmx_Val_OpenCollector: u32 = 12574;
pub const DAQmx_Val_NoChange: u32 = 10160;
pub const DAQmx_Val_PatternMatches: u32 = 10254;
pub const DAQmx_Val_PatternDoesNotMatch: u32 = 10253;
pub const DAQmx_Val_SampClkPeriods: u32 = 10286;
pub const DAQmx_Val_Seconds: u32 = 10364;
pub const DAQmx_Val_SampleClkPeriods: u32 = 10286;
pub const DAQmx_Val_mVoltsPerMil: u32 = 14836;
pub const DAQmx_Val_VoltsPerMil: u32 = 14837;
pub const DAQmx_Val_mVoltsPerMillimeter: u32 = 14838;
pub const DAQmx_Val_VoltsPerMillimeter: u32 = 14839;
pub const DAQmx_Val_mVoltsPerMicron: u32 = 14840;
pub const DAQmx_Val_X1: u32 = 10090;
pub const DAQmx_Val_X2: u32 = 10091;
pub const DAQmx_Val_X4: u32 = 10092;
pub const DAQmx_Val_TwoPulseCounting: u32 = 10313;
pub const DAQmx_Val_AHighBHigh: u32 = 10040;
pub const DAQmx_Val_AHighBLow: u32 = 10041;
pub const DAQmx_Val_ALowBHigh: u32 = 10042;
pub const DAQmx_Val_ALowBLow: u32 = 10043;
pub const DAQmx_Val_Pulse: u32 = 10265;
pub const DAQmx_Val_Toggle: u32 = 10307;
pub const DAQmx_Val_Lvl: u32 = 10210;
pub const DAQmx_Val_Interlocked: u32 = 12549;
pub const DAQmx_Val_Lowpass: u32 = 16071;
pub const DAQmx_Val_Highpass: u32 = 16072;
pub const DAQmx_Val_Bandpass: u32 = 16073;
pub const DAQmx_Val_Notch: u32 = 16074;
pub const DAQmx_Val_ConstantGroupDelay: u32 = 16075;
pub const DAQmx_Val_Butterworth: u32 = 16076;
pub const DAQmx_Val_Elliptical: u32 = 16077;
pub const DAQmx_Val_HardwareDefined: u32 = 10191;
pub const DAQmx_Val_Comb: u32 = 16152;
pub const DAQmx_Val_Bessel: u32 = 16153;
pub const DAQmx_Val_Brickwall: u32 = 16155;
pub const DAQmx_Val_mVoltsPerNewton: u32 = 15891;
pub const DAQmx_Val_mVoltsPerPound: u32 = 15892;
pub const DAQmx_Val_Hz: u32 = 10373;
pub const DAQmx_Val_Sine: u32 = 14751;
pub const DAQmx_Val_Triangle: u32 = 14752;
pub const DAQmx_Val_Square: u32 = 14753;
pub const DAQmx_Val_Sawtooth: u32 = 14754;
pub const DAQmx_Val_IRIGB: u32 = 10070;
pub const DAQmx_Val_PPS: u32 = 10080;
pub const DAQmx_Val_Immediate: u32 = 10198;
pub const DAQmx_Val_WaitForHandshakeTriggerAssert: u32 = 12550;
pub const DAQmx_Val_WaitForHandshakeTriggerDeassert: u32 = 12551;
pub const DAQmx_Val_OnBrdMemMoreThanHalfFull: u32 = 10237;
pub const DAQmx_Val_OnBrdMemNotEmpty: u32 = 10241;
pub const DAQmx_Val_WhenAcqComplete: u32 = 12546;
pub const DAQmx_Val_RSE: u32 = 10083;
pub const DAQmx_Val_NRSE: u32 = 10078;
pub const DAQmx_Val_mVoltsPerVoltPerMillimeter: u32 = 12506;
pub const DAQmx_Val_mVoltsPerVoltPerMilliInch: u32 = 12505;
pub const DAQmx_Val_Meters: u32 = 10219;
pub const DAQmx_Val_Inches: u32 = 10379;
pub const DAQmx_Val_Off: u32 = 10231;
pub const DAQmx_Val_Log: u32 = 15844;
pub const DAQmx_Val_LogAndRead: u32 = 15842;
pub const DAQmx_Val_OpenOrCreate: u32 = 15846;
pub const DAQmx_Val_CreateOrReplace: u32 = 15847;
pub const DAQmx_Val_Create: u32 = 15848;
pub const DAQmx_Val_2point5V: u32 = 14620;
pub const DAQmx_Val_3point3V: u32 = 14621;
pub const DAQmx_Val_5V: u32 = 14619;
pub const DAQmx_Val_SameAsSampTimebase: u32 = 10284;
pub const DAQmx_Val_SameAsMasterTimebase: u32 = 10282;
pub const DAQmx_Val_100MHzTimebase: u32 = 15857;
pub const DAQmx_Val_80MHzTimebase: u32 = 14636;
pub const DAQmx_Val_20MHzTimebase: u32 = 12537;
pub const DAQmx_Val_8MHzTimebase: u32 = 16023;
pub const DAQmx_Val_AM: u32 = 14756;
pub const DAQmx_Val_FM: u32 = 14757;
pub const DAQmx_Val_OnBrdMemEmpty: u32 = 10235;
pub const DAQmx_Val_OnBrdMemHalfFullOrLess: u32 = 10239;
pub const DAQmx_Val_OnBrdMemNotFull: u32 = 10242;
pub const DAQmx_Val_StopTaskAndError: u32 = 15862;
pub const DAQmx_Val_IgnoreOverruns: u32 = 15863;
pub const DAQmx_Val_OverwriteUnreadSamps: u32 = 10252;
pub const DAQmx_Val_DoNotOverwriteUnreadSamps: u32 = 10159;
pub const DAQmx_Val_ActiveHigh: u32 = 10095;
pub const DAQmx_Val_ActiveLow: u32 = 10096;
pub const DAQmx_Val_MSeriesDAQ: u32 = 14643;
pub const DAQmx_Val_XSeriesDAQ: u32 = 15858;
pub const DAQmx_Val_ESeriesDAQ: u32 = 14642;
pub const DAQmx_Val_SSeriesDAQ: u32 = 14644;
pub const DAQmx_Val_BSeriesDAQ: u32 = 14662;
pub const DAQmx_Val_SCSeriesDAQ: u32 = 14645;
pub const DAQmx_Val_USBDAQ: u32 = 14646;
pub const DAQmx_Val_AOSeries: u32 = 14647;
pub const DAQmx_Val_DigitalIO: u32 = 14648;
pub const DAQmx_Val_TIOSeries: u32 = 14661;
pub const DAQmx_Val_DynamicSignalAcquisition: u32 = 14649;
pub const DAQmx_Val_Switches: u32 = 14650;
pub const DAQmx_Val_CompactDAQChassis: u32 = 14658;
pub const DAQmx_Val_CompactRIOChassis: u32 = 16144;
pub const DAQmx_Val_CSeriesModule: u32 = 14659;
pub const DAQmx_Val_SCXIModule: u32 = 14660;
pub const DAQmx_Val_SCCConnectorBlock: u32 = 14704;
pub const DAQmx_Val_SCCModule: u32 = 14705;
pub const DAQmx_Val_NIELVIS: u32 = 14755;
pub const DAQmx_Val_NetworkDAQ: u32 = 14829;
pub const DAQmx_Val_SCExpress: u32 = 15886;
pub const DAQmx_Val_FieldDAQ: u32 = 16151;
pub const DAQmx_Val_Pt3750: u32 = 12481;
pub const DAQmx_Val_Pt3851: u32 = 10071;
pub const DAQmx_Val_Pt3911: u32 = 12482;
pub const DAQmx_Val_Pt3916: u32 = 10069;
pub const DAQmx_Val_Pt3920: u32 = 10053;
pub const DAQmx_Val_Pt3928: u32 = 12483;
pub const DAQmx_Val_mVoltsPerVoltPerDegree: u32 = 12507;
pub const DAQmx_Val_mVoltsPerVoltPerRadian: u32 = 12508;
pub const DAQmx_Val_LosslessPacking: u32 = 12555;
pub const DAQmx_Val_LossyLSBRemoval: u32 = 12556;
pub const DAQmx_Val_FirstSample: u32 = 10424;
pub const DAQmx_Val_CurrReadPos: u32 = 10425;
pub const DAQmx_Val_RefTrig: u32 = 10426;
pub const DAQmx_Val_FirstPretrigSamp: u32 = 10427;
pub const DAQmx_Val_MostRecentSamp: u32 = 10428;
pub const DAQmx_Val_AllowRegen: u32 = 10097;
pub const DAQmx_Val_DoNotAllowRegen: u32 = 10158;
pub const DAQmx_Val_2Wire: u32 = 2;
pub const DAQmx_Val_3Wire: u32 = 3;
pub const DAQmx_Val_Ohms: u32 = 10384;
pub const DAQmx_Val_Bits: u32 = 10109;
pub const DAQmx_Val_SCXI1124Range0to1V: u32 = 14629;
pub const DAQmx_Val_SCXI1124Range0to5V: u32 = 14630;
pub const DAQmx_Val_SCXI1124Range0to10V: u32 = 14631;
pub const DAQmx_Val_SCXI1124RangeNeg1to1V: u32 = 14632;
pub const DAQmx_Val_SCXI1124RangeNeg5to5V: u32 = 14633;
pub const DAQmx_Val_SCXI1124RangeNeg10to10V: u32 = 14634;
pub const DAQmx_Val_SCXI1124Range0to20mA: u32 = 14635;
pub const DAQmx_Val_SampClkActiveEdge: u32 = 14617;
pub const DAQmx_Val_SampClkInactiveEdge: u32 = 14618;
pub const DAQmx_Val_HandshakeTriggerAsserts: u32 = 12552;
pub const DAQmx_Val_HandshakeTriggerDeasserts: u32 = 12553;
pub const DAQmx_Val_SampClk: u32 = 10388;
pub const DAQmx_Val_BurstHandshake: u32 = 12548;
pub const DAQmx_Val_Handshake: u32 = 10389;
pub const DAQmx_Val_Implicit: u32 = 10451;
pub const DAQmx_Val_OnDemand: u32 = 10390;
pub const DAQmx_Val_ChangeDetection: u32 = 12504;
pub const DAQmx_Val_PipelinedSampClk: u32 = 14668;
pub const DAQmx_Val_Linear: u32 = 10447;
pub const DAQmx_Val_MapRanges: u32 = 10448;
pub const DAQmx_Val_Polynomial: u32 = 10449;
pub const DAQmx_Val_Table: u32 = 10450;
pub const DAQmx_Val_TwoPointLinear: u32 = 15898;
pub const DAQmx_Val_Enabled: u32 = 16145;
pub const DAQmx_Val_Disabled: u32 = 16146;
pub const DAQmx_Val_BipolarDC: u32 = 16147;
pub const DAQmx_Val_AandB: u32 = 12515;
pub const DAQmx_Val_R1: u32 = 12465;
pub const DAQmx_Val_R2: u32 = 12466;
pub const DAQmx_Val_R3: u32 = 12467;
pub const DAQmx_Val_R4: u32 = 14813;
pub const DAQmx_Val_AIConvertClock: u32 = 12484;
pub const DAQmx_Val_10MHzRefClock: u32 = 12536;
pub const DAQmx_Val_20MHzTimebaseClock: u32 = 12486;
pub const DAQmx_Val_SampleClock: u32 = 12487;
pub const DAQmx_Val_AdvCmpltEvent: u32 = 12492;
pub const DAQmx_Val_AIHoldCmpltEvent: u32 = 12493;
pub const DAQmx_Val_CounterOutputEvent: u32 = 12494;
pub const DAQmx_Val_ChangeDetectionEvent: u32 = 12511;
pub const DAQmx_Val_WDTExpiredEvent: u32 = 12512;
pub const DAQmx_Val_SampleCompleteEvent: u32 = 12530;
pub const DAQmx_Val_RisingSlope: u32 = 10280;
pub const DAQmx_Val_FallingSlope: u32 = 10171;
pub const DAQmx_Val_FullBridgeI: u32 = 10183;
pub const DAQmx_Val_FullBridgeII: u32 = 10184;
pub const DAQmx_Val_FullBridgeIII: u32 = 10185;
pub const DAQmx_Val_HalfBridgeI: u32 = 10188;
pub const DAQmx_Val_HalfBridgeII: u32 = 10189;
pub const DAQmx_Val_QuarterBridgeI: u32 = 10271;
pub const DAQmx_Val_QuarterBridgeII: u32 = 10272;
pub const DAQmx_Val_RectangularRosette: u32 = 15968;
pub const DAQmx_Val_DeltaRosette: u32 = 15969;
pub const DAQmx_Val_TeeRosette: u32 = 15970;
pub const DAQmx_Val_PrincipalStrain1: u32 = 15971;
pub const DAQmx_Val_PrincipalStrain2: u32 = 15972;
pub const DAQmx_Val_PrincipalStrainAngle: u32 = 15973;
pub const DAQmx_Val_CartesianStrainX: u32 = 15974;
pub const DAQmx_Val_CartesianStrainY: u32 = 15975;
pub const DAQmx_Val_CartesianShearStrainXY: u32 = 15976;
pub const DAQmx_Val_MaxShearStrain: u32 = 15977;
pub const DAQmx_Val_MaxShearStrainAngle: u32 = 15978;
pub const DAQmx_Val_Strain: u32 = 10299;
pub const DAQmx_Val_Finite: u32 = 10172;
pub const DAQmx_Val_Cont: u32 = 10117;
pub const DAQmx_Val_Source: u32 = 10439;
pub const DAQmx_Val_Load: u32 = 10440;
pub const DAQmx_Val_ReservedForRouting: u32 = 10441;
pub const DAQmx_Val_Onboard: u32 = 16128;
pub const DAQmx_Val_DigEdge: u32 = 10150;
pub const DAQmx_Val_Time: u32 = 15996;
pub const DAQmx_Val_Master: u32 = 15888;
pub const DAQmx_Val_Slave: u32 = 15889;
pub const DAQmx_Val_IgnoreLostSyncLock: u32 = 16129;
pub const DAQmx_Val_J_Type_TC: u32 = 10072;
pub const DAQmx_Val_K_Type_TC: u32 = 10073;
pub const DAQmx_Val_N_Type_TC: u32 = 10077;
pub const DAQmx_Val_R_Type_TC: u32 = 10082;
pub const DAQmx_Val_S_Type_TC: u32 = 10085;
pub const DAQmx_Val_T_Type_TC: u32 = 10086;
pub const DAQmx_Val_B_Type_TC: u32 = 10047;
pub const DAQmx_Val_E_Type_TC: u32 = 10055;
pub const DAQmx_Val_HostTime: u32 = 16126;
pub const DAQmx_Val_IODeviceTime: u32 = 16127;
pub const DAQmx_Val_SingleCycle: u32 = 14613;
pub const DAQmx_Val_Multicycle: u32 = 14614;
pub const DAQmx_Val_Software: u32 = 10292;
pub const DAQmx_Val_AnlgLvl: u32 = 10101;
pub const DAQmx_Val_AnlgWin: u32 = 10103;
pub const DAQmx_Val_DigLvl: u32 = 10152;
pub const DAQmx_Val_DigPattern: u32 = 10398;
pub const DAQmx_Val_AnlgEdge: u32 = 10099;
pub const DAQmx_Val_AnlgMultiEdge: u32 = 16108;
pub const DAQmx_Val_HaltOutputAndError: u32 = 14615;
pub const DAQmx_Val_PauseUntilDataAvailable: u32 = 14616;
pub const DAQmx_Val_Volts: u32 = 10348;
pub const DAQmx_Val_g: u32 = 10186;
pub const DAQmx_Val_MetersPerSecond: u32 = 15959;
pub const DAQmx_Val_InchesPerSecond: u32 = 15960;
pub const DAQmx_Val_MillivoltsPerMillimeterPerSecond: u32 = 15963;
pub const DAQmx_Val_MilliVoltsPerInchPerSecond: u32 = 15964;
pub const DAQmx_Val_WaitForInterrupt: u32 = 12523;
pub const DAQmx_Val_Poll: u32 = 12524;
pub const DAQmx_Val_Yield: u32 = 12525;
pub const DAQmx_Val_Sleep: u32 = 12547;
pub const DAQmx_Val_EnteringWin: u32 = 10163;
pub const DAQmx_Val_LeavingWin: u32 = 10208;
pub const DAQmx_Val_InsideWin: u32 = 10199;
pub const DAQmx_Val_OutsideWin: u32 = 10251;
pub const DAQmx_Val_WriteToEEPROM: u32 = 12538;
pub const DAQmx_Val_WriteToPROM: u32 = 12539;
pub const DAQmx_Val_DoNotWrite: u32 = 12540;
pub const DAQmx_Val_CurrWritePos: u32 = 10430;
pub const DAQmx_Val_ZeroVoltsOrAmps: u32 = 12526;
pub const DAQmx_Val_RepeatedData: u32 = 16062;
pub const DAQmx_Val_SentinelValue: u32 = 16063;
pub const DAQmx_Val_LogicLevelPullUp: u32 = 16064;
pub const DAQmx_Val_Local: u32 = 16095;
pub const DAQmx_Val_Remote: u32 = 16096;
pub const DAQmx_Val_Switch_Topology_Configured_Topology: &[u8; 20usize] = b"Configured Topology\0";
pub const DAQmx_Val_Switch_Topology_1127_1_Wire_64x1_Mux: &[u8; 21usize] =
    b"1127/1-Wire 64x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1127_2_Wire_32x1_Mux: &[u8; 21usize] =
    b"1127/2-Wire 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1127_2_Wire_4x8_Matrix: &[u8; 23usize] =
    b"1127/2-Wire 4x8 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1127_4_Wire_16x1_Mux: &[u8; 21usize] =
    b"1127/4-Wire 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1127_Independent: &[u8; 17usize] = b"1127/Independent\0";
pub const DAQmx_Val_Switch_Topology_1128_1_Wire_64x1_Mux: &[u8; 21usize] =
    b"1128/1-Wire 64x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1128_2_Wire_32x1_Mux: &[u8; 21usize] =
    b"1128/2-Wire 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1128_2_Wire_4x8_Matrix: &[u8; 23usize] =
    b"1128/2-Wire 4x8 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1128_4_Wire_16x1_Mux: &[u8; 21usize] =
    b"1128/4-Wire 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1128_Independent: &[u8; 17usize] = b"1128/Independent\0";
pub const DAQmx_Val_Switch_Topology_1129_2_Wire_16x16_Matrix: &[u8; 25usize] =
    b"1129/2-Wire 16x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1129_2_Wire_8x32_Matrix: &[u8; 24usize] =
    b"1129/2-Wire 8x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1129_2_Wire_4x64_Matrix: &[u8; 24usize] =
    b"1129/2-Wire 4x64 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1129_2_Wire_Dual_8x16_Matrix: &[u8; 29usize] =
    b"1129/2-Wire Dual 8x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1129_2_Wire_Dual_4x32_Matrix: &[u8; 29usize] =
    b"1129/2-Wire Dual 4x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1129_2_Wire_Quad_4x16_Matrix: &[u8; 29usize] =
    b"1129/2-Wire Quad 4x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1130_1_Wire_256x1_Mux: &[u8; 22usize] =
    b"1130/1-Wire 256x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_1_Wire_Dual_128x1_Mux: &[u8; 27usize] =
    b"1130/1-Wire Dual 128x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_2_Wire_128x1_Mux: &[u8; 22usize] =
    b"1130/2-Wire 128x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_4_Wire_64x1_Mux: &[u8; 21usize] =
    b"1130/4-Wire 64x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_1_Wire_4x64_Matrix: &[u8; 24usize] =
    b"1130/1-Wire 4x64 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1130_1_Wire_8x32_Matrix: &[u8; 24usize] =
    b"1130/1-Wire 8x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1130_1_Wire_Octal_32x1_Mux: &[u8; 27usize] =
    b"1130/1-Wire Octal 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_1_Wire_Quad_64x1_Mux: &[u8; 26usize] =
    b"1130/1-Wire Quad 64x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_1_Wire_Sixteen_16x1_Mux: &[u8; 29usize] =
    b"1130/1-Wire Sixteen 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_2_Wire_4x32_Matrix: &[u8; 24usize] =
    b"1130/2-Wire 4x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_1130_2_Wire_Octal_16x1_Mux: &[u8; 27usize] =
    b"1130/2-Wire Octal 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_2_Wire_Quad_32x1_Mux: &[u8; 26usize] =
    b"1130/2-Wire Quad 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_4_Wire_Quad_16x1_Mux: &[u8; 26usize] =
    b"1130/4-Wire Quad 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1130_Independent: &[u8; 17usize] = b"1130/Independent\0";
pub const DAQmx_Val_Switch_Topology_1160_16_SPDT: &[u8; 13usize] = b"1160/16-SPDT\0";
pub const DAQmx_Val_Switch_Topology_1161_8_SPDT: &[u8; 12usize] = b"1161/8-SPDT\0";
pub const DAQmx_Val_Switch_Topology_1163R_Octal_4x1_Mux: &[u8; 20usize] = b"1163R/Octal 4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1166_32_SPDT: &[u8; 13usize] = b"1166/32-SPDT\0";
pub const DAQmx_Val_Switch_Topology_1166_16_DPDT: &[u8; 13usize] = b"1166/16-DPDT\0";
pub const DAQmx_Val_Switch_Topology_1167_Independent: &[u8; 17usize] = b"1167/Independent\0";
pub const DAQmx_Val_Switch_Topology_1169_100_SPST: &[u8; 14usize] = b"1169/100-SPST\0";
pub const DAQmx_Val_Switch_Topology_1169_50_DPST: &[u8; 13usize] = b"1169/50-DPST\0";
pub const DAQmx_Val_Switch_Topology_1175_1_Wire_196x1_Mux: &[u8; 22usize] =
    b"1175/1-Wire 196x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1175_2_Wire_98x1_Mux: &[u8; 21usize] =
    b"1175/2-Wire 98x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1175_2_Wire_95x1_Mux: &[u8; 21usize] =
    b"1175/2-Wire 95x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1190_Quad_4x1_Mux: &[u8; 18usize] = b"1190/Quad 4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1191_Quad_4x1_Mux: &[u8; 18usize] = b"1191/Quad 4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1192_8_SPDT: &[u8; 12usize] = b"1192/8-SPDT\0";
pub const DAQmx_Val_Switch_Topology_1193_32x1_Mux: &[u8; 14usize] = b"1193/32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1193_Dual_16x1_Mux: &[u8; 19usize] = b"1193/Dual 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1193_Quad_8x1_Mux: &[u8; 18usize] = b"1193/Quad 8x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1193_16x1_Terminated_Mux: &[u8; 25usize] =
    b"1193/16x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_1193_Dual_8x1_Terminated_Mux: &[u8; 29usize] =
    b"1193/Dual 8x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_1193_Quad_4x1_Terminated_Mux: &[u8; 29usize] =
    b"1193/Quad 4x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_1193_Independent: &[u8; 17usize] = b"1193/Independent\0";
pub const DAQmx_Val_Switch_Topology_1194_Quad_4x1_Mux: &[u8; 18usize] = b"1194/Quad 4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_1195_Quad_4x1_Mux: &[u8; 18usize] = b"1195/Quad 4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2501_1_Wire_48x1_Mux: &[u8; 21usize] =
    b"2501/1-Wire 48x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2501_1_Wire_48x1_Amplified_Mux: &[u8; 31usize] =
    b"2501/1-Wire 48x1 Amplified Mux\0";
pub const DAQmx_Val_Switch_Topology_2501_2_Wire_24x1_Mux: &[u8; 21usize] =
    b"2501/2-Wire 24x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2501_2_Wire_24x1_Amplified_Mux: &[u8; 31usize] =
    b"2501/2-Wire 24x1 Amplified Mux\0";
pub const DAQmx_Val_Switch_Topology_2501_2_Wire_Dual_12x1_Mux: &[u8; 26usize] =
    b"2501/2-Wire Dual 12x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2501_2_Wire_Quad_6x1_Mux: &[u8; 25usize] =
    b"2501/2-Wire Quad 6x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2501_2_Wire_4x6_Matrix: &[u8; 23usize] =
    b"2501/2-Wire 4x6 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2501_4_Wire_12x1_Mux: &[u8; 21usize] =
    b"2501/4-Wire 12x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2503_1_Wire_48x1_Mux: &[u8; 21usize] =
    b"2503/1-Wire 48x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2503_2_Wire_24x1_Mux: &[u8; 21usize] =
    b"2503/2-Wire 24x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2503_2_Wire_Dual_12x1_Mux: &[u8; 26usize] =
    b"2503/2-Wire Dual 12x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2503_2_Wire_Quad_6x1_Mux: &[u8; 25usize] =
    b"2503/2-Wire Quad 6x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2503_2_Wire_4x6_Matrix: &[u8; 23usize] =
    b"2503/2-Wire 4x6 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2503_4_Wire_12x1_Mux: &[u8; 21usize] =
    b"2503/4-Wire 12x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2510_Independent: &[u8; 17usize] = b"2510/Independent\0";
pub const DAQmx_Val_Switch_Topology_2512_Independent: &[u8; 17usize] = b"2512/Independent\0";
pub const DAQmx_Val_Switch_Topology_2514_Independent: &[u8; 17usize] = b"2514/Independent\0";
pub const DAQmx_Val_Switch_Topology_2515_Independent: &[u8; 17usize] = b"2515/Independent\0";
pub const DAQmx_Val_Switch_Topology_2520_80_SPST: &[u8; 13usize] = b"2520/80-SPST\0";
pub const DAQmx_Val_Switch_Topology_2521_40_DPST: &[u8; 13usize] = b"2521/40-DPST\0";
pub const DAQmx_Val_Switch_Topology_2522_53_SPDT: &[u8; 13usize] = b"2522/53-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2523_26_DPDT: &[u8; 13usize] = b"2523/26-DPDT\0";
pub const DAQmx_Val_Switch_Topology_2527_1_Wire_64x1_Mux: &[u8; 21usize] =
    b"2527/1-Wire 64x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2527_1_Wire_Dual_32x1_Mux: &[u8; 26usize] =
    b"2527/1-Wire Dual 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2527_2_Wire_32x1_Mux: &[u8; 21usize] =
    b"2527/2-Wire 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2527_2_Wire_Dual_16x1_Mux: &[u8; 26usize] =
    b"2527/2-Wire Dual 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2527_4_Wire_16x1_Mux: &[u8; 21usize] =
    b"2527/4-Wire 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2527_Independent: &[u8; 17usize] = b"2527/Independent\0";
pub const DAQmx_Val_Switch_Topology_2529_2_Wire_8x16_Matrix: &[u8; 24usize] =
    b"2529/2-Wire 8x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2529_2_Wire_4x32_Matrix: &[u8; 24usize] =
    b"2529/2-Wire 4x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2529_2_Wire_Dual_4x16_Matrix: &[u8; 29usize] =
    b"2529/2-Wire Dual 4x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2530_1_Wire_128x1_Mux: &[u8; 22usize] =
    b"2530/1-Wire 128x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_1_Wire_Dual_64x1_Mux: &[u8; 26usize] =
    b"2530/1-Wire Dual 64x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_2_Wire_64x1_Mux: &[u8; 21usize] =
    b"2530/2-Wire 64x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_4_Wire_32x1_Mux: &[u8; 21usize] =
    b"2530/4-Wire 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_1_Wire_4x32_Matrix: &[u8; 24usize] =
    b"2530/1-Wire 4x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2530_1_Wire_8x16_Matrix: &[u8; 24usize] =
    b"2530/1-Wire 8x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2530_1_Wire_Octal_16x1_Mux: &[u8; 27usize] =
    b"2530/1-Wire Octal 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_1_Wire_Quad_32x1_Mux: &[u8; 26usize] =
    b"2530/1-Wire Quad 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_2_Wire_4x16_Matrix: &[u8; 24usize] =
    b"2530/2-Wire 4x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2530_2_Wire_Dual_32x1_Mux: &[u8; 26usize] =
    b"2530/2-Wire Dual 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_2_Wire_Quad_16x1_Mux: &[u8; 26usize] =
    b"2530/2-Wire Quad 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_4_Wire_Dual_16x1_Mux: &[u8; 26usize] =
    b"2530/4-Wire Dual 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2530_Independent: &[u8; 17usize] = b"2530/Independent\0";
pub const DAQmx_Val_Switch_Topology_2531_1_Wire_4x128_Matrix: &[u8; 25usize] =
    b"2531/1-Wire 4x128 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2531_1_Wire_8x64_Matrix: &[u8; 24usize] =
    b"2531/1-Wire 8x64 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2531_1_Wire_Dual_4x64_Matrix: &[u8; 29usize] =
    b"2531/1-Wire Dual 4x64 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2531_1_Wire_Dual_8x32_Matrix: &[u8; 29usize] =
    b"2531/1-Wire Dual 8x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2531_1_Wire_Sixteen_2x16_Matrix: &[u8; 32usize] =
    b"2531/1-Wire Sixteen 2x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_1_Wire_16x32_Matrix: &[u8; 25usize] =
    b"2532/1-Wire 16x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_1_Wire_4x128_Matrix: &[u8; 25usize] =
    b"2532/1-Wire 4x128 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_1_Wire_8x64_Matrix: &[u8; 24usize] =
    b"2532/1-Wire 8x64 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_16x16_Matrix: &[u8; 30usize] =
    b"2532/1-Wire Dual 16x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_4x64_Matrix: &[u8; 29usize] =
    b"2532/1-Wire Dual 4x64 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_8x32_Matrix: &[u8; 29usize] =
    b"2532/1-Wire Dual 8x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_1_Wire_Quad_4x32_Matrix: &[u8; 29usize] =
    b"2532/1-Wire Quad 4x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_1_Wire_Sixteen_2x16_Matrix: &[u8; 32usize] =
    b"2532/1-Wire Sixteen 2x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_2_Wire_16x16_Matrix: &[u8; 25usize] =
    b"2532/2-Wire 16x16 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_2_Wire_4x64_Matrix: &[u8; 24usize] =
    b"2532/2-Wire 4x64 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_2_Wire_8x32_Matrix: &[u8; 24usize] =
    b"2532/2-Wire 8x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2532_2_Wire_Dual_4x32_Matrix: &[u8; 29usize] =
    b"2532/2-Wire Dual 4x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2533_1_Wire_4x64_Matrix: &[u8; 24usize] =
    b"2533/1-Wire 4x64 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2534_1_Wire_8x32_Matrix: &[u8; 24usize] =
    b"2534/1-Wire 8x32 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2535_1_Wire_4x136_Matrix: &[u8; 25usize] =
    b"2535/1-Wire 4x136 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2536_1_Wire_8x68_Matrix: &[u8; 24usize] =
    b"2536/1-Wire 8x68 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2540_1_Wire_8x9_Matrix: &[u8; 23usize] =
    b"2540/1-Wire 8x9 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2541_1_Wire_8x12_Matrix: &[u8; 24usize] =
    b"2541/1-Wire 8x12 Matrix\0";
pub const DAQmx_Val_Switch_Topology_2542_Quad_2x1_Terminated_Mux: &[u8; 29usize] =
    b"2542/Quad 2x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2543_Dual_4x1_Terminated_Mux: &[u8; 29usize] =
    b"2543/Dual 4x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2544_8x1_Terminated_Mux: &[u8; 24usize] =
    b"2544/8x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2545_4x1_Terminated_Mux: &[u8; 24usize] =
    b"2545/4x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2546_Dual_4x1_Mux: &[u8; 18usize] = b"2546/Dual 4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2547_8x1_Mux: &[u8; 13usize] = b"2547/8x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2548_4_SPDT: &[u8; 12usize] = b"2548/4-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2549_Terminated_2_SPDT: &[u8; 23usize] =
    b"2549/Terminated 2-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2554_4x1_Mux: &[u8; 13usize] = b"2554/4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2555_4x1_Terminated_Mux: &[u8; 24usize] =
    b"2555/4x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2556_Dual_4x1_Mux: &[u8; 18usize] = b"2556/Dual 4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2557_8x1_Mux: &[u8; 13usize] = b"2557/8x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2558_4_SPDT: &[u8; 12usize] = b"2558/4-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2559_Terminated_2_SPDT: &[u8; 23usize] =
    b"2559/Terminated 2-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2564_16_SPST: &[u8; 13usize] = b"2564/16-SPST\0";
pub const DAQmx_Val_Switch_Topology_2564_8_DPST: &[u8; 12usize] = b"2564/8-DPST\0";
pub const DAQmx_Val_Switch_Topology_2565_16_SPST: &[u8; 13usize] = b"2565/16-SPST\0";
pub const DAQmx_Val_Switch_Topology_2566_16_SPDT: &[u8; 13usize] = b"2566/16-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2566_8_DPDT: &[u8; 12usize] = b"2566/8-DPDT\0";
pub const DAQmx_Val_Switch_Topology_2567_Independent: &[u8; 17usize] = b"2567/Independent\0";
pub const DAQmx_Val_Switch_Topology_2568_31_SPST: &[u8; 13usize] = b"2568/31-SPST\0";
pub const DAQmx_Val_Switch_Topology_2568_15_DPST: &[u8; 13usize] = b"2568/15-DPST\0";
pub const DAQmx_Val_Switch_Topology_2569_100_SPST: &[u8; 14usize] = b"2569/100-SPST\0";
pub const DAQmx_Val_Switch_Topology_2569_50_DPST: &[u8; 13usize] = b"2569/50-DPST\0";
pub const DAQmx_Val_Switch_Topology_2570_40_SPDT: &[u8; 13usize] = b"2570/40-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2570_20_DPDT: &[u8; 13usize] = b"2570/20-DPDT\0";
pub const DAQmx_Val_Switch_Topology_2571_66_SPDT: &[u8; 13usize] = b"2571/66-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2575_1_Wire_196x1_Mux: &[u8; 22usize] =
    b"2575/1-Wire 196x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2575_2_Wire_98x1_Mux: &[u8; 21usize] =
    b"2575/2-Wire 98x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2575_2_Wire_95x1_Mux: &[u8; 21usize] =
    b"2575/2-Wire 95x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2576_2_Wire_64x1_Mux: &[u8; 21usize] =
    b"2576/2-Wire 64x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2576_2_Wire_Dual_32x1_Mux: &[u8; 26usize] =
    b"2576/2-Wire Dual 32x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2576_2_Wire_Octal_8x1_Mux: &[u8; 26usize] =
    b"2576/2-Wire Octal 8x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2576_2_Wire_Quad_16x1_Mux: &[u8; 26usize] =
    b"2576/2-Wire Quad 16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2576_2_Wire_Sixteen_4x1_Mux: &[u8; 28usize] =
    b"2576/2-Wire Sixteen 4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2576_Independent: &[u8; 17usize] = b"2576/Independent\0";
pub const DAQmx_Val_Switch_Topology_2584_1_Wire_12x1_Mux: &[u8; 21usize] =
    b"2584/1-Wire 12x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2584_1_Wire_Dual_6x1_Mux: &[u8; 25usize] =
    b"2584/1-Wire Dual 6x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2584_2_Wire_6x1_Mux: &[u8; 20usize] = b"2584/2-Wire 6x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2584_Independent: &[u8; 17usize] = b"2584/Independent\0";
pub const DAQmx_Val_Switch_Topology_2585_1_Wire_10x1_Mux: &[u8; 21usize] =
    b"2585/1-Wire 10x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2586_10_SPST: &[u8; 13usize] = b"2586/10-SPST\0";
pub const DAQmx_Val_Switch_Topology_2586_5_DPST: &[u8; 12usize] = b"2586/5-DPST\0";
pub const DAQmx_Val_Switch_Topology_2590_4x1_Mux: &[u8; 13usize] = b"2590/4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2591_4x1_Mux: &[u8; 13usize] = b"2591/4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2593_16x1_Mux: &[u8; 14usize] = b"2593/16x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2593_Dual_8x1_Mux: &[u8; 18usize] = b"2593/Dual 8x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2593_8x1_Terminated_Mux: &[u8; 24usize] =
    b"2593/8x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2593_Dual_4x1_Terminated_Mux: &[u8; 29usize] =
    b"2593/Dual 4x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2593_Independent: &[u8; 17usize] = b"2593/Independent\0";
pub const DAQmx_Val_Switch_Topology_2594_4x1_Mux: &[u8; 13usize] = b"2594/4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2595_4x1_Mux: &[u8; 13usize] = b"2595/4x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2596_Dual_6x1_Mux: &[u8; 18usize] = b"2596/Dual 6x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2597_6x1_Terminated_Mux: &[u8; 24usize] =
    b"2597/6x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2598_Dual_Transfer: &[u8; 19usize] = b"2598/Dual Transfer\0";
pub const DAQmx_Val_Switch_Topology_2599_2_SPDT: &[u8; 12usize] = b"2599/2-SPDT\0";
pub const DAQmx_Val_Switch_Topology_2720_Independent: &[u8; 17usize] = b"2720/Independent\0";
pub const DAQmx_Val_Switch_Topology_2722_Independent: &[u8; 17usize] = b"2722/Independent\0";
pub const DAQmx_Val_Switch_Topology_2725_Independent: &[u8; 17usize] = b"2725/Independent\0";
pub const DAQmx_Val_Switch_Topology_2727_Independent: &[u8; 17usize] = b"2727/Independent\0";
pub const DAQmx_Val_Switch_Topology_2790_Independent: &[u8; 17usize] = b"2790/Independent\0";
pub const DAQmx_Val_Switch_Topology_2796_Dual_6x1_Mux: &[u8; 18usize] = b"2796/Dual 6x1 Mux\0";
pub const DAQmx_Val_Switch_Topology_2797_6x1_Terminated_Mux: &[u8; 24usize] =
    b"2797/6x1 Terminated Mux\0";
pub const DAQmx_Val_Switch_Topology_2798_Dual_Transfer: &[u8; 19usize] = b"2798/Dual Transfer\0";
pub const DAQmx_Val_Switch_Topology_2799_2_SPDT: &[u8; 12usize] = b"2799/2-SPDT\0";
pub const DAQmxSuccess: u32 = 0;
pub const DAQmxErrorMultiTaskCfgSampRateNotSupportedWithPropSet: i32 = -209886;
pub const DAQmxErrorMultiTaskCfgSampRateConflictingProp: i32 = -209885;
pub const DAQmxErrorNoCommonSampRateFoundNoRepeatSamps: i32 = -209884;
pub const DAQmxErrorNoCommonSampRateFound: i32 = -209883;
pub const DAQmxErrorMultiTaskCfgDoesNotSupportMultiDevTask: i32 = -209882;
pub const DAQmxErrorMultiTaskSampRateCfgNotSupported: i32 = -209881;
pub const DAQmxErrorDebugSessionNotAllowedTimingSourceRegistered: i32 = -209880;
pub const DAQmxErrorDebugSessionNotAllowedWhenLogging: i32 = -209879;
pub const DAQmxErrorDebugSessionNotAllowedEventRegistered: i32 = -209878;
pub const DAQmxErrorInvalidTargetTaskForDebugSession: i32 = -209877;
pub const DAQmxErrorFunctionNotSupportedForDevice: i32 = -209876;
pub const DAQmxErrorMultipleTargetTasksFoundForDebugSession: i32 = -209875;
pub const DAQmxErrorTargetTaskNotFoundForDebugSession: i32 = -209874;
pub const DAQmxErrorOperationNotSupportedInDebugSession: i32 = -209873;
pub const DAQmxErrorOperationNotPermittedInMonitorModeForDebugSession: i32 = -209872;
pub const DAQmxErrorGetActiveDevPrptyFailedDueToDifftVals: i32 = -209871;
pub const DAQmxErrorTaskAlreadyRegisteredATimingSource: i32 = -209870;
pub const DAQmxErrorFilterNotSupportedOnHWRev: i32 = -209869;
pub const DAQmxErrorSensorPowerSupplyVoltageLevel: i32 = -209868;
pub const DAQmxErrorSensorPowerSupply: i32 = -209867;
pub const DAQmxErrorInvalidScanlist: i32 = -209866;
pub const DAQmxErrorTimeResourceCannotBeRouted: i32 = -209865;
pub const DAQmxErrorInvalidResetDelayRequested: i32 = -209864;
pub const DAQmxErrorExceededTotalTimetriggersAvailable: i32 = -209863;
pub const DAQmxErrorExceededTotalTimestampsAvailable: i32 = -209862;
pub const DAQmxErrorNoSynchronizationProtocolRunning: i32 = -209861;
pub const DAQmxErrorConflictingCoherencyRequirements: i32 = -209860;
pub const DAQmxErrorNoSharedTimescale: i32 = -209859;
pub const DAQmxErrorInvalidFieldDAQBankName: i32 = -209858;
pub const DAQmxErrorDeviceDoesNotSupportHWTSP: i32 = -209857;
pub const DAQmxErrorBankTypeDoesNotMatchBankTypeInDestination: i32 = -209856;
pub const DAQmxErrorInvalidFieldDAQBankNumberSpecd: i32 = -209855;
pub const DAQmxErrorUnsupportedSimulatedBankForSimulatedFieldDAQ: i32 = -209854;
pub const DAQmxErrorFieldDAQBankSimMustMatchFieldDAQSim: i32 = -209853;
pub const DAQmxErrorDevNoLongerSupportedWithinDAQmxAPI: i32 = -209852;
pub const DAQmxErrorTimingEngineDoesNotSupportOnBoardMemory: i32 = -209851;
pub const DAQmxErrorDuplicateTaskCrossProject: i32 = -209850;
pub const DAQmxErrorTimeStartTriggerBeforeArmStartTrigger: i32 = -209849;
pub const DAQmxErrorTimeTriggerCannotBeSet: i32 = -209848;
pub const DAQmxErrorInvalidTriggerWindowValue: i32 = -209847;
pub const DAQmxErrorCannotQueryPropertyBeforeOrDuringAcquisition: i32 = -209846;
pub const DAQmxErrorSampleClockTimebaseNotSupported: i32 = -209845;
pub const DAQmxErrorTimestampNotYetReceived: i32 = -209844;
pub const DAQmxErrorTimeTriggerNotSupported: i32 = -209843;
pub const DAQmxErrorTimestampNotEnabled: i32 = -209842;
pub const DAQmxErrorTimeTriggersInconsistent: i32 = -209841;
pub const DAQmxErrorTriggerConfiguredIsInThePast: i32 = -209840;
pub const DAQmxErrorTriggerConfiguredIsTooFarFromCurrentTime: i32 = -209839;
pub const DAQmxErrorSynchronizationLockLost: i32 = -209838;
pub const DAQmxErrorInconsistentTimescales: i32 = -209837;
pub const DAQmxErrorCannotSynchronizeDevices: i32 = -209836;
pub const DAQmxErrorAssociatedChansHaveAttributeConflictWithMultipleMaxMinRanges: i32 = -209835;
pub const DAQmxErrorSampleRateNumChansOrAttributeValues: i32 = -209834;
pub const DAQmxErrorWaitForValidTimestampNotSupported: i32 = -209833;
pub const DAQmxErrorTrigWinTimeoutExpired: i32 = -209832;
pub const DAQmxErrorInvalidTriggerCfgForDevice: i32 = -209831;
pub const DAQmxErrorInvalidDataTransferMechanismForDevice: i32 = -209830;
pub const DAQmxErrorInputFIFOOverflow3: i32 = -209829;
pub const DAQmxErrorTooManyDevicesForAnalogMultiEdgeTrigCDAQ: i32 = -209828;
pub const DAQmxErrorTooManyTriggersTypesSpecifiedInTask: i32 = -209827;
pub const DAQmxErrorMismatchedMultiTriggerConfigValues: i32 = -209826;
pub const DAQmxErrorInconsistentAODACRangeAcrossTasks: i32 = -209825;
pub const DAQmxErrorInconsistentDTToWrite: i32 = -209824;
pub const DAQmxErrorFunctionObsolete: i32 = -209823;
pub const DAQmxErrorNegativeDurationNotSupported: i32 = -209822;
pub const DAQmxErrorDurationTooSmall: i32 = -209821;
pub const DAQmxErrorDurationTooLong: i32 = -209820;
pub const DAQmxErrorDurationBasedNotSupportedForSpecifiedTimingMode: i32 = -209819;
pub const DAQmxErrorInvalidLEDState: i32 = -209818;
pub const DAQmxErrorWatchdogStatesNotUniform: i32 = -209817;
pub const DAQmxErrorSelfTestFailedPowerSupplyOutOfTolerance: i32 = -209816;
pub const DAQmxErrorHWTSPMultiSampleWrite: i32 = -209815;
pub const DAQmxErrorOnboardRegenExceedsChannelLimit: i32 = -209814;
pub const DAQmxErrorWatchdogChannelExpirationStateNotSpecified: i32 = -209813;
pub const DAQmxErrorInvalidShuntSourceForCalibration: i32 = -209812;
pub const DAQmxErrorInvalidShuntSelectForCalibration: i32 = -209811;
pub const DAQmxErrorInvalidShuntCalibrationConfiguration: i32 = -209810;
pub const DAQmxErrorBufferedOperationsNotSupportedOnChannelStandalone: i32 = -209809;
pub const DAQmxErrorFeatureNotAvailableOnAccessory: i32 = -209808;
pub const DAQmxErrorInconsistentThreshVoltageAcrossTerminals: i32 = -209807;
pub const DAQmxErrorDAQmxIsNotInstalledOnTarget: i32 = -209806;
pub const DAQmxErrorCOCannotKeepUpInHWTimedSinglePoint: i32 = -209805;
pub const DAQmxErrorWaitForNextSampClkDetected3OrMoreSampClks: i32 = -209803;
pub const DAQmxErrorWaitForNextSampClkDetectedMissedSampClk: i32 = -209802;
pub const DAQmxErrorWriteNotCompleteBeforeSampClk: i32 = -209801;
pub const DAQmxErrorReadNotCompleteBeforeSampClk: i32 = -209800;
pub const DAQmxErrorInconsistentDigitalFilteringAcrossTerminals: i32 = -201510;
pub const DAQmxErrorInconsistentPullUpCfgAcrossTerminals: i32 = -201509;
pub const DAQmxErrorInconsistentTermCfgAcrossTerminals: i32 = -201508;
pub const DAQmxErrorVCXODCMBecameUnlocked: i32 = -201507;
pub const DAQmxErrorPLLDACUpdateFailed: i32 = -201506;
pub const DAQmxErrorNoCabledDevice: i32 = -201505;
pub const DAQmxErrorLostRefClk: i32 = -201504;
pub const DAQmxErrorCantUseAITimingEngineWithCounters: i32 = -201503;
pub const DAQmxErrorDACOffsetValNotSet: i32 = -201502;
pub const DAQmxErrorCalAdjustRefValOutOfRange: i32 = -201501;
pub const DAQmxErrorChansForCalAdjustMustPerformSetContext: i32 = -201500;
pub const DAQmxErrorGetCalDataInvalidForCalMode: i32 = -201499;
pub const DAQmxErrorNoIEPEWithACNotAllowed: i32 = -201498;
pub const DAQmxErrorSetupCalNeededBeforeGetCalDataPoints: i32 = -201497;
pub const DAQmxErrorVoltageNotCalibrated: i32 = -201496;
pub const DAQmxErrorMissingRangeForCalibration: i32 = -201495;
pub const DAQmxErrorMultipleChansNotSupportedDuringCalAdjust: i32 = -201494;
pub const DAQmxErrorShuntCalFailedOutOfRange: i32 = -201493;
pub const DAQmxErrorOperationNotSupportedOnSimulatedDevice: i32 = -201492;
pub const DAQmxErrorFirmwareVersionSameAsInstalledVersion: i32 = -201491;
pub const DAQmxErrorFirmwareVersionOlderThanInstalledVersion: i32 = -201490;
pub const DAQmxErrorFirmwareUpdateInvalidState: i32 = -201489;
pub const DAQmxErrorFirmwareUpdateInvalidID: i32 = -201488;
pub const DAQmxErrorFirmwareUpdateAutomaticManagementEnabled: i32 = -201487;
pub const DAQmxErrorSetupCalibrationNotCalled: i32 = -201486;
pub const DAQmxErrorCalMeasuredDataSizeVsActualDataSizeMismatch: i32 = -201485;
pub const DAQmxErrorCDAQMissingDSAMasterForChanExpansion: i32 = -201484;
pub const DAQmxErrorCDAQMasterNotFoundForChanExpansion: i32 = -201483;
pub const DAQmxErrorAllChansShouldBeProvidedForCalibration: i32 = -201482;
pub const DAQmxErrorMustSpecifyExpirationStateForAllLinesInRange: i32 = -201481;
pub const DAQmxErrorOpenSessionExists: i32 = -201480;
pub const DAQmxErrorCannotQueryTerminalForSWArmStart: i32 = -201479;
pub const DAQmxErrorChassisWatchdogTimerExpired: i32 = -201478;
pub const DAQmxErrorCantReserveWatchdogTaskWhileOtherTasksReserved: i32 = -201477;
pub const DAQmxErrorCantReserveTaskWhileWatchdogTaskReserving: i32 = -201476;
pub const DAQmxErrorAuxPowerSourceRequired: i32 = -201475;
pub const DAQmxErrorDeviceNotSupportedOnLocalSystem: i32 = -201474;
pub const DAQmxErrorOneTimestampChannelRequiredForCombinedNavigationRead: i32 = -201472;
pub const DAQmxErrorMultDevsMultPhysChans: i32 = -201471;
pub const DAQmxErrorInvalidCalAdjustmentPointValues: i32 = -201470;
pub const DAQmxErrorDifferentDigitizerFromCommunicator: i32 = -201469;
pub const DAQmxErrorCDAQSyncMasterClockNotPresent: i32 = -201468;
pub const DAQmxErrorAssociatedChansHaveConflictingProps: i32 = -201467;
pub const DAQmxErrorAutoConfigBetweenMultipleDeviceStatesInvalid: i32 = -201466;
pub const DAQmxErrorAutoConfigOfOfflineDevicesInvalid: i32 = -201465;
pub const DAQmxErrorExternalFIFOFault: i32 = -201464;
pub const DAQmxErrorConnectionsNotReciprocal: i32 = -201463;
pub const DAQmxErrorInvalidOutputToInputCDAQSyncConnection: i32 = -201462;
pub const DAQmxErrorReferenceClockNotPresent: i32 = -201461;
pub const DAQmxErrorBlankStringExpansionFoundNoSupportedCDAQSyncConnectionDevices: i32 = -201460;
pub const DAQmxErrorNoDevicesSupportCDAQSyncConnections: i32 = -201459;
pub const DAQmxErrorInvalidCDAQSyncTimeoutValue: i32 = -201458;
pub const DAQmxErrorCDAQSyncConnectionToSamePort: i32 = -201457;
pub const DAQmxErrorDevsWithoutCommonSyncConnectionStrategy: i32 = -201456;
pub const DAQmxErrorNoCDAQSyncBetweenPhysAndSimulatedDevs: i32 = -201455;
pub const DAQmxErrorUnableToContainCards: i32 = -201454;
pub const DAQmxErrorFindDisconnectedBetweenPhysAndSimDeviceStatesInvalid: i32 = -201453;
pub const DAQmxErrorOperationAborted: i32 = -201452;
pub const DAQmxErrorTwoPortsRequired: i32 = -201451;
pub const DAQmxErrorDeviceDoesNotSupportCDAQSyncConnections: i32 = -201450;
pub const DAQmxErrorInvalidcDAQSyncPortConnectionFormat: i32 = -201449;
pub const DAQmxErrorRosetteMeasurementsNotSpecified: i32 = -201448;
pub const DAQmxErrorInvalidNumOfPhysChansForDeltaRosette: i32 = -201447;
pub const DAQmxErrorInvalidNumOfPhysChansForTeeRosette: i32 = -201446;
pub const DAQmxErrorRosetteStrainChanNamesNeeded: i32 = -201445;
pub const DAQmxErrorMultideviceWithOnDemandTiming: i32 = -201444;
pub const DAQmxErrorFREQOUTCannotProduceDesiredFrequency3: i32 = -201443;
pub const DAQmxErrorTwoEdgeSeparationSameTerminalSameEdge: i32 = -201442;
pub const DAQmxErrorDontMixSyncPulseAndSampClkTimebaseOn449x: i32 = -201441;
pub const DAQmxErrorNeitherRefClkNorSampClkTimebaseConfiguredForDSASync: i32 = -201440;
pub const DAQmxErrorRetriggeringFiniteCONotAllowed: i32 = -201439;
pub const DAQmxErrorDeviceRebootedFromWDTTimeout: i32 = -201438;
pub const DAQmxErrorTimeoutValueExceedsMaximum: i32 = -201437;
pub const DAQmxErrorSharingDifferentWireModes: i32 = -201436;
pub const DAQmxErrorCantPrimeWithEmptyBuffer: i32 = -201435;
pub const DAQmxErrorConfigFailedBecauseWatchdogExpired: i32 = -201434;
pub const DAQmxErrorWriteFailedBecauseWatchdogChangedLineDirection: i32 = -201433;
pub const DAQmxErrorMultipleSubsytemCalibration: i32 = -201432;
pub const DAQmxErrorIncorrectChannelForOffsetAdjustment: i32 = -201431;
pub const DAQmxErrorInvalidNumRefVoltagesToWrite: i32 = -201430;
pub const DAQmxErrorStartTrigDelayWithDSAModule: i32 = -201429;
pub const DAQmxErrorMoreThanOneSyncPulseDetected: i32 = -201428;
pub const DAQmxErrorDevNotSupportedWithinDAQmxAPI: i32 = -201427;
pub const DAQmxErrorDevsWithoutSyncStrategies: i32 = -201426;
pub const DAQmxErrorDevsWithoutCommonSyncStrategy: i32 = -201425;
pub const DAQmxErrorSyncStrategiesCannotSync: i32 = -201424;
pub const DAQmxErrorChassisCommunicationInterrupted: i32 = -201423;
pub const DAQmxErrorUnknownCardPowerProfileInCarrier: i32 = -201422;
pub const DAQmxErrorAttrNotSupportedOnAccessory: i32 = -201421;
pub const DAQmxErrorNetworkDeviceReservedByAnotherHost: i32 = -201420;
pub const DAQmxErrorIncorrectFirmwareFileUploaded: i32 = -201419;
pub const DAQmxErrorInvalidFirmwareFileUploaded: i32 = -201418;
pub const DAQmxErrorInTimerTimeoutOnArm: i32 = -201417;
pub const DAQmxErrorCantExceedSlotRelayDriveLimit: i32 = -201416;
pub const DAQmxErrorModuleUnsupportedFor9163: i32 = -201415;
pub const DAQmxErrorConnectionsNotSupported: i32 = -201414;
pub const DAQmxErrorAccessoryNotPresent: i32 = -201413;
pub const DAQmxErrorSpecifiedAccessoryChannelsNotPresentOnDevice: i32 = -201412;
pub const DAQmxErrorConnectionsNotSupportedOnAccessory: i32 = -201411;
pub const DAQmxErrorRateTooFastForHWTSP: i32 = -201410;
pub const DAQmxErrorDelayFromSampleClockOutOfRangeForHWTSP: i32 = -201409;
pub const DAQmxErrorAveragingWhenNotInternalHWTSP: i32 = -201408;
pub const DAQmxErrorAttributeNotSupportedUnlessHWTSP: i32 = -201407;
pub const DAQmxErrorFiveVoltDetectFailed: i32 = -201406;
pub const DAQmxErrorAnalogBusStateInconsistent: i32 = -201405;
pub const DAQmxErrorCardDetectedDoesNotMatchExpectedCard: i32 = -201404;
pub const DAQmxErrorLoggingStartNewFileNotCalled: i32 = -201403;
pub const DAQmxErrorLoggingSampsPerFileNotDivisible: i32 = -201402;
pub const DAQmxErrorRetrievingNetworkDeviceProperties: i32 = -201401;
pub const DAQmxErrorFilePreallocationFailed: i32 = -201400;
pub const DAQmxErrorModuleMismatchInSameTimedTask: i32 = -201399;
pub const DAQmxErrorInvalidAttributeValuePossiblyDueToOtherAttributeValues: i32 = -201398;
pub const DAQmxErrorChangeDetectionStoppedToPreventDeviceHang: i32 = -201397;
pub const DAQmxErrorFilterDelayRemovalNotPosssibleWithAnalogTrigger: i32 = -201396;
pub const DAQmxErrorNonbufferedOrNoChannels: i32 = -201395;
pub const DAQmxErrorTristateLogicLevelNotSpecdForEntirePort: i32 = -201394;
pub const DAQmxErrorTristateLogicLevelNotSupportedOnDigOutChan: i32 = -201393;
pub const DAQmxErrorTristateLogicLevelNotSupported: i32 = -201392;
pub const DAQmxErrorIncompleteGainAndCouplingCalAdjustment: i32 = -201391;
pub const DAQmxErrorNetworkStatusConnectionLost: i32 = -201390;
pub const DAQmxErrorModuleChangeDuringConnectionLoss: i32 = -201389;
pub const DAQmxErrorNetworkDeviceNotReservedByHost: i32 = -201388;
pub const DAQmxErrorDuplicateCalibrationAdjustmentInput: i32 = -201387;
pub const DAQmxErrorSelfCalFailedContactTechSupport: i32 = -201386;
pub const DAQmxErrorSelfCalFailedToConverge: i32 = -201385;
pub const DAQmxErrorUnsupportedSimulatedModuleForSimulatedChassis: i32 = -201384;
pub const DAQmxErrorLoggingWriteSizeTooBig: i32 = -201383;
pub const DAQmxErrorLoggingWriteSizeNotDivisible: i32 = -201382;
pub const DAQmxErrorMyDAQPowerRailFault: i32 = -201381;
pub const DAQmxErrorDeviceDoesNotSupportThisOperation: i32 = -201380;
pub const DAQmxErrorNetworkDevicesNotSupportedOnThisPlatform: i32 = -201379;
pub const DAQmxErrorUnknownFirmwareVersion: i32 = -201378;
pub const DAQmxErrorFirmwareIsUpdating: i32 = -201377;
pub const DAQmxErrorAccessoryEEPROMIsCorrupt: i32 = -201376;
pub const DAQmxErrorThrmcplLeadOffsetNullingCalNotSupported: i32 = -201375;
pub const DAQmxErrorSelfCalFailedTryExtCal: i32 = -201374;
pub const DAQmxErrorOutputP2PNotSupportedWithMultithreadedScripts: i32 = -201373;
pub const DAQmxErrorThrmcplCalibrationChannelsOpen: i32 = -201372;
pub const DAQmxErrorMDNSServiceInstanceAlreadyInUse: i32 = -201371;
pub const DAQmxErrorIPAddressAlreadyInUse: i32 = -201370;
pub const DAQmxErrorHostnameAlreadyInUse: i32 = -201369;
pub const DAQmxErrorInvalidNumberOfCalAdjustmentPoints: i32 = -201368;
pub const DAQmxErrorFilterOrDigitalSyncInternalSignal: i32 = -201367;
pub const DAQmxErrorBadDDSSource: i32 = -201366;
pub const DAQmxErrorOnboardRegenWithMoreThan16Channels: i32 = -201365;
pub const DAQmxErrorTriggerTooFast: i32 = -201364;
pub const DAQmxErrorMinMaxOutsideTableRange: i32 = -201363;
pub const DAQmxErrorChannelExpansionWithInvalidAnalogTriggerDevice: i32 = -201362;
pub const DAQmxErrorSyncPulseSrcInvalidForTask: i32 = -201361;
pub const DAQmxErrorInvalidCarrierSlotNumberSpecd: i32 = -201360;
pub const DAQmxErrorCardsMustBeInSameCarrier: i32 = -201359;
pub const DAQmxErrorCardDevCarrierSimMustMatch: i32 = -201358;
pub const DAQmxErrorDevMustHaveAtLeastOneCard: i32 = -201357;
pub const DAQmxErrorCardTopologyError: i32 = -201356;
pub const DAQmxErrorExceededCarrierPowerLimit: i32 = -201355;
pub const DAQmxErrorCardsIncompatible: i32 = -201354;
pub const DAQmxErrorAnalogBusNotValid: i32 = -201353;
pub const DAQmxErrorReservationConflict: i32 = -201352;
pub const DAQmxErrorMemMappedOnDemandNotSupported: i32 = -201351;
pub const DAQmxErrorSlaveWithNoStartTriggerConfigured: i32 = -201350;
pub const DAQmxErrorChannelExpansionWithDifferentTriggerDevices: i32 = -201349;
pub const DAQmxErrorCounterSyncAndRetriggered: i32 = -201348;
pub const DAQmxErrorNoExternalSyncPulseDetected: i32 = -201347;
pub const DAQmxErrorSlaveAndNoExternalSyncPulse: i32 = -201346;
pub const DAQmxErrorCustomTimingRequiredForAttribute: i32 = -201345;
pub const DAQmxErrorCustomTimingModeNotSet: i32 = -201344;
pub const DAQmxErrorAccessoryPowerTripped: i32 = -201343;
pub const DAQmxErrorUnsupportedAccessory: i32 = -201342;
pub const DAQmxErrorInvalidAccessoryChange: i32 = -201341;
pub const DAQmxErrorFirmwareRequiresUpgrade: i32 = -201340;
pub const DAQmxErrorFastExternalTimebaseNotSupportedForDevice: i32 = -201339;
pub const DAQmxErrorInvalidShuntLocationForCalibration: i32 = -201338;
pub const DAQmxErrorDeviceNameTooLong: i32 = -201337;
pub const DAQmxErrorBridgeScalesUnsupported: i32 = -201336;
pub const DAQmxErrorMismatchedElecPhysValues: i32 = -201335;
pub const DAQmxErrorLinearRequiresUniquePoints: i32 = -201334;
pub const DAQmxErrorMissingRequiredScalingParameter: i32 = -201333;
pub const DAQmxErrorLoggingNotSupportOnOutputTasks: i32 = -201332;
pub const DAQmxErrorMemoryMappedHardwareTimedNonBufferedUnsupported: i32 = -201331;
pub const DAQmxErrorCannotUpdatePulseTrainWithAutoIncrementEnabled: i32 = -201330;
pub const DAQmxErrorHWTimedSinglePointAndDataXferNotDMA: i32 = -201329;
pub const DAQmxErrorSCCSecondStageEmpty: i32 = -201328;
pub const DAQmxErrorSCCInvalidDualStageCombo: i32 = -201327;
pub const DAQmxErrorSCCInvalidSecondStage: i32 = -201326;
pub const DAQmxErrorSCCInvalidFirstStage: i32 = -201325;
pub const DAQmxErrorCounterMultipleSampleClockedChannels: i32 = -201324;
pub const DAQmxError2CounterMeasurementModeAndSampleClocked: i32 = -201323;
pub const DAQmxErrorCantHaveBothMemMappedAndNonMemMappedTasks: i32 = -201322;
pub const DAQmxErrorMemMappedDataReadByAnotherProcess: i32 = -201321;
pub const DAQmxErrorRetriggeringInvalidForGivenSettings: i32 = -201320;
pub const DAQmxErrorAIOverrun: i32 = -201319;
pub const DAQmxErrorCOOverrun: i32 = -201318;
pub const DAQmxErrorCounterMultipleBufferedChannels: i32 = -201317;
pub const DAQmxErrorInvalidTimebaseForCOHWTSP: i32 = -201316;
pub const DAQmxErrorWriteBeforeEvent: i32 = -201315;
pub const DAQmxErrorCIOverrun: i32 = -201314;
pub const DAQmxErrorCounterNonResponsiveAndReset: i32 = -201313;
pub const DAQmxErrorMeasTypeOrChannelNotSupportedForLogging: i32 = -201312;
pub const DAQmxErrorFileAlreadyOpenedForWrite: i32 = -201311;
pub const DAQmxErrorTdmsNotFound: i32 = -201310;
pub const DAQmxErrorGenericFileIO: i32 = -201309;
pub const DAQmxErrorFiniteSTCCounterNotSupportedForLogging: i32 = -201308;
pub const DAQmxErrorMeasurementTypeNotSupportedForLogging: i32 = -201307;
pub const DAQmxErrorFileAlreadyOpened: i32 = -201306;
pub const DAQmxErrorDiskFull: i32 = -201305;
pub const DAQmxErrorFilePathInvalid: i32 = -201304;
pub const DAQmxErrorFileVersionMismatch: i32 = -201303;
pub const DAQmxErrorFileWriteProtected: i32 = -201302;
pub const DAQmxErrorReadNotSupportedForLoggingMode: i32 = -201301;
pub const DAQmxErrorAttributeNotSupportedWhenLogging: i32 = -201300;
pub const DAQmxErrorLoggingModeNotSupportedNonBuffered: i32 = -201299;
pub const DAQmxErrorPropertyNotSupportedWithConflictingProperty: i32 = -201298;
pub const DAQmxErrorParallelSSHOnConnector1: i32 = -201297;
pub const DAQmxErrorCOOnlyImplicitSampleTimingTypeSupported: i32 = -201296;
pub const DAQmxErrorCalibrationFailedAOOutOfRange: i32 = -201295;
pub const DAQmxErrorCalibrationFailedAIOutOfRange: i32 = -201294;
pub const DAQmxErrorCalPWMLinearityFailed: i32 = -201293;
pub const DAQmxErrorOverrunUnderflowConfigurationCombo: i32 = -201292;
pub const DAQmxErrorCannotWriteToFiniteCOTask: i32 = -201291;
pub const DAQmxErrorNetworkDAQInvalidWEPKeyLength: i32 = -201290;
pub const DAQmxErrorCalInputsShortedNotSupported: i32 = -201289;
pub const DAQmxErrorCannotSetPropertyWhenTaskIsReserved: i32 = -201288;
pub const DAQmxErrorMinus12VFuseBlown: i32 = -201287;
pub const DAQmxErrorPlus12VFuseBlown: i32 = -201286;
pub const DAQmxErrorPlus5VFuseBlown: i32 = -201285;
pub const DAQmxErrorPlus3VFuseBlown: i32 = -201284;
pub const DAQmxErrorDeviceSerialPortError: i32 = -201283;
pub const DAQmxErrorPowerUpStateMachineNotDone: i32 = -201282;
pub const DAQmxErrorTooManyTriggersSpecifiedInTask: i32 = -201281;
pub const DAQmxErrorVerticalOffsetNotSupportedOnDevice: i32 = -201280;
pub const DAQmxErrorInvalidCouplingForMeasurementType: i32 = -201279;
pub const DAQmxErrorDigitalLineUpdateTooFastForDevice: i32 = -201278;
pub const DAQmxErrorCertificateIsTooBigToTransfer: i32 = -201277;
pub const DAQmxErrorOnlyPEMOrDERCertiticatesAccepted: i32 = -201276;
pub const DAQmxErrorCalCouplingNotSupported: i32 = -201275;
pub const DAQmxErrorDeviceNotSupportedIn64Bit: i32 = -201274;
pub const DAQmxErrorNetworkDeviceInUse: i32 = -201273;
pub const DAQmxErrorInvalidIPv4AddressFormat: i32 = -201272;
pub const DAQmxErrorNetworkProductTypeMismatch: i32 = -201271;
pub const DAQmxErrorOnlyPEMCertificatesAccepted: i32 = -201270;
pub const DAQmxErrorCalibrationRequiresPrototypingBoardEnabled: i32 = -201269;
pub const DAQmxErrorAllCurrentLimitingResourcesAlreadyTaken: i32 = -201268;
pub const DAQmxErrorUserDefInfoStringBadLength: i32 = -201267;
pub const DAQmxErrorPropertyNotFound: i32 = -201266;
pub const DAQmxErrorOverVoltageProtectionActivated: i32 = -201265;
pub const DAQmxErrorScaledIQWaveformTooLarge: i32 = -201264;
pub const DAQmxErrorFirmwareFailedToDownload: i32 = -201263;
pub const DAQmxErrorPropertyNotSupportedForBusType: i32 = -201262;
pub const DAQmxErrorChangeRateWhileRunningCouldNotBeCompleted: i32 = -201261;
pub const DAQmxErrorCannotQueryManualControlAttribute: i32 = -201260;
pub const DAQmxErrorInvalidNetworkConfiguration: i32 = -201259;
pub const DAQmxErrorInvalidWirelessConfiguration: i32 = -201258;
pub const DAQmxErrorInvalidWirelessCountryCode: i32 = -201257;
pub const DAQmxErrorInvalidWirelessChannel: i32 = -201256;
pub const DAQmxErrorNetworkEEPROMHasChanged: i32 = -201255;
pub const DAQmxErrorNetworkSerialNumberMismatch: i32 = -201254;
pub const DAQmxErrorNetworkStatusDown: i32 = -201253;
pub const DAQmxErrorNetworkTargetUnreachable: i32 = -201252;
pub const DAQmxErrorNetworkTargetNotFound: i32 = -201251;
pub const DAQmxErrorNetworkStatusTimedOut: i32 = -201250;
pub const DAQmxErrorInvalidWirelessSecuritySelection: i32 = -201249;
pub const DAQmxErrorNetworkDeviceConfigurationLocked: i32 = -201248;
pub const DAQmxErrorNetworkDAQDeviceNotSupported: i32 = -201247;
pub const DAQmxErrorNetworkDAQCannotCreateEmptySleeve: i32 = -201246;
pub const DAQmxErrorUserDefInfoStringTooLong: i32 = -201245;
pub const DAQmxErrorModuleTypeDoesNotMatchModuleTypeInDestination: i32 = -201244;
pub const DAQmxErrorInvalidTEDSInterfaceAddress: i32 = -201243;
pub const DAQmxErrorDevDoesNotSupportSCXIComm: i32 = -201242;
pub const DAQmxErrorSCXICommDevConnector0MustBeCabledToModule: i32 = -201241;
pub const DAQmxErrorSCXIModuleDoesNotSupportDigitizationMode: i32 = -201240;
pub const DAQmxErrorDevDoesNotSupportMultiplexedSCXIDigitizationMode: i32 = -201239;
pub const DAQmxErrorDevOrDevPhysChanDoesNotSupportSCXIDigitization: i32 = -201238;
pub const DAQmxErrorInvalidPhysChanName: i32 = -201237;
pub const DAQmxErrorSCXIChassisCommModeInvalid: i32 = -201236;
pub const DAQmxErrorRequiredDependencyNotFound: i32 = -201235;
pub const DAQmxErrorInvalidStorage: i32 = -201234;
pub const DAQmxErrorInvalidObject: i32 = -201233;
pub const DAQmxErrorStorageAlteredPriorToSave: i32 = -201232;
pub const DAQmxErrorTaskDoesNotReferenceLocalChannel: i32 = -201231;
pub const DAQmxErrorReferencedDevSimMustMatchTarget: i32 = -201230;
pub const DAQmxErrorProgrammedIOFailsBecauseOfWatchdogTimer: i32 = -201229;
pub const DAQmxErrorWatchdogTimerFailsBecauseOfProgrammedIO: i32 = -201228;
pub const DAQmxErrorCantUseThisTimingEngineWithAPort: i32 = -201227;
pub const DAQmxErrorProgrammedIOConflict: i32 = -201226;
pub const DAQmxErrorChangeDetectionIncompatibleWithProgrammedIO: i32 = -201225;
pub const DAQmxErrorTristateNotEnoughLines: i32 = -201224;
pub const DAQmxErrorTristateConflict: i32 = -201223;
pub const DAQmxErrorGenerateOrFiniteWaitExpectedBeforeBreakBlock: i32 = -201222;
pub const DAQmxErrorBreakBlockNotAllowedInLoop: i32 = -201221;
pub const DAQmxErrorClearTriggerNotAllowedInBreakBlock: i32 = -201220;
pub const DAQmxErrorNestingNotAllowedInBreakBlock: i32 = -201219;
pub const DAQmxErrorIfElseBlockNotAllowedInBreakBlock: i32 = -201218;
pub const DAQmxErrorRepeatUntilTriggerLoopNotAllowedInBreakBlock: i32 = -201217;
pub const DAQmxErrorWaitUntilTriggerNotAllowedInBreakBlock: i32 = -201216;
pub const DAQmxErrorMarkerPosInvalidInBreakBlock: i32 = -201215;
pub const DAQmxErrorInvalidWaitDurationInBreakBlock: i32 = -201214;
pub const DAQmxErrorInvalidSubsetLengthInBreakBlock: i32 = -201213;
pub const DAQmxErrorInvalidWaveformLengthInBreakBlock: i32 = -201212;
pub const DAQmxErrorInvalidWaitDurationBeforeBreakBlock: i32 = -201211;
pub const DAQmxErrorInvalidSubsetLengthBeforeBreakBlock: i32 = -201210;
pub const DAQmxErrorInvalidWaveformLengthBeforeBreakBlock: i32 = -201209;
pub const DAQmxErrorSampleRateTooHighForADCTimingMode: i32 = -201208;
pub const DAQmxErrorActiveDevNotSupportedWithMultiDevTask: i32 = -201207;
pub const DAQmxErrorRealDevAndSimDevNotSupportedInSameTask: i32 = -201206;
pub const DAQmxErrorRTSISimMustMatchDevSim: i32 = -201205;
pub const DAQmxErrorBridgeShuntCaNotSupported: i32 = -201204;
pub const DAQmxErrorStrainShuntCaNotSupported: i32 = -201203;
pub const DAQmxErrorGainTooLargeForGainCalConst: i32 = -201202;
pub const DAQmxErrorOffsetTooLargeForOffsetCalConst: i32 = -201201;
pub const DAQmxErrorElvisPrototypingBoardRemoved: i32 = -201200;
pub const DAQmxErrorElvis2PowerRailFault: i32 = -201199;
pub const DAQmxErrorElvis2PhysicalChansFault: i32 = -201198;
pub const DAQmxErrorElvis2PhysicalChansThermalEvent: i32 = -201197;
pub const DAQmxErrorRXBitErrorRateLimitExceeded: i32 = -201196;
pub const DAQmxErrorPHYBitErrorRateLimitExceeded: i32 = -201195;
pub const DAQmxErrorTwoPartAttributeCalledOutOfOrder: i32 = -201194;
pub const DAQmxErrorInvalidSCXIChassisAddress: i32 = -201193;
pub const DAQmxErrorCouldNotConnectToRemoteMXS: i32 = -201192;
pub const DAQmxErrorExcitationStateRequiredForAttributes: i32 = -201191;
pub const DAQmxErrorDeviceNotUsableUntilUSBReplug: i32 = -201190;
pub const DAQmxErrorInputFIFOOverflowDuringCalibrationOnFullSpeedUSB: i32 = -201189;
pub const DAQmxErrorInputFIFOOverflowDuringCalibration: i32 = -201188;
pub const DAQmxErrorCJCChanConflictsWithNonThermocoupleChan: i32 = -201187;
pub const DAQmxErrorCommDeviceForPXIBackplaneNotInRightmostSlot: i32 = -201186;
pub const DAQmxErrorCommDeviceForPXIBackplaneNotInSameChassis: i32 = -201185;
pub const DAQmxErrorCommDeviceForPXIBackplaneNotPXI: i32 = -201184;
pub const DAQmxErrorInvalidCalExcitFrequency: i32 = -201183;
pub const DAQmxErrorInvalidCalExcitVoltage: i32 = -201182;
pub const DAQmxErrorInvalidAIInputSrc: i32 = -201181;
pub const DAQmxErrorInvalidCalInputRef: i32 = -201180;
pub const DAQmxErrordBReferenceValueNotGreaterThanZero: i32 = -201179;
pub const DAQmxErrorSampleClockRateIsTooFastForSampleClockTiming: i32 = -201178;
pub const DAQmxErrorDeviceNotUsableUntilColdStart: i32 = -201177;
pub const DAQmxErrorSampleClockRateIsTooFastForBurstTiming: i32 = -201176;
pub const DAQmxErrorDevImportFailedAssociatedResourceIDsNotSupported: i32 = -201175;
pub const DAQmxErrorSCXI1600ImportNotSupported: i32 = -201174;
pub const DAQmxErrorPowerSupplyConfigurationFailed: i32 = -201173;
pub const DAQmxErrorIEPEWithDCNotAllowed: i32 = -201172;
pub const DAQmxErrorMinTempForThermocoupleTypeOutsideAccuracyForPolyScaling: i32 = -201171;
pub const DAQmxErrorDevImportFailedNoDeviceToOverwriteAndSimulationNotSupported: i32 = -201170;
pub const DAQmxErrorDevImportFailedDeviceNotSupportedOnDestination: i32 = -201169;
pub const DAQmxErrorFirmwareIsTooOld: i32 = -201168;
pub const DAQmxErrorFirmwareCouldntUpdate: i32 = -201167;
pub const DAQmxErrorFirmwareIsCorrupt: i32 = -201166;
pub const DAQmxErrorFirmwareTooNew: i32 = -201165;
pub const DAQmxErrorSampClockCannotBeExportedFromExternalSampClockSrc: i32 = -201164;
pub const DAQmxErrorPhysChanReservedForInputWhenDesiredForOutput: i32 = -201163;
pub const DAQmxErrorPhysChanReservedForOutputWhenDesiredForInput: i32 = -201162;
pub const DAQmxErrorSpecifiedCDAQSlotNotEmpty: i32 = -201161;
pub const DAQmxErrorDeviceDoesNotSupportSimulation: i32 = -201160;
pub const DAQmxErrorInvalidCDAQSlotNumberSpecd: i32 = -201159;
pub const DAQmxErrorCSeriesModSimMustMatchCDAQChassisSim: i32 = -201158;
pub const DAQmxErrorSCCCabledDevMustNotBeSimWhenSCCCarrierIsNotSim: i32 = -201157;
pub const DAQmxErrorSCCModSimMustMatchSCCCarrierSim: i32 = -201156;
pub const DAQmxErrorSCXIModuleDoesNotSupportSimulation: i32 = -201155;
pub const DAQmxErrorSCXICableDevMustNotBeSimWhenModIsNotSim: i32 = -201154;
pub const DAQmxErrorSCXIDigitizerSimMustNotBeSimWhenModIsNotSim: i32 = -201153;
pub const DAQmxErrorSCXIModSimMustMatchSCXIChassisSim: i32 = -201152;
pub const DAQmxErrorSimPXIDevReqSlotAndChassisSpecd: i32 = -201151;
pub const DAQmxErrorSimDevConflictWithRealDev: i32 = -201150;
pub const DAQmxErrorInsufficientDataForCalibration: i32 = -201149;
pub const DAQmxErrorTriggerChannelMustBeEnabled: i32 = -201148;
pub const DAQmxErrorCalibrationDataConflictCouldNotBeResolved: i32 = -201147;
pub const DAQmxErrorSoftwareTooNewForSelfCalibrationData: i32 = -201146;
pub const DAQmxErrorSoftwareTooNewForExtCalibrationData: i32 = -201145;
pub const DAQmxErrorSelfCalibrationDataTooNewForSoftware: i32 = -201144;
pub const DAQmxErrorExtCalibrationDataTooNewForSoftware: i32 = -201143;
pub const DAQmxErrorSoftwareTooNewForEEPROM: i32 = -201142;
pub const DAQmxErrorEEPROMTooNewForSoftware: i32 = -201141;
pub const DAQmxErrorSoftwareTooNewForHardware: i32 = -201140;
pub const DAQmxErrorHardwareTooNewForSoftware: i32 = -201139;
pub const DAQmxErrorTaskCannotRestartFirstSampNotAvailToGenerate: i32 = -201138;
pub const DAQmxErrorOnlyUseStartTrigSrcPrptyWithDevDataLines: i32 = -201137;
pub const DAQmxErrorOnlyUsePauseTrigSrcPrptyWithDevDataLines: i32 = -201136;
pub const DAQmxErrorOnlyUseRefTrigSrcPrptyWithDevDataLines: i32 = -201135;
pub const DAQmxErrorPauseTrigDigPatternSizeDoesNotMatchSrcSize: i32 = -201134;
pub const DAQmxErrorLineConflictCDAQ: i32 = -201133;
pub const DAQmxErrorCannotWriteBeyondFinalFiniteSample: i32 = -201132;
pub const DAQmxErrorRefAndStartTriggerSrcCantBeSame: i32 = -201131;
pub const DAQmxErrorMemMappingIncompatibleWithPhysChansInTask: i32 = -201130;
pub const DAQmxErrorOutputDriveTypeMemMappingConflict: i32 = -201129;
pub const DAQmxErrorCAPIDeviceIndexInvalid: i32 = -201128;
pub const DAQmxErrorRatiometricDevicesMustUseExcitationForScaling: i32 = -201127;
pub const DAQmxErrorPropertyRequiresPerDeviceCfg: i32 = -201126;
pub const DAQmxErrorAICouplingAndAIInputSourceConflict: i32 = -201125;
pub const DAQmxErrorOnlyOneTaskCanPerformDOMemoryMappingAtATime: i32 = -201124;
pub const DAQmxErrorTooManyChansForAnalogRefTrigCDAQ: i32 = -201123;
pub const DAQmxErrorSpecdPropertyValueIsIncompatibleWithSampleTimingType: i32 = -201122;
pub const DAQmxErrorCPUNotSupportedRequireSSE: i32 = -201121;
pub const DAQmxErrorSpecdPropertyValueIsIncompatibleWithSampleTimingResponseMode: i32 = -201120;
pub const DAQmxErrorConflictingNextWriteIsLastAndRegenModeProperties: i32 = -201119;
pub const DAQmxErrorMStudioOperationDoesNotSupportDeviceContext: i32 = -201118;
pub const DAQmxErrorPropertyValueInChannelExpansionContextInvalid: i32 = -201117;
pub const DAQmxErrorHWTimedNonBufferedAONotSupported: i32 = -201116;
pub const DAQmxErrorWaveformLengthNotMultOfQuantum: i32 = -201115;
pub const DAQmxErrorDSAExpansionMixedBoardsWrongOrderInPXIChassis: i32 = -201114;
pub const DAQmxErrorPowerLevelTooLowForOOK: i32 = -201113;
pub const DAQmxErrorDeviceComponentTestFailure: i32 = -201112;
pub const DAQmxErrorUserDefinedWfmWithOOKUnsupported: i32 = -201111;
pub const DAQmxErrorInvalidDigitalModulationUserDefinedWaveform: i32 = -201110;
pub const DAQmxErrorBothRefInAndRefOutEnabled: i32 = -201109;
pub const DAQmxErrorBothAnalogAndDigitalModulationEnabled: i32 = -201108;
pub const DAQmxErrorBufferedOpsNotSupportedInSpecdSlotForCDAQ: i32 = -201107;
pub const DAQmxErrorPhysChanNotSupportedInSpecdSlotForCDAQ: i32 = -201106;
pub const DAQmxErrorResourceReservedWithConflictingSettings: i32 = -201105;
pub const DAQmxErrorInconsistentAnalogTrigSettingsCDAQ: i32 = -201104;
pub const DAQmxErrorTooManyChansForAnalogPauseTrigCDAQ: i32 = -201103;
pub const DAQmxErrorAnalogTrigNotFirstInScanListCDAQ: i32 = -201102;
pub const DAQmxErrorTooManyChansGivenTimingType: i32 = -201101;
pub const DAQmxErrorSampClkTimebaseDivWithExtSampClk: i32 = -201100;
pub const DAQmxErrorCantSaveTaskWithPerDeviceTimingProperties: i32 = -201099;
pub const DAQmxErrorConflictingAutoZeroMode: i32 = -201098;
pub const DAQmxErrorSampClkRateNotSupportedWithEAREnabled: i32 = -201097;
pub const DAQmxErrorSampClkTimebaseRateNotSpecd: i32 = -201096;
pub const DAQmxErrorSessionCorruptedByDLLReload: i32 = -201095;
pub const DAQmxErrorActiveDevNotSupportedWithChanExpansion: i32 = -201094;
pub const DAQmxErrorSampClkRateInvalid: i32 = -201093;
pub const DAQmxErrorExtSyncPulseSrcCannotBeExported: i32 = -201092;
pub const DAQmxErrorSyncPulseMinDelayToStartNeededForExtSyncPulseSrc: i32 = -201091;
pub const DAQmxErrorSyncPulseSrcInvalid: i32 = -201090;
pub const DAQmxErrorSampClkTimebaseRateInvalid: i32 = -201089;
pub const DAQmxErrorSampClkTimebaseSrcInvalid: i32 = -201088;
pub const DAQmxErrorSampClkRateMustBeSpecd: i32 = -201087;
pub const DAQmxErrorInvalidAttributeName: i32 = -201086;
pub const DAQmxErrorCJCChanNameMustBeSetWhenCJCSrcIsScannableChan: i32 = -201085;
pub const DAQmxErrorHiddenChanMissingInChansPropertyInCfgFile: i32 = -201084;
pub const DAQmxErrorChanNamesNotSpecdInCfgFile: i32 = -201083;
pub const DAQmxErrorDuplicateHiddenChanNamesInCfgFile: i32 = -201082;
pub const DAQmxErrorDuplicateChanNameInCfgFile: i32 = -201081;
pub const DAQmxErrorInvalidSCCModuleForSlotSpecd: i32 = -201080;
pub const DAQmxErrorInvalidSCCSlotNumberSpecd: i32 = -201079;
pub const DAQmxErrorInvalidSectionIdentifier: i32 = -201078;
pub const DAQmxErrorInvalidSectionName: i32 = -201077;
pub const DAQmxErrorDAQmxVersionNotSupported: i32 = -201076;
pub const DAQmxErrorSWObjectsFoundInFile: i32 = -201075;
pub const DAQmxErrorHWObjectsFoundInFile: i32 = -201074;
pub const DAQmxErrorLocalChannelSpecdWithNoParentTask: i32 = -201073;
pub const DAQmxErrorTaskReferencesMissingLocalChannel: i32 = -201072;
pub const DAQmxErrorTaskReferencesLocalChannelFromOtherTask: i32 = -201071;
pub const DAQmxErrorTaskMissingChannelProperty: i32 = -201070;
pub const DAQmxErrorInvalidLocalChanName: i32 = -201069;
pub const DAQmxErrorInvalidEscapeCharacterInString: i32 = -201068;
pub const DAQmxErrorInvalidTableIdentifier: i32 = -201067;
pub const DAQmxErrorValueFoundInInvalidColumn: i32 = -201066;
pub const DAQmxErrorMissingStartOfTable: i32 = -201065;
pub const DAQmxErrorFileMissingRequiredDAQmxHeader: i32 = -201064;
pub const DAQmxErrorDeviceIDDoesNotMatch: i32 = -201063;
pub const DAQmxErrorBufferedOperationsNotSupportedOnSelectedLines: i32 = -201062;
pub const DAQmxErrorPropertyConflictsWithScale: i32 = -201061;
pub const DAQmxErrorInvalidINIFileSyntax: i32 = -201060;
pub const DAQmxErrorDeviceInfoFailedPXIChassisNotIdentified: i32 = -201059;
pub const DAQmxErrorInvalidHWProductNumber: i32 = -201058;
pub const DAQmxErrorInvalidHWProductType: i32 = -201057;
pub const DAQmxErrorInvalidNumericFormatSpecd: i32 = -201056;
pub const DAQmxErrorDuplicatePropertyInObject: i32 = -201055;
pub const DAQmxErrorInvalidEnumValueSpecd: i32 = -201054;
pub const DAQmxErrorTEDSSensorPhysicalChannelConflict: i32 = -201053;
pub const DAQmxErrorTooManyPhysicalChansForTEDSInterfaceSpecd: i32 = -201052;
pub const DAQmxErrorIncapableTEDSInterfaceControllingDeviceSpecd: i32 = -201051;
pub const DAQmxErrorSCCCarrierSpecdIsMissing: i32 = -201050;
pub const DAQmxErrorIncapableSCCDigitizingDeviceSpecd: i32 = -201049;
pub const DAQmxErrorAccessorySettingNotApplicable: i32 = -201048;
pub const DAQmxErrorDeviceAndConnectorSpecdAlreadyOccupied: i32 = -201047;
pub const DAQmxErrorIllegalAccessoryTypeForDeviceSpecd: i32 = -201046;
pub const DAQmxErrorInvalidDeviceConnectorNumberSpecd: i32 = -201045;
pub const DAQmxErrorInvalidAccessoryName: i32 = -201044;
pub const DAQmxErrorMoreThanOneMatchForSpecdDevice: i32 = -201043;
pub const DAQmxErrorNoMatchForSpecdDevice: i32 = -201042;
pub const DAQmxErrorProductTypeAndProductNumberConflict: i32 = -201041;
pub const DAQmxErrorExtraPropertyDetectedInSpecdObject: i32 = -201040;
pub const DAQmxErrorRequiredPropertyMissing: i32 = -201039;
pub const DAQmxErrorCantSetAuthorForLocalChan: i32 = -201038;
pub const DAQmxErrorInvalidTimeValue: i32 = -201037;
pub const DAQmxErrorInvalidTimeFormat: i32 = -201036;
pub const DAQmxErrorDigDevChansSpecdInModeOtherThanParallel: i32 = -201035;
pub const DAQmxErrorCascadeDigitizationModeNotSupported: i32 = -201034;
pub const DAQmxErrorSpecdSlotAlreadyOccupied: i32 = -201033;
pub const DAQmxErrorInvalidSCXISlotNumberSpecd: i32 = -201032;
pub const DAQmxErrorAddressAlreadyInUse: i32 = -201031;
pub const DAQmxErrorSpecdDeviceDoesNotSupportRTSI: i32 = -201030;
pub const DAQmxErrorSpecdDeviceIsAlreadyOnRTSIBus: i32 = -201029;
pub const DAQmxErrorIdentifierInUse: i32 = -201028;
pub const DAQmxErrorWaitForNextSampleClockOrReadDetected3OrMoreMissedSampClks: i32 = -201027;
pub const DAQmxErrorHWTimedAndDataXferPIO: i32 = -201026;
pub const DAQmxErrorNonBufferedAndHWTimed: i32 = -201025;
pub const DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriodPolled: i32 = -201024;
pub const DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod2: i32 = -201023;
pub const DAQmxErrorCOCannotKeepUpInHWTimedSinglePointPolled: i32 = -201022;
pub const DAQmxErrorWriteRecoveryCannotKeepUpInHWTimedSinglePoint: i32 = -201021;
pub const DAQmxErrorNoChangeDetectionOnSelectedLineForDevice: i32 = -201020;
pub const DAQmxErrorSMIOPauseTriggersNotSupportedWithChannelExpansion: i32 = -201019;
pub const DAQmxErrorClockMasterForExternalClockNotLongestPipeline: i32 = -201018;
pub const DAQmxErrorUnsupportedUnicodeByteOrderMarker: i32 = -201017;
pub const DAQmxErrorTooManyInstructionsInLoopInScript: i32 = -201016;
pub const DAQmxErrorPLLNotLocked: i32 = -201015;
pub const DAQmxErrorIfElseBlockNotAllowedInFiniteRepeatLoopInScript: i32 = -201014;
pub const DAQmxErrorIfElseBlockNotAllowedInConditionalRepeatLoopInScript: i32 = -201013;
pub const DAQmxErrorClearIsLastInstructionInIfElseBlockInScript: i32 = -201012;
pub const DAQmxErrorInvalidWaitDurationBeforeIfElseBlockInScript: i32 = -201011;
pub const DAQmxErrorMarkerPosInvalidBeforeIfElseBlockInScript: i32 = -201010;
pub const DAQmxErrorInvalidSubsetLengthBeforeIfElseBlockInScript: i32 = -201009;
pub const DAQmxErrorInvalidWaveformLengthBeforeIfElseBlockInScript: i32 = -201008;
pub const DAQmxErrorGenerateOrFiniteWaitInstructionExpectedBeforeIfElseBlockInScript: i32 = -201007;
pub const DAQmxErrorCalPasswordNotSupported: i32 = -201006;
pub const DAQmxErrorSetupCalNeededBeforeAdjustCal: i32 = -201005;
pub const DAQmxErrorMultipleChansNotSupportedDuringCalSetup: i32 = -201004;
pub const DAQmxErrorDevCannotBeAccessed: i32 = -201003;
pub const DAQmxErrorSampClkRateDoesntMatchSampClkSrc: i32 = -201002;
pub const DAQmxErrorSampClkRateNotSupportedWithEARDisabled: i32 = -201001;
pub const DAQmxErrorLabVIEWVersionDoesntSupportDAQmxEvents: i32 = -201000;
pub const DAQmxErrorCOReadyForNewValNotSupportedWithOnDemand: i32 = -200999;
pub const DAQmxErrorCIHWTimedSinglePointNotSupportedForMeasType: i32 = -200998;
pub const DAQmxErrorOnDemandNotSupportedWithHWTimedSinglePoint: i32 = -200997;
pub const DAQmxErrorHWTimedSinglePointAndDataXferNotProgIO: i32 = -200996;
pub const DAQmxErrorMemMapAndHWTimedSinglePoint: i32 = -200995;
pub const DAQmxErrorCannotSetPropertyWhenHWTimedSinglePointTaskIsRunning: i32 = -200994;
pub const DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod: i32 = -200993;
pub const DAQmxErrorTooManyEventsGenerated: i32 = -200992;
pub const DAQmxErrorMStudioCppRemoveEventsBeforeStop: i32 = -200991;
pub const DAQmxErrorCAPICannotRegisterSyncEventsFromMultipleThreads: i32 = -200990;
pub const DAQmxErrorReadWaitNextSampClkWaitMismatchTwo: i32 = -200989;
pub const DAQmxErrorReadWaitNextSampClkWaitMismatchOne: i32 = -200988;
pub const DAQmxErrorDAQmxSignalEventTypeNotSupportedByChanTypesOrDevicesInTask: i32 = -200987;
pub const DAQmxErrorCannotUnregisterDAQmxSoftwareEventWhileTaskIsRunning: i32 = -200986;
pub const DAQmxErrorAutoStartWriteNotAllowedEventRegistered: i32 = -200985;
pub const DAQmxErrorAutoStartReadNotAllowedEventRegistered: i32 = -200984;
pub const DAQmxErrorCannotGetPropertyWhenTaskNotReservedCommittedOrRunning: i32 = -200983;
pub const DAQmxErrorSignalEventsNotSupportedByDevice: i32 = -200982;
pub const DAQmxErrorEveryNSamplesAcqIntoBufferEventNotSupportedByDevice: i32 = -200981;
pub const DAQmxErrorEveryNSampsTransferredFromBufferEventNotSupportedByDevice: i32 = -200980;
pub const DAQmxErrorCAPISyncEventsTaskStateChangeNotAllowedFromDifferentThread: i32 = -200979;
pub const DAQmxErrorDAQmxSWEventsWithDifferentCallMechanisms: i32 = -200978;
pub const DAQmxErrorCantSaveChanWithPolyCalScaleAndAllowInteractiveEdit: i32 = -200977;
pub const DAQmxErrorChanDoesNotSupportCJC: i32 = -200976;
pub const DAQmxErrorCOReadyForNewValNotSupportedWithHWTimedSinglePoint: i32 = -200975;
pub const DAQmxErrorDACAllowConnToGndNotSupportedByDevWhenRefSrcExt: i32 = -200974;
pub const DAQmxErrorCantGetPropertyTaskNotRunning: i32 = -200973;
pub const DAQmxErrorCantSetPropertyTaskNotRunning: i32 = -200972;
pub const DAQmxErrorCantSetPropertyTaskNotRunningCommitted: i32 = -200971;
pub const DAQmxErrorAIEveryNSampsEventIntervalNotMultipleOf2: i32 = -200970;
pub const DAQmxErrorInvalidTEDSPhysChanNotAI: i32 = -200969;
pub const DAQmxErrorCAPICannotPerformTaskOperationInAsyncCallback: i32 = -200968;
pub const DAQmxErrorEveryNSampsTransferredFromBufferEventAlreadyRegistered: i32 = -200967;
pub const DAQmxErrorEveryNSampsAcqIntoBufferEventAlreadyRegistered: i32 = -200966;
pub const DAQmxErrorEveryNSampsTransferredFromBufferNotForInput: i32 = -200965;
pub const DAQmxErrorEveryNSampsAcqIntoBufferNotForOutput: i32 = -200964;
pub const DAQmxErrorAOSampTimingTypeDifferentIn2Tasks: i32 = -200963;
pub const DAQmxErrorCouldNotDownloadFirmwareHWDamaged: i32 = -200962;
pub const DAQmxErrorCouldNotDownloadFirmwareFileMissingOrDamaged: i32 = -200961;
pub const DAQmxErrorCannotRegisterDAQmxSoftwareEventWhileTaskIsRunning: i32 = -200960;
pub const DAQmxErrorDifferentRawDataCompression: i32 = -200959;
pub const DAQmxErrorConfiguredTEDSInterfaceDevNotDetected: i32 = -200958;
pub const DAQmxErrorCompressedSampSizeExceedsResolution: i32 = -200957;
pub const DAQmxErrorChanDoesNotSupportCompression: i32 = -200956;
pub const DAQmxErrorDifferentRawDataFormats: i32 = -200955;
pub const DAQmxErrorSampClkOutputTermIncludesStartTrigSrc: i32 = -200954;
pub const DAQmxErrorStartTrigSrcEqualToSampClkSrc: i32 = -200953;
pub const DAQmxErrorEventOutputTermIncludesTrigSrc: i32 = -200952;
pub const DAQmxErrorCOMultipleWritesBetweenSampClks: i32 = -200951;
pub const DAQmxErrorDoneEventAlreadyRegistered: i32 = -200950;
pub const DAQmxErrorSignalEventAlreadyRegistered: i32 = -200949;
pub const DAQmxErrorCannotHaveTimedLoopAndDAQmxSignalEventsInSameTask: i32 = -200948;
pub const DAQmxErrorNeedLabVIEW711PatchToUseDAQmxEvents: i32 = -200947;
pub const DAQmxErrorStartFailedDueToWriteFailure: i32 = -200946;
pub const DAQmxErrorDataXferCustomThresholdNotDMAXferMethodSpecifiedForDev: i32 = -200945;
pub const DAQmxErrorDataXferRequestConditionNotSpecifiedForCustomThreshold: i32 = -200944;
pub const DAQmxErrorDataXferCustomThresholdNotSpecified: i32 = -200943;
pub const DAQmxErrorCAPISyncCallbackNotSupportedOnThisPlatform: i32 = -200942;
pub const DAQmxErrorCalChanReversePolyCoefNotSpecd: i32 = -200941;
pub const DAQmxErrorCalChanForwardPolyCoefNotSpecd: i32 = -200940;
pub const DAQmxErrorChanCalRepeatedNumberInPreScaledVals: i32 = -200939;
pub const DAQmxErrorChanCalTableNumScaledNotEqualNumPrescaledVals: i32 = -200938;
pub const DAQmxErrorChanCalTableScaledValsNotSpecd: i32 = -200937;
pub const DAQmxErrorChanCalTablePreScaledValsNotSpecd: i32 = -200936;
pub const DAQmxErrorChanCalScaleTypeNotSet: i32 = -200935;
pub const DAQmxErrorChanCalExpired: i32 = -200934;
pub const DAQmxErrorChanCalExpirationDateNotSet: i32 = -200933;
pub const DAQmxError3OutputPortCombinationGivenSampTimingType653x: i32 = -200932;
pub const DAQmxError3InputPortCombinationGivenSampTimingType653x: i32 = -200931;
pub const DAQmxError2OutputPortCombinationGivenSampTimingType653x: i32 = -200930;
pub const DAQmxError2InputPortCombinationGivenSampTimingType653x: i32 = -200929;
pub const DAQmxErrorPatternMatcherMayBeUsedByOneTrigOnly: i32 = -200928;
pub const DAQmxErrorNoChansSpecdForPatternSource: i32 = -200927;
pub const DAQmxErrorChangeDetectionChanNotInTask: i32 = -200926;
pub const DAQmxErrorChangeDetectionChanNotTristated: i32 = -200925;
pub const DAQmxErrorWaitModeValueNotSupportedNonBuffered: i32 = -200924;
pub const DAQmxErrorWaitModePropertyNotSupportedNonBuffered: i32 = -200923;
pub const DAQmxErrorCantSavePerLineConfigDigChanSoInteractiveEditsAllowed: i32 = -200922;
pub const DAQmxErrorCantSaveNonPortMultiLineDigChanSoInteractiveEditsAllowed: i32 = -200921;
pub const DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalNoIrqOnDev: i32 = -200920;
pub const DAQmxErrorGlobalTaskNameAlreadyChanName: i32 = -200919;
pub const DAQmxErrorGlobalChanNameAlreadyTaskName: i32 = -200918;
pub const DAQmxErrorAOEveryNSampsEventIntervalNotMultipleOf2: i32 = -200917;
pub const DAQmxErrorSampleTimebaseDivisorNotSupportedGivenTimingType: i32 = -200916;
pub const DAQmxErrorHandshakeEventOutputTermNotSupportedGivenTimingType: i32 = -200915;
pub const DAQmxErrorChangeDetectionOutputTermNotSupportedGivenTimingType: i32 = -200914;
pub const DAQmxErrorReadyForTransferOutputTermNotSupportedGivenTimingType: i32 = -200913;
pub const DAQmxErrorRefTrigOutputTermNotSupportedGivenTimingType: i32 = -200912;
pub const DAQmxErrorStartTrigOutputTermNotSupportedGivenTimingType: i32 = -200911;
pub const DAQmxErrorSampClockOutputTermNotSupportedGivenTimingType: i32 = -200910;
pub const DAQmxError20MhzTimebaseNotSupportedGivenTimingType: i32 = -200909;
pub const DAQmxErrorSampClockSourceNotSupportedGivenTimingType: i32 = -200908;
pub const DAQmxErrorRefTrigTypeNotSupportedGivenTimingType: i32 = -200907;
pub const DAQmxErrorPauseTrigTypeNotSupportedGivenTimingType: i32 = -200906;
pub const DAQmxErrorHandshakeTrigTypeNotSupportedGivenTimingType: i32 = -200905;
pub const DAQmxErrorStartTrigTypeNotSupportedGivenTimingType: i32 = -200904;
pub const DAQmxErrorRefClkSrcNotSupported: i32 = -200903;
pub const DAQmxErrorDataVoltageLowAndHighIncompatible: i32 = -200902;
pub const DAQmxErrorInvalidCharInDigPatternString: i32 = -200901;
pub const DAQmxErrorCantUsePort3AloneGivenSampTimingTypeOn653x: i32 = -200900;
pub const DAQmxErrorCantUsePort1AloneGivenSampTimingTypeOn653x: i32 = -200899;
pub const DAQmxErrorPartialUseOfPhysicalLinesWithinPortNotSupported653x: i32 = -200898;
pub const DAQmxErrorPhysicalChanNotSupportedGivenSampTimingType653x: i32 = -200897;
pub const DAQmxErrorCanExportOnlyDigEdgeTrigs: i32 = -200896;
pub const DAQmxErrorRefTrigDigPatternSizeDoesNotMatchSourceSize: i32 = -200895;
pub const DAQmxErrorStartTrigDigPatternSizeDoesNotMatchSourceSize: i32 = -200894;
pub const DAQmxErrorChangeDetectionRisingAndFallingEdgeChanDontMatch: i32 = -200893;
pub const DAQmxErrorPhysicalChansForChangeDetectionAndPatternMatch653x: i32 = -200892;
pub const DAQmxErrorCanExportOnlyOnboardSampClk: i32 = -200891;
pub const DAQmxErrorInternalSampClkNotRisingEdge: i32 = -200890;
pub const DAQmxErrorRefTrigDigPatternChanNotInTask: i32 = -200889;
pub const DAQmxErrorRefTrigDigPatternChanNotTristated: i32 = -200888;
pub const DAQmxErrorStartTrigDigPatternChanNotInTask: i32 = -200887;
pub const DAQmxErrorStartTrigDigPatternChanNotTristated: i32 = -200886;
pub const DAQmxErrorPXIStarAndClock10Sync: i32 = -200885;
pub const DAQmxErrorGlobalChanCannotBeSavedSoInteractiveEditsAllowed: i32 = -200884;
pub const DAQmxErrorTaskCannotBeSavedSoInteractiveEditsAllowed: i32 = -200883;
pub const DAQmxErrorInvalidGlobalChan: i32 = -200882;
pub const DAQmxErrorEveryNSampsEventAlreadyRegistered: i32 = -200881;
pub const DAQmxErrorEveryNSampsEventIntervalZeroNotSupported: i32 = -200880;
pub const DAQmxErrorChanSizeTooBigForU16PortWrite: i32 = -200879;
pub const DAQmxErrorChanSizeTooBigForU16PortRead: i32 = -200878;
pub const DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalWhenDMA: i32 = -200877;
pub const DAQmxErrorWriteWhenTaskNotRunningCOTicks: i32 = -200876;
pub const DAQmxErrorWriteWhenTaskNotRunningCOFreq: i32 = -200875;
pub const DAQmxErrorWriteWhenTaskNotRunningCOTime: i32 = -200874;
pub const DAQmxErrorAOMinMaxNotSupportedDACRangeTooSmall: i32 = -200873;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACRange: i32 = -200872;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACRangeAndOffsetVal: i32 = -200871;
pub const DAQmxErrorAOMinMaxNotSupportedDACOffsetValInappropriate: i32 = -200870;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACOffsetVal: i32 = -200869;
pub const DAQmxErrorAOMinMaxNotSupportedDACRefValTooSmall: i32 = -200868;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACRefVal: i32 = -200867;
pub const DAQmxErrorAOMinMaxNotSupportedGivenDACRefAndOffsetVal: i32 = -200866;
pub const DAQmxErrorWhenAcqCompAndNumSampsPerChanExceedsOnBrdBufSize: i32 = -200865;
pub const DAQmxErrorWhenAcqCompAndNoRefTrig: i32 = -200864;
pub const DAQmxErrorWaitForNextSampClkNotSupported: i32 = -200863;
pub const DAQmxErrorDevInUnidentifiedPXIChassis: i32 = -200862;
pub const DAQmxErrorMaxSoundPressureMicSensitivitRelatedAIPropertiesNotSupportedByDev: i32 =
    -200861;
pub const DAQmxErrorMaxSoundPressureAndMicSensitivityNotSupportedByDev: i32 = -200860;
pub const DAQmxErrorAOBufferSizeZeroForSampClkTimingType: i32 = -200859;
pub const DAQmxErrorAOCallWriteBeforeStartForSampClkTimingType: i32 = -200858;
pub const DAQmxErrorInvalidCalLowPassCutoffFreq: i32 = -200857;
pub const DAQmxErrorSimulationCannotBeDisabledForDevCreatedAsSimulatedDev: i32 = -200856;
pub const DAQmxErrorCannotAddNewDevsAfterTaskConfiguration: i32 = -200855;
pub const DAQmxErrorDifftSyncPulseSrcAndSampClkTimebaseSrcDevMultiDevTask: i32 = -200854;
pub const DAQmxErrorTermWithoutDevInMultiDevTask: i32 = -200853;
pub const DAQmxErrorSyncNoDevSampClkTimebaseOrSyncPulseInPXISlot2: i32 = -200852;
pub const DAQmxErrorPhysicalChanNotOnThisConnector: i32 = -200851;
pub const DAQmxErrorNumSampsToWaitNotGreaterThanZeroInScript: i32 = -200850;
pub const DAQmxErrorNumSampsToWaitNotMultipleOfAlignmentQuantumInScript: i32 = -200849;
pub const DAQmxErrorEveryNSamplesEventNotSupportedForNonBufferedTasks: i32 = -200848;
pub const DAQmxErrorBufferedAndDataXferPIO: i32 = -200847;
pub const DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunning: i32 = -200846;
pub const DAQmxErrorNonBufferedAndDataXferInterrupts: i32 = -200845;
pub const DAQmxErrorWriteFailedMultipleCtrsWithFREQOUT: i32 = -200844;
pub const DAQmxErrorReadNotCompleteBefore3SampClkEdges: i32 = -200843;
pub const DAQmxErrorCtrHWTimedSinglePointAndDataXferNotProgIO: i32 = -200842;
pub const DAQmxErrorPrescalerNot1ForInputTerminal: i32 = -200841;
pub const DAQmxErrorPrescalerNot1ForTimebaseSrc: i32 = -200840;
pub const DAQmxErrorSampClkTimingTypeWhenTristateIsFalse: i32 = -200839;
pub const DAQmxErrorOutputBufferSizeNotMultOfXferSize: i32 = -200838;
pub const DAQmxErrorSampPerChanNotMultOfXferSize: i32 = -200837;
pub const DAQmxErrorWriteToTEDSFailed: i32 = -200836;
pub const DAQmxErrorSCXIDevNotUsablePowerTurnedOff: i32 = -200835;
pub const DAQmxErrorCannotReadWhenAutoStartFalseBufSizeZeroAndTaskNotRunning: i32 = -200834;
pub const DAQmxErrorCannotReadWhenAutoStartFalseHWTimedSinglePtAndTaskNotRunning: i32 = -200833;
pub const DAQmxErrorCannotReadWhenAutoStartFalseOnDemandAndTaskNotRunning: i32 = -200832;
pub const DAQmxErrorSimultaneousAOWhenNotOnDemandTiming: i32 = -200831;
pub const DAQmxErrorMemMapAndSimultaneousAO: i32 = -200830;
pub const DAQmxErrorWriteFailedMultipleCOOutputTypes: i32 = -200829;
pub const DAQmxErrorWriteToTEDSNotSupportedOnRT: i32 = -200828;
pub const DAQmxErrorVirtualTEDSDataFileError: i32 = -200827;
pub const DAQmxErrorTEDSSensorDataError: i32 = -200826;
pub const DAQmxErrorDataSizeMoreThanSizeOfEEPROMOnTEDS: i32 = -200825;
pub const DAQmxErrorPROMOnTEDSContainsBasicTEDSData: i32 = -200824;
pub const DAQmxErrorPROMOnTEDSAlreadyWritten: i32 = -200823;
pub const DAQmxErrorTEDSDoesNotContainPROM: i32 = -200822;
pub const DAQmxErrorHWTimedSinglePointNotSupportedAI: i32 = -200821;
pub const DAQmxErrorHWTimedSinglePointOddNumChansInAITask: i32 = -200820;
pub const DAQmxErrorCantUseOnlyOnBoardMemWithProgrammedIO: i32 = -200819;
pub const DAQmxErrorSwitchDevShutDownDueToHighTemp: i32 = -200818;
pub const DAQmxErrorExcitationNotSupportedWhenTermCfgDiff: i32 = -200817;
pub const DAQmxErrorTEDSMinElecValGEMaxElecVal: i32 = -200816;
pub const DAQmxErrorTEDSMinPhysValGEMaxPhysVal: i32 = -200815;
pub const DAQmxErrorCIOnboardClockNotSupportedAsInputTerm: i32 = -200814;
pub const DAQmxErrorInvalidSampModeForPositionMeas: i32 = -200813;
pub const DAQmxErrorTrigWhenAOHWTimedSinglePtSampMode: i32 = -200812;
pub const DAQmxErrorDAQmxCantUseStringDueToUnknownChar: i32 = -200811;
pub const DAQmxErrorDAQmxCantRetrieveStringDueToUnknownChar: i32 = -200810;
pub const DAQmxErrorClearTEDSNotSupportedOnRT: i32 = -200809;
pub const DAQmxErrorCfgTEDSNotSupportedOnRT: i32 = -200808;
pub const DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthBySameTask1PerDev: i32 = -200807;
pub const DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthByAnotherTask1PerDev: i32 = -200806;
pub const DAQmxErrorNoLastExtCalDateTimeLastExtCalNotDAQmx: i32 = -200804;
pub const DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandHWTimedSglPt: i32 = -200803;
pub const DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandBufSizeZero: i32 = -200802;
pub const DAQmxErrorCOInvalidTimingSrcDueToSignal: i32 = -200801;
pub const DAQmxErrorCIInvalidTimingSrcForSampClkDueToSampTimingType: i32 = -200800;
pub const DAQmxErrorCIInvalidTimingSrcForEventCntDueToSampMode: i32 = -200799;
pub const DAQmxErrorNoChangeDetectOnNonInputDigLineForDev: i32 = -200798;
pub const DAQmxErrorEmptyStringTermNameNotSupported: i32 = -200797;
pub const DAQmxErrorMemMapEnabledForHWTimedNonBufferedAO: i32 = -200796;
pub const DAQmxErrorDevOnboardMemOverflowDuringHWTimedNonBufferedGen: i32 = -200795;
pub const DAQmxErrorCODAQmxWriteMultipleChans: i32 = -200794;
pub const DAQmxErrorCantMaintainExistingValueAOSync: i32 = -200793;
pub const DAQmxErrorMStudioMultiplePhysChansNotSupported: i32 = -200792;
pub const DAQmxErrorCantConfigureTEDSForChan: i32 = -200791;
pub const DAQmxErrorWriteDataTypeTooSmall: i32 = -200790;
pub const DAQmxErrorReadDataTypeTooSmall: i32 = -200789;
pub const DAQmxErrorMeasuredBridgeOffsetTooHigh: i32 = -200788;
pub const DAQmxErrorStartTrigConflictWithCOHWTimedSinglePt: i32 = -200787;
pub const DAQmxErrorSampClkRateExtSampClkTimebaseRateMismatch: i32 = -200786;
pub const DAQmxErrorInvalidTimingSrcDueToSampTimingType: i32 = -200785;
pub const DAQmxErrorVirtualTEDSFileNotFound: i32 = -200784;
pub const DAQmxErrorMStudioNoForwardPolyScaleCoeffs: i32 = -200783;
pub const DAQmxErrorMStudioNoReversePolyScaleCoeffs: i32 = -200782;
pub const DAQmxErrorMStudioNoPolyScaleCoeffsUseCalc: i32 = -200781;
pub const DAQmxErrorMStudioNoForwardPolyScaleCoeffsUseCalc: i32 = -200780;
pub const DAQmxErrorMStudioNoReversePolyScaleCoeffsUseCalc: i32 = -200779;
pub const DAQmxErrorCOSampModeSampTimingTypeSampClkConflict: i32 = -200778;
pub const DAQmxErrorDevCannotProduceMinPulseWidth: i32 = -200777;
pub const DAQmxErrorCannotProduceMinPulseWidthGivenPropertyValues: i32 = -200776;
pub const DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherTask: i32 = -200775;
pub const DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherProperty: i32 = -200774;
pub const DAQmxErrorDigSyncNotAvailableOnTerm: i32 = -200773;
pub const DAQmxErrorDigFilterNotAvailableOnTerm: i32 = -200772;
pub const DAQmxErrorDigFilterEnabledMinPulseWidthNotCfg: i32 = -200771;
pub const DAQmxErrorDigFilterAndSyncBothEnabled: i32 = -200770;
pub const DAQmxErrorHWTimedSinglePointAOAndDataXferNotProgIO: i32 = -200769;
pub const DAQmxErrorNonBufferedAOAndDataXferNotProgIO: i32 = -200768;
pub const DAQmxErrorProgIODataXferForBufferedAO: i32 = -200767;
pub const DAQmxErrorTEDSLegacyTemplateIDInvalidOrUnsupported: i32 = -200766;
pub const DAQmxErrorTEDSMappingMethodInvalidOrUnsupported: i32 = -200765;
pub const DAQmxErrorTEDSLinearMappingSlopeZero: i32 = -200764;
pub const DAQmxErrorAIInputBufferSizeNotMultOfXferSize: i32 = -200763;
pub const DAQmxErrorNoSyncPulseExtSampClkTimebase: i32 = -200762;
pub const DAQmxErrorNoSyncPulseAnotherTaskRunning: i32 = -200761;
pub const DAQmxErrorAOMinMaxNotInGainRange: i32 = -200760;
pub const DAQmxErrorAOMinMaxNotInDACRange: i32 = -200759;
pub const DAQmxErrorDevOnlySupportsSampClkTimingAO: i32 = -200758;
pub const DAQmxErrorDevOnlySupportsSampClkTimingAI: i32 = -200757;
pub const DAQmxErrorTEDSIncompatibleSensorAndMeasType: i32 = -200756;
pub const DAQmxErrorTEDSMultipleCalTemplatesNotSupported: i32 = -200755;
pub const DAQmxErrorTEDSTemplateParametersNotSupported: i32 = -200754;
pub const DAQmxErrorParsingTEDSData: i32 = -200753;
pub const DAQmxErrorMultipleActivePhysChansNotSupported: i32 = -200752;
pub const DAQmxErrorNoChansSpecdForChangeDetect: i32 = -200751;
pub const DAQmxErrorInvalidCalVoltageForGivenGain: i32 = -200750;
pub const DAQmxErrorInvalidCalGain: i32 = -200749;
pub const DAQmxErrorMultipleWritesBetweenSampClks: i32 = -200748;
pub const DAQmxErrorInvalidAcqTypeForFREQOUT: i32 = -200747;
pub const DAQmxErrorSuitableTimebaseNotFoundTimeCombo2: i32 = -200746;
pub const DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo2: i32 = -200745;
pub const DAQmxErrorRefClkRateRefClkSrcMismatch: i32 = -200744;
pub const DAQmxErrorNoTEDSTerminalBlock: i32 = -200743;
pub const DAQmxErrorCorruptedTEDSMemory: i32 = -200742;
pub const DAQmxErrorTEDSNotSupported: i32 = -200741;
pub const DAQmxErrorTimingSrcTaskStartedBeforeTimedLoop: i32 = -200740;
pub const DAQmxErrorPropertyNotSupportedForTimingSrc: i32 = -200739;
pub const DAQmxErrorTimingSrcDoesNotExist: i32 = -200738;
pub const DAQmxErrorInputBufferSizeNotEqualSampsPerChanForFiniteSampMode: i32 = -200737;
pub const DAQmxErrorFREQOUTCannotProduceDesiredFrequency2: i32 = -200736;
pub const DAQmxErrorExtRefClkRateNotSpecified: i32 = -200735;
pub const DAQmxErrorDeviceDoesNotSupportDMADataXferForNonBufferedAcq: i32 = -200734;
pub const DAQmxErrorDigFilterMinPulseWidthSetWhenTristateIsFalse: i32 = -200733;
pub const DAQmxErrorDigFilterEnableSetWhenTristateIsFalse: i32 = -200732;
pub const DAQmxErrorNoHWTimingWithOnDemand: i32 = -200731;
pub const DAQmxErrorCannotDetectChangesWhenTristateIsFalse: i32 = -200730;
pub const DAQmxErrorCannotHandshakeWhenTristateIsFalse: i32 = -200729;
pub const DAQmxErrorLinesUsedForStaticInputNotForHandshakingControl: i32 = -200728;
pub const DAQmxErrorLinesUsedForHandshakingControlNotForStaticInput: i32 = -200727;
pub const DAQmxErrorLinesUsedForStaticInputNotForHandshakingInput: i32 = -200726;
pub const DAQmxErrorLinesUsedForHandshakingInputNotForStaticInput: i32 = -200725;
pub const DAQmxErrorDifferentDITristateValsForChansInTask: i32 = -200724;
pub const DAQmxErrorTimebaseCalFreqVarianceTooLarge: i32 = -200723;
pub const DAQmxErrorTimebaseCalFailedToConverge: i32 = -200722;
pub const DAQmxErrorInadequateResolutionForTimebaseCal: i32 = -200721;
pub const DAQmxErrorInvalidAOGainCalConst: i32 = -200720;
pub const DAQmxErrorInvalidAOOffsetCalConst: i32 = -200719;
pub const DAQmxErrorInvalidAIGainCalConst: i32 = -200718;
pub const DAQmxErrorInvalidAIOffsetCalConst: i32 = -200717;
pub const DAQmxErrorDigOutputOverrun: i32 = -200716;
pub const DAQmxErrorDigInputOverrun: i32 = -200715;
pub const DAQmxErrorAcqStoppedDriverCantXferDataFastEnough: i32 = -200714;
pub const DAQmxErrorChansCantAppearInSameTask: i32 = -200713;
pub const DAQmxErrorInputCfgFailedBecauseWatchdogExpired: i32 = -200712;
pub const DAQmxErrorAnalogTrigChanNotExternal: i32 = -200711;
pub const DAQmxErrorTooManyChansForInternalAIInputSrc: i32 = -200710;
pub const DAQmxErrorTEDSSensorNotDetected: i32 = -200709;
pub const DAQmxErrorPrptyGetSpecdActiveItemFailedDueToDifftValues: i32 = -200708;
pub const DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2: i32 = -200706;
pub const DAQmxErrorRoutingDestTermPXIStarXNotInSlot2: i32 = -200705;
pub const DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2: i32 = -200704;
pub const DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove: i32 = -200703;
pub const DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove: i32 = -200702;
pub const DAQmxErrorRoutingDestTermPXIStarInSlot2: i32 = -200701;
pub const DAQmxErrorRoutingSrcTermPXIStarInSlot2: i32 = -200700;
pub const DAQmxErrorRoutingDestTermPXIChassisNotIdentified: i32 = -200699;
pub const DAQmxErrorRoutingSrcTermPXIChassisNotIdentified: i32 = -200698;
pub const DAQmxErrorFailedToAcquireCalData: i32 = -200697;
pub const DAQmxErrorBridgeOffsetNullingCalNotSupported: i32 = -200696;
pub const DAQmxErrorAIMaxNotSpecified: i32 = -200695;
pub const DAQmxErrorAIMinNotSpecified: i32 = -200694;
pub const DAQmxErrorOddTotalBufferSizeToWrite: i32 = -200693;
pub const DAQmxErrorOddTotalNumSampsToWrite: i32 = -200692;
pub const DAQmxErrorBufferWithWaitMode: i32 = -200691;
pub const DAQmxErrorBufferWithHWTimedSinglePointSampMode: i32 = -200690;
pub const DAQmxErrorCOWritePulseLowTicksNotSupported: i32 = -200689;
pub const DAQmxErrorCOWritePulseHighTicksNotSupported: i32 = -200688;
pub const DAQmxErrorCOWritePulseLowTimeOutOfRange: i32 = -200687;
pub const DAQmxErrorCOWritePulseHighTimeOutOfRange: i32 = -200686;
pub const DAQmxErrorCOWriteFreqOutOfRange: i32 = -200685;
pub const DAQmxErrorCOWriteDutyCycleOutOfRange: i32 = -200684;
pub const DAQmxErrorInvalidInstallation: i32 = -200683;
pub const DAQmxErrorRefTrigMasterSessionUnavailable: i32 = -200682;
pub const DAQmxErrorRouteFailedBecauseWatchdogExpired: i32 = -200681;
pub const DAQmxErrorDeviceShutDownDueToHighTemp: i32 = -200680;
pub const DAQmxErrorNoMemMapWhenHWTimedSinglePoint: i32 = -200679;
pub const DAQmxErrorWriteFailedBecauseWatchdogExpired: i32 = -200678;
pub const DAQmxErrorDifftInternalAIInputSrcs: i32 = -200677;
pub const DAQmxErrorDifftAIInputSrcInOneChanGroup: i32 = -200676;
pub const DAQmxErrorInternalAIInputSrcInMultChanGroups: i32 = -200675;
pub const DAQmxErrorSwitchOpFailedDueToPrevError: i32 = -200674;
pub const DAQmxErrorWroteMultiSampsUsingSingleSampWrite: i32 = -200673;
pub const DAQmxErrorMismatchedInputArraySizes: i32 = -200672;
pub const DAQmxErrorCantExceedRelayDriveLimit: i32 = -200671;
pub const DAQmxErrorDACRngLowNotEqualToMinusRefVal: i32 = -200670;
pub const DAQmxErrorCantAllowConnectDACToGnd: i32 = -200669;
pub const DAQmxErrorWatchdogTimeoutOutOfRangeAndNotSpecialVal: i32 = -200668;
pub const DAQmxErrorNoWatchdogOutputOnPortReservedForInput: i32 = -200667;
pub const DAQmxErrorNoInputOnPortCfgdForWatchdogOutput: i32 = -200666;
pub const DAQmxErrorWatchdogExpirationStateNotEqualForLinesInPort: i32 = -200665;
pub const DAQmxErrorCannotPerformOpWhenTaskNotReserved: i32 = -200664;
pub const DAQmxErrorPowerupStateNotSupported: i32 = -200663;
pub const DAQmxErrorWatchdogTimerNotSupported: i32 = -200662;
pub const DAQmxErrorOpNotSupportedWhenRefClkSrcNone: i32 = -200661;
pub const DAQmxErrorSampClkRateUnavailable: i32 = -200660;
pub const DAQmxErrorPrptyGetSpecdSingleActiveChanFailedDueToDifftVals: i32 = -200659;
pub const DAQmxErrorPrptyGetImpliedActiveChanFailedDueToDifftVals: i32 = -200658;
pub const DAQmxErrorPrptyGetSpecdActiveChanFailedDueToDifftVals: i32 = -200657;
pub const DAQmxErrorNoRegenWhenUsingBrdMem: i32 = -200656;
pub const DAQmxErrorNonbufferedReadMoreThanSampsPerChan: i32 = -200655;
pub const DAQmxErrorWatchdogExpirationTristateNotSpecdForEntirePort: i32 = -200654;
pub const DAQmxErrorPowerupTristateNotSpecdForEntirePort: i32 = -200653;
pub const DAQmxErrorPowerupStateNotSpecdForEntirePort: i32 = -200652;
pub const DAQmxErrorCantSetWatchdogExpirationOnDigInChan: i32 = -200651;
pub const DAQmxErrorCantSetPowerupStateOnDigInChan: i32 = -200650;
pub const DAQmxErrorPhysChanNotInTask: i32 = -200649;
pub const DAQmxErrorPhysChanDevNotInTask: i32 = -200648;
pub const DAQmxErrorDigInputNotSupported: i32 = -200647;
pub const DAQmxErrorDigFilterIntervalNotEqualForLines: i32 = -200646;
pub const DAQmxErrorDigFilterIntervalAlreadyCfgd: i32 = -200645;
pub const DAQmxErrorCantResetExpiredWatchdog: i32 = -200644;
pub const DAQmxErrorActiveChanTooManyLinesSpecdWhenGettingPrpty: i32 = -200643;
pub const DAQmxErrorActiveChanNotSpecdWhenGetting1LinePrpty: i32 = -200642;
pub const DAQmxErrorDigPrptyCannotBeSetPerLine: i32 = -200641;
pub const DAQmxErrorSendAdvCmpltAfterWaitForTrigInScanlist: i32 = -200640;
pub const DAQmxErrorDisconnectionRequiredInScanlist: i32 = -200639;
pub const DAQmxErrorTwoWaitForTrigsAfterConnectionInScanlist: i32 = -200638;
pub const DAQmxErrorActionSeparatorRequiredAfterBreakingConnectionInScanlist: i32 = -200637;
pub const DAQmxErrorConnectionInScanlistMustWaitForTrig: i32 = -200636;
pub const DAQmxErrorActionNotSupportedTaskNotWatchdog: i32 = -200635;
pub const DAQmxErrorWfmNameSameAsScriptName: i32 = -200634;
pub const DAQmxErrorScriptNameSameAsWfmName: i32 = -200633;
pub const DAQmxErrorDSFStopClock: i32 = -200632;
pub const DAQmxErrorDSFReadyForStartClock: i32 = -200631;
pub const DAQmxErrorWriteOffsetNotMultOfIncr: i32 = -200630;
pub const DAQmxErrorDifferentPrptyValsNotSupportedOnDev: i32 = -200629;
pub const DAQmxErrorRefAndPauseTrigConfigured: i32 = -200628;
pub const DAQmxErrorFailedToEnableHighSpeedInputClock: i32 = -200627;
pub const DAQmxErrorEmptyPhysChanInPowerUpStatesArray: i32 = -200626;
pub const DAQmxErrorActivePhysChanTooManyLinesSpecdWhenGettingPrpty: i32 = -200625;
pub const DAQmxErrorActivePhysChanNotSpecdWhenGetting1LinePrpty: i32 = -200624;
pub const DAQmxErrorPXIDevTempCausedShutDown: i32 = -200623;
pub const DAQmxErrorInvalidNumSampsToWrite: i32 = -200622;
pub const DAQmxErrorOutputFIFOUnderflow2: i32 = -200621;
pub const DAQmxErrorRepeatedAIPhysicalChan: i32 = -200620;
pub const DAQmxErrorMultScanOpsInOneChassis: i32 = -200619;
pub const DAQmxErrorInvalidAIChanOrder: i32 = -200618;
pub const DAQmxErrorReversePowerProtectionActivated: i32 = -200617;
pub const DAQmxErrorInvalidAsynOpHandle: i32 = -200616;
pub const DAQmxErrorFailedToEnableHighSpeedOutput: i32 = -200615;
pub const DAQmxErrorCannotReadPastEndOfRecord: i32 = -200614;
pub const DAQmxErrorAcqStoppedToPreventInputBufferOverwriteOneDataXferMech: i32 = -200613;
pub const DAQmxErrorZeroBasedChanIndexInvalid: i32 = -200612;
pub const DAQmxErrorNoChansOfGivenTypeInTask: i32 = -200611;
pub const DAQmxErrorSampClkSrcInvalidForOutputValidForInput: i32 = -200610;
pub const DAQmxErrorOutputBufSizeTooSmallToStartGen: i32 = -200609;
pub const DAQmxErrorInputBufSizeTooSmallToStartAcq: i32 = -200608;
pub const DAQmxErrorExportTwoSignalsOnSameTerminal: i32 = -200607;
pub const DAQmxErrorChanIndexInvalid: i32 = -200606;
pub const DAQmxErrorRangeSyntaxNumberTooBig: i32 = -200605;
pub const DAQmxErrorNULLPtr: i32 = -200604;
pub const DAQmxErrorScaledMinEqualMax: i32 = -200603;
pub const DAQmxErrorPreScaledMinEqualMax: i32 = -200602;
pub const DAQmxErrorPropertyNotSupportedForScaleType: i32 = -200601;
pub const DAQmxErrorChannelNameGenerationNumberTooBig: i32 = -200600;
pub const DAQmxErrorRepeatedNumberInScaledValues: i32 = -200599;
pub const DAQmxErrorRepeatedNumberInPreScaledValues: i32 = -200598;
pub const DAQmxErrorLinesAlreadyReservedForOutput: i32 = -200597;
pub const DAQmxErrorSwitchOperationChansSpanMultipleDevsInList: i32 = -200596;
pub const DAQmxErrorInvalidIDInListAtBeginningOfSwitchOperation: i32 = -200595;
pub const DAQmxErrorMStudioInvalidPolyDirection: i32 = -200594;
pub const DAQmxErrorMStudioPropertyGetWhileTaskNotVerified: i32 = -200593;
pub const DAQmxErrorRangeWithTooManyObjects: i32 = -200592;
pub const DAQmxErrorCppDotNetAPINegativeBufferSize: i32 = -200591;
pub const DAQmxErrorCppCantRemoveInvalidEventHandler: i32 = -200590;
pub const DAQmxErrorCppCantRemoveEventHandlerTwice: i32 = -200589;
pub const DAQmxErrorCppCantRemoveOtherObjectsEventHandler: i32 = -200588;
pub const DAQmxErrorDigLinesReservedOrUnavailable: i32 = -200587;
pub const DAQmxErrorDSFFailedToResetStream: i32 = -200586;
pub const DAQmxErrorDSFReadyForOutputNotAsserted: i32 = -200585;
pub const DAQmxErrorSampToWritePerChanNotMultipleOfIncr: i32 = -200584;
pub const DAQmxErrorAOPropertiesCauseVoltageBelowMin: i32 = -200583;
pub const DAQmxErrorAOPropertiesCauseVoltageOverMax: i32 = -200582;
pub const DAQmxErrorPropertyNotSupportedWhenRefClkSrcNone: i32 = -200581;
pub const DAQmxErrorAIMaxTooSmall: i32 = -200580;
pub const DAQmxErrorAIMaxTooLarge: i32 = -200579;
pub const DAQmxErrorAIMinTooSmall: i32 = -200578;
pub const DAQmxErrorAIMinTooLarge: i32 = -200577;
pub const DAQmxErrorBuiltInCJCSrcNotSupported: i32 = -200576;
pub const DAQmxErrorTooManyPostTrigSampsPerChan: i32 = -200575;
pub const DAQmxErrorTrigLineNotFoundSingleDevRoute: i32 = -200574;
pub const DAQmxErrorDifferentInternalAIInputSources: i32 = -200573;
pub const DAQmxErrorDifferentAIInputSrcInOneChanGroup: i32 = -200572;
pub const DAQmxErrorInternalAIInputSrcInMultipleChanGroups: i32 = -200571;
pub const DAQmxErrorCAPIChanIndexInvalid: i32 = -200570;
pub const DAQmxErrorCollectionDoesNotMatchChanType: i32 = -200569;
pub const DAQmxErrorOutputCantStartChangedRegenerationMode: i32 = -200568;
pub const DAQmxErrorOutputCantStartChangedBufferSize: i32 = -200567;
pub const DAQmxErrorChanSizeTooBigForU32PortWrite: i32 = -200566;
pub const DAQmxErrorChanSizeTooBigForU8PortWrite: i32 = -200565;
pub const DAQmxErrorChanSizeTooBigForU32PortRead: i32 = -200564;
pub const DAQmxErrorChanSizeTooBigForU8PortRead: i32 = -200563;
pub const DAQmxErrorInvalidDigDataWrite: i32 = -200562;
pub const DAQmxErrorInvalidAODataWrite: i32 = -200561;
pub const DAQmxErrorWaitUntilDoneDoesNotIndicateDone: i32 = -200560;
pub const DAQmxErrorMultiChanTypesInTask: i32 = -200559;
pub const DAQmxErrorMultiDevsInTask: i32 = -200558;
pub const DAQmxErrorCannotSetPropertyWhenTaskRunning: i32 = -200557;
pub const DAQmxErrorCannotGetPropertyWhenTaskNotCommittedOrRunning: i32 = -200556;
pub const DAQmxErrorLeadingUnderscoreInString: i32 = -200555;
pub const DAQmxErrorTrailingSpaceInString: i32 = -200554;
pub const DAQmxErrorLeadingSpaceInString: i32 = -200553;
pub const DAQmxErrorInvalidCharInString: i32 = -200552;
pub const DAQmxErrorDLLBecameUnlocked: i32 = -200551;
pub const DAQmxErrorDLLLock: i32 = -200550;
pub const DAQmxErrorSelfCalConstsInvalid: i32 = -200549;
pub const DAQmxErrorInvalidTrigCouplingExceptForExtTrigChan: i32 = -200548;
pub const DAQmxErrorWriteFailsBufferSizeAutoConfigured: i32 = -200547;
pub const DAQmxErrorExtCalAdjustExtRefVoltageFailed: i32 = -200546;
pub const DAQmxErrorSelfCalFailedExtNoiseOrRefVoltageOutOfCal: i32 = -200545;
pub const DAQmxErrorExtCalTemperatureNotDAQmx: i32 = -200544;
pub const DAQmxErrorExtCalDateTimeNotDAQmx: i32 = -200543;
pub const DAQmxErrorSelfCalTemperatureNotDAQmx: i32 = -200542;
pub const DAQmxErrorSelfCalDateTimeNotDAQmx: i32 = -200541;
pub const DAQmxErrorDACRefValNotSet: i32 = -200540;
pub const DAQmxErrorAnalogMultiSampWriteNotSupported: i32 = -200539;
pub const DAQmxErrorInvalidActionInControlTask: i32 = -200538;
pub const DAQmxErrorPolyCoeffsInconsistent: i32 = -200537;
pub const DAQmxErrorSensorValTooLow: i32 = -200536;
pub const DAQmxErrorSensorValTooHigh: i32 = -200535;
pub const DAQmxErrorWaveformNameTooLong: i32 = -200534;
pub const DAQmxErrorIdentifierTooLongInScript: i32 = -200533;
pub const DAQmxErrorUnexpectedIDFollowingSwitchChanName: i32 = -200532;
pub const DAQmxErrorRelayNameNotSpecifiedInList: i32 = -200531;
pub const DAQmxErrorUnexpectedIDFollowingRelayNameInList: i32 = -200530;
pub const DAQmxErrorUnexpectedIDFollowingSwitchOpInList: i32 = -200529;
pub const DAQmxErrorInvalidLineGrouping: i32 = -200528;
pub const DAQmxErrorCtrMinMax: i32 = -200527;
pub const DAQmxErrorWriteChanTypeMismatch: i32 = -200526;
pub const DAQmxErrorReadChanTypeMismatch: i32 = -200525;
pub const DAQmxErrorWriteNumChansMismatch: i32 = -200524;
pub const DAQmxErrorOneChanReadForMultiChanTask: i32 = -200523;
pub const DAQmxErrorCannotSelfCalDuringExtCal: i32 = -200522;
pub const DAQmxErrorMeasCalAdjustOscillatorPhaseDAC: i32 = -200521;
pub const DAQmxErrorInvalidCalConstCalADCAdjustment: i32 = -200520;
pub const DAQmxErrorInvalidCalConstOscillatorFreqDACValue: i32 = -200519;
pub const DAQmxErrorInvalidCalConstOscillatorPhaseDACValue: i32 = -200518;
pub const DAQmxErrorInvalidCalConstOffsetDACValue: i32 = -200517;
pub const DAQmxErrorInvalidCalConstGainDACValue: i32 = -200516;
pub const DAQmxErrorInvalidNumCalADCReadsToAverage: i32 = -200515;
pub const DAQmxErrorInvalidCfgCalAdjustDirectPathOutputImpedance: i32 = -200514;
pub const DAQmxErrorInvalidCfgCalAdjustMainPathOutputImpedance: i32 = -200513;
pub const DAQmxErrorInvalidCfgCalAdjustMainPathPostAmpGainAndOffset: i32 = -200512;
pub const DAQmxErrorInvalidCfgCalAdjustMainPathPreAmpGain: i32 = -200511;
pub const DAQmxErrorInvalidCfgCalAdjustMainPreAmpOffset: i32 = -200510;
pub const DAQmxErrorMeasCalAdjustCalADC: i32 = -200509;
pub const DAQmxErrorMeasCalAdjustOscillatorFrequency: i32 = -200508;
pub const DAQmxErrorMeasCalAdjustDirectPathOutputImpedance: i32 = -200507;
pub const DAQmxErrorMeasCalAdjustMainPathOutputImpedance: i32 = -200506;
pub const DAQmxErrorMeasCalAdjustDirectPathGain: i32 = -200505;
pub const DAQmxErrorMeasCalAdjustMainPathPostAmpGainAndOffset: i32 = -200504;
pub const DAQmxErrorMeasCalAdjustMainPathPreAmpGain: i32 = -200503;
pub const DAQmxErrorMeasCalAdjustMainPathPreAmpOffset: i32 = -200502;
pub const DAQmxErrorInvalidDateTimeInEEPROM: i32 = -200501;
pub const DAQmxErrorUnableToLocateErrorResources: i32 = -200500;
pub const DAQmxErrorDotNetAPINotUnsigned32BitNumber: i32 = -200499;
pub const DAQmxErrorInvalidRangeOfObjectsSyntaxInString: i32 = -200498;
pub const DAQmxErrorAttemptToEnableLineNotPreviouslyDisabled: i32 = -200497;
pub const DAQmxErrorInvalidCharInPattern: i32 = -200496;
pub const DAQmxErrorIntermediateBufferFull: i32 = -200495;
pub const DAQmxErrorLoadTaskFailsBecauseNoTimingOnDev: i32 = -200494;
pub const DAQmxErrorCAPIReservedParamNotNULLNorEmpty: i32 = -200493;
pub const DAQmxErrorCAPIReservedParamNotNULL: i32 = -200492;
pub const DAQmxErrorCAPIReservedParamNotZero: i32 = -200491;
pub const DAQmxErrorSampleValueOutOfRange: i32 = -200490;
pub const DAQmxErrorChanAlreadyInTask: i32 = -200489;
pub const DAQmxErrorVirtualChanDoesNotExist: i32 = -200488;
pub const DAQmxErrorChanNotInTask: i32 = -200486;
pub const DAQmxErrorTaskNotInDataNeighborhood: i32 = -200485;
pub const DAQmxErrorCantSaveTaskWithoutReplace: i32 = -200484;
pub const DAQmxErrorCantSaveChanWithoutReplace: i32 = -200483;
pub const DAQmxErrorDevNotInTask: i32 = -200482;
pub const DAQmxErrorDevAlreadyInTask: i32 = -200481;
pub const DAQmxErrorCanNotPerformOpWhileTaskRunning: i32 = -200479;
pub const DAQmxErrorCanNotPerformOpWhenNoChansInTask: i32 = -200478;
pub const DAQmxErrorCanNotPerformOpWhenNoDevInTask: i32 = -200477;
pub const DAQmxErrorCannotPerformOpWhenTaskNotRunning: i32 = -200475;
pub const DAQmxErrorOperationTimedOut: i32 = -200474;
pub const DAQmxErrorCannotReadWhenAutoStartFalseAndTaskNotRunningOrCommitted: i32 = -200473;
pub const DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunningOrCommitted: i32 = -200472;
pub const DAQmxErrorTaskVersionNew: i32 = -200470;
pub const DAQmxErrorChanVersionNew: i32 = -200469;
pub const DAQmxErrorEmptyString: i32 = -200467;
pub const DAQmxErrorChannelSizeTooBigForPortReadType: i32 = -200466;
pub const DAQmxErrorChannelSizeTooBigForPortWriteType: i32 = -200465;
pub const DAQmxErrorExpectedNumberOfChannelsVerificationFailed: i32 = -200464;
pub const DAQmxErrorNumLinesMismatchInReadOrWrite: i32 = -200463;
pub const DAQmxErrorOutputBufferEmpty: i32 = -200462;
pub const DAQmxErrorInvalidChanName: i32 = -200461;
pub const DAQmxErrorReadNoInputChansInTask: i32 = -200460;
pub const DAQmxErrorWriteNoOutputChansInTask: i32 = -200459;
pub const DAQmxErrorPropertyNotSupportedNotInputTask: i32 = -200457;
pub const DAQmxErrorPropertyNotSupportedNotOutputTask: i32 = -200456;
pub const DAQmxErrorGetPropertyNotInputBufferedTask: i32 = -200455;
pub const DAQmxErrorGetPropertyNotOutputBufferedTask: i32 = -200454;
pub const DAQmxErrorInvalidTimeoutVal: i32 = -200453;
pub const DAQmxErrorAttributeNotSupportedInTaskContext: i32 = -200452;
pub const DAQmxErrorAttributeNotQueryableUnlessTaskIsCommitted: i32 = -200451;
pub const DAQmxErrorAttributeNotSettableWhenTaskIsRunning: i32 = -200450;
pub const DAQmxErrorDACRngLowNotMinusRefValNorZero: i32 = -200449;
pub const DAQmxErrorDACRngHighNotEqualRefVal: i32 = -200448;
pub const DAQmxErrorUnitsNotFromCustomScale: i32 = -200447;
pub const DAQmxErrorInvalidVoltageReadingDuringExtCal: i32 = -200446;
pub const DAQmxErrorCalFunctionNotSupported: i32 = -200445;
pub const DAQmxErrorInvalidPhysicalChanForCal: i32 = -200444;
pub const DAQmxErrorExtCalNotComplete: i32 = -200443;
pub const DAQmxErrorCantSyncToExtStimulusFreqDuringCal: i32 = -200442;
pub const DAQmxErrorUnableToDetectExtStimulusFreqDuringCal: i32 = -200441;
pub const DAQmxErrorInvalidCloseAction: i32 = -200440;
pub const DAQmxErrorExtCalFunctionOutsideExtCalSession: i32 = -200439;
pub const DAQmxErrorInvalidCalArea: i32 = -200438;
pub const DAQmxErrorExtCalConstsInvalid: i32 = -200437;
pub const DAQmxErrorStartTrigDelayWithExtSampClk: i32 = -200436;
pub const DAQmxErrorDelayFromSampClkWithExtConv: i32 = -200435;
pub const DAQmxErrorFewerThan2PreScaledVals: i32 = -200434;
pub const DAQmxErrorFewerThan2ScaledValues: i32 = -200433;
pub const DAQmxErrorPhysChanOutputType: i32 = -200432;
pub const DAQmxErrorPhysChanMeasType: i32 = -200431;
pub const DAQmxErrorInvalidPhysChanType: i32 = -200430;
pub const DAQmxErrorLabVIEWEmptyTaskOrChans: i32 = -200429;
pub const DAQmxErrorLabVIEWInvalidTaskOrChans: i32 = -200428;
pub const DAQmxErrorInvalidRefClkRate: i32 = -200427;
pub const DAQmxErrorInvalidExtTrigImpedance: i32 = -200426;
pub const DAQmxErrorHystTrigLevelAIMax: i32 = -200425;
pub const DAQmxErrorLineNumIncompatibleWithVideoSignalFormat: i32 = -200424;
pub const DAQmxErrorTrigWindowAIMinAIMaxCombo: i32 = -200423;
pub const DAQmxErrorTrigAIMinAIMax: i32 = -200422;
pub const DAQmxErrorHystTrigLevelAIMin: i32 = -200421;
pub const DAQmxErrorInvalidSampRateConsiderRIS: i32 = -200420;
pub const DAQmxErrorInvalidReadPosDuringRIS: i32 = -200419;
pub const DAQmxErrorImmedTrigDuringRISMode: i32 = -200418;
pub const DAQmxErrorTDCNotEnabledDuringRISMode: i32 = -200417;
pub const DAQmxErrorMultiRecWithRIS: i32 = -200416;
pub const DAQmxErrorInvalidRefClkSrc: i32 = -200415;
pub const DAQmxErrorInvalidSampClkSrc: i32 = -200414;
pub const DAQmxErrorInsufficientOnBoardMemForNumRecsAndSamps: i32 = -200413;
pub const DAQmxErrorInvalidAIAttenuation: i32 = -200412;
pub const DAQmxErrorACCouplingNotAllowedWith50OhmImpedance: i32 = -200411;
pub const DAQmxErrorInvalidRecordNum: i32 = -200410;
pub const DAQmxErrorZeroSlopeLinearScale: i32 = -200409;
pub const DAQmxErrorZeroReversePolyScaleCoeffs: i32 = -200408;
pub const DAQmxErrorZeroForwardPolyScaleCoeffs: i32 = -200407;
pub const DAQmxErrorNoReversePolyScaleCoeffs: i32 = -200406;
pub const DAQmxErrorNoForwardPolyScaleCoeffs: i32 = -200405;
pub const DAQmxErrorNoPolyScaleCoeffs: i32 = -200404;
pub const DAQmxErrorReversePolyOrderLessThanNumPtsToCompute: i32 = -200403;
pub const DAQmxErrorReversePolyOrderNotPositive: i32 = -200402;
pub const DAQmxErrorNumPtsToComputeNotPositive: i32 = -200401;
pub const DAQmxErrorWaveformLengthNotMultipleOfIncr: i32 = -200400;
pub const DAQmxErrorCAPINoExtendedErrorInfoAvailable: i32 = -200399;
pub const DAQmxErrorCVIFunctionNotFoundInDAQmxDLL: i32 = -200398;
pub const DAQmxErrorCVIFailedToLoadDAQmxDLL: i32 = -200397;
pub const DAQmxErrorNoCommonTrigLineForImmedRoute: i32 = -200396;
pub const DAQmxErrorNoCommonTrigLineForTaskRoute: i32 = -200395;
pub const DAQmxErrorF64PrptyValNotUnsignedInt: i32 = -200394;
pub const DAQmxErrorRegisterNotWritable: i32 = -200393;
pub const DAQmxErrorInvalidOutputVoltageAtSampClkRate: i32 = -200392;
pub const DAQmxErrorStrobePhaseShiftDCMBecameUnlocked: i32 = -200391;
pub const DAQmxErrorDrivePhaseShiftDCMBecameUnlocked: i32 = -200390;
pub const DAQmxErrorClkOutPhaseShiftDCMBecameUnlocked: i32 = -200389;
pub const DAQmxErrorOutputBoardClkDCMBecameUnlocked: i32 = -200388;
pub const DAQmxErrorInputBoardClkDCMBecameUnlocked: i32 = -200387;
pub const DAQmxErrorInternalClkDCMBecameUnlocked: i32 = -200386;
pub const DAQmxErrorDCMLock: i32 = -200385;
pub const DAQmxErrorDataLineReservedForDynamicOutput: i32 = -200384;
pub const DAQmxErrorInvalidRefClkSrcGivenSampClkSrc: i32 = -200383;
pub const DAQmxErrorNoPatternMatcherAvailable: i32 = -200382;
pub const DAQmxErrorInvalidDelaySampRateBelowPhaseShiftDCMThresh: i32 = -200381;
pub const DAQmxErrorStrainGageCalibration: i32 = -200380;
pub const DAQmxErrorInvalidExtClockFreqAndDivCombo: i32 = -200379;
pub const DAQmxErrorCustomScaleDoesNotExist: i32 = -200378;
pub const DAQmxErrorOnlyFrontEndChanOpsDuringScan: i32 = -200377;
pub const DAQmxErrorInvalidOptionForDigitalPortChannel: i32 = -200376;
pub const DAQmxErrorUnsupportedSignalTypeExportSignal: i32 = -200375;
pub const DAQmxErrorInvalidSignalTypeExportSignal: i32 = -200374;
pub const DAQmxErrorUnsupportedTrigTypeSendsSWTrig: i32 = -200373;
pub const DAQmxErrorInvalidTrigTypeSendsSWTrig: i32 = -200372;
pub const DAQmxErrorRepeatedPhysicalChan: i32 = -200371;
pub const DAQmxErrorResourcesInUseForRouteInTask: i32 = -200370;
pub const DAQmxErrorResourcesInUseForRoute: i32 = -200369;
pub const DAQmxErrorRouteNotSupportedByHW: i32 = -200368;
pub const DAQmxErrorResourcesInUseForExportSignalPolarity: i32 = -200367;
pub const DAQmxErrorResourcesInUseForInversionInTask: i32 = -200366;
pub const DAQmxErrorResourcesInUseForInversion: i32 = -200365;
pub const DAQmxErrorExportSignalPolarityNotSupportedByHW: i32 = -200364;
pub const DAQmxErrorInversionNotSupportedByHW: i32 = -200363;
pub const DAQmxErrorOverloadedChansExistNotRead: i32 = -200362;
pub const DAQmxErrorInputFIFOOverflow2: i32 = -200361;
pub const DAQmxErrorCJCChanNotSpecd: i32 = -200360;
pub const DAQmxErrorCtrExportSignalNotPossible: i32 = -200359;
pub const DAQmxErrorRefTrigWhenContinuous: i32 = -200358;
pub const DAQmxErrorIncompatibleSensorOutputAndDeviceInputRanges: i32 = -200357;
pub const DAQmxErrorCustomScaleNameUsed: i32 = -200356;
pub const DAQmxErrorPropertyValNotSupportedByHW: i32 = -200355;
pub const DAQmxErrorPropertyValNotValidTermName: i32 = -200354;
pub const DAQmxErrorResourcesInUseForProperty: i32 = -200353;
pub const DAQmxErrorCJCChanAlreadyUsed: i32 = -200352;
pub const DAQmxErrorForwardPolynomialCoefNotSpecd: i32 = -200351;
pub const DAQmxErrorTableScaleNumPreScaledAndScaledValsNotEqual: i32 = -200350;
pub const DAQmxErrorTableScalePreScaledValsNotSpecd: i32 = -200349;
pub const DAQmxErrorTableScaleScaledValsNotSpecd: i32 = -200348;
pub const DAQmxErrorIntermediateBufferSizeNotMultipleOfIncr: i32 = -200347;
pub const DAQmxErrorEventPulseWidthOutOfRange: i32 = -200346;
pub const DAQmxErrorEventDelayOutOfRange: i32 = -200345;
pub const DAQmxErrorSampPerChanNotMultipleOfIncr: i32 = -200344;
pub const DAQmxErrorCannotCalculateNumSampsTaskNotStarted: i32 = -200343;
pub const DAQmxErrorScriptNotInMem: i32 = -200342;
pub const DAQmxErrorOnboardMemTooSmall: i32 = -200341;
pub const DAQmxErrorReadAllAvailableDataWithoutBuffer: i32 = -200340;
pub const DAQmxErrorPulseActiveAtStart: i32 = -200339;
pub const DAQmxErrorCalTempNotSupported: i32 = -200338;
pub const DAQmxErrorDelayFromSampClkTooLong: i32 = -200337;
pub const DAQmxErrorDelayFromSampClkTooShort: i32 = -200336;
pub const DAQmxErrorAIConvRateTooHigh: i32 = -200335;
pub const DAQmxErrorDelayFromStartTrigTooLong: i32 = -200334;
pub const DAQmxErrorDelayFromStartTrigTooShort: i32 = -200333;
pub const DAQmxErrorSampRateTooHigh: i32 = -200332;
pub const DAQmxErrorSampRateTooLow: i32 = -200331;
pub const DAQmxErrorPFI0UsedForAnalogAndDigitalSrc: i32 = -200330;
pub const DAQmxErrorPrimingCfgFIFO: i32 = -200329;
pub const DAQmxErrorCannotOpenTopologyCfgFile: i32 = -200328;
pub const DAQmxErrorInvalidDTInsideWfmDataType: i32 = -200327;
pub const DAQmxErrorRouteSrcAndDestSame: i32 = -200326;
pub const DAQmxErrorReversePolynomialCoefNotSpecd: i32 = -200325;
pub const DAQmxErrorDevAbsentOrUnavailable: i32 = -200324;
pub const DAQmxErrorNoAdvTrigForMultiDevScan: i32 = -200323;
pub const DAQmxErrorInterruptsInsufficientDataXferMech: i32 = -200322;
pub const DAQmxErrorInvalidAttentuationBasedOnMinMax: i32 = -200321;
pub const DAQmxErrorCabledModuleCannotRouteSSH: i32 = -200320;
pub const DAQmxErrorCabledModuleCannotRouteConvClk: i32 = -200319;
pub const DAQmxErrorInvalidExcitValForScaling: i32 = -200318;
pub const DAQmxErrorNoDevMemForScript: i32 = -200317;
pub const DAQmxErrorScriptDataUnderflow: i32 = -200316;
pub const DAQmxErrorNoDevMemForWaveform: i32 = -200315;
pub const DAQmxErrorStreamDCMBecameUnlocked: i32 = -200314;
pub const DAQmxErrorStreamDCMLock: i32 = -200313;
pub const DAQmxErrorWaveformNotInMem: i32 = -200312;
pub const DAQmxErrorWaveformWriteOutOfBounds: i32 = -200311;
pub const DAQmxErrorWaveformPreviouslyAllocated: i32 = -200310;
pub const DAQmxErrorSampClkTbMasterTbDivNotAppropriateForSampTbSrc: i32 = -200309;
pub const DAQmxErrorSampTbRateSampTbSrcMismatch: i32 = -200308;
pub const DAQmxErrorMasterTbRateMasterTbSrcMismatch: i32 = -200307;
pub const DAQmxErrorSampsPerChanTooBig: i32 = -200306;
pub const DAQmxErrorFinitePulseTrainNotPossible: i32 = -200305;
pub const DAQmxErrorExtMasterTimebaseRateNotSpecified: i32 = -200304;
pub const DAQmxErrorExtSampClkSrcNotSpecified: i32 = -200303;
pub const DAQmxErrorInputSignalSlowerThanMeasTime: i32 = -200302;
pub const DAQmxErrorCannotUpdatePulseGenProperty: i32 = -200301;
pub const DAQmxErrorInvalidTimingType: i32 = -200300;
pub const DAQmxErrorPropertyUnavailWhenUsingOnboardMemory: i32 = -200297;
pub const DAQmxErrorCannotWriteAfterStartWithOnboardMemory: i32 = -200295;
pub const DAQmxErrorNotEnoughSampsWrittenForInitialXferRqstCondition: i32 = -200294;
pub const DAQmxErrorNoMoreSpace: i32 = -200293;
pub const DAQmxErrorSamplesCanNotYetBeWritten: i32 = -200292;
pub const DAQmxErrorGenStoppedToPreventIntermediateBufferRegenOfOldSamples: i32 = -200291;
pub const DAQmxErrorGenStoppedToPreventRegenOfOldSamples: i32 = -200290;
pub const DAQmxErrorSamplesNoLongerWriteable: i32 = -200289;
pub const DAQmxErrorSamplesWillNeverBeGenerated: i32 = -200288;
pub const DAQmxErrorNegativeWriteSampleNumber: i32 = -200287;
pub const DAQmxErrorNoAcqStarted: i32 = -200286;
pub const DAQmxErrorSamplesNotYetAvailable: i32 = -200284;
pub const DAQmxErrorAcqStoppedToPreventIntermediateBufferOverflow: i32 = -200283;
pub const DAQmxErrorNoRefTrigConfigured: i32 = -200282;
pub const DAQmxErrorCannotReadRelativeToRefTrigUntilDone: i32 = -200281;
pub const DAQmxErrorSamplesNoLongerAvailable: i32 = -200279;
pub const DAQmxErrorSamplesWillNeverBeAvailable: i32 = -200278;
pub const DAQmxErrorNegativeReadSampleNumber: i32 = -200277;
pub const DAQmxErrorExternalSampClkAndRefClkThruSameTerm: i32 = -200276;
pub const DAQmxErrorExtSampClkRateTooLowForClkIn: i32 = -200275;
pub const DAQmxErrorExtSampClkRateTooHighForBackplane: i32 = -200274;
pub const DAQmxErrorSampClkRateAndDivCombo: i32 = -200273;
pub const DAQmxErrorSampClkRateTooLowForDivDown: i32 = -200272;
pub const DAQmxErrorProductOfAOMinAndGainTooSmall: i32 = -200271;
pub const DAQmxErrorInterpolationRateNotPossible: i32 = -200270;
pub const DAQmxErrorOffsetTooLarge: i32 = -200269;
pub const DAQmxErrorOffsetTooSmall: i32 = -200268;
pub const DAQmxErrorProductOfAOMaxAndGainTooLarge: i32 = -200267;
pub const DAQmxErrorMinAndMaxNotSymmetric: i32 = -200266;
pub const DAQmxErrorInvalidAnalogTrigSrc: i32 = -200265;
pub const DAQmxErrorTooManyChansForAnalogRefTrig: i32 = -200264;
pub const DAQmxErrorTooManyChansForAnalogPauseTrig: i32 = -200263;
pub const DAQmxErrorTrigWhenOnDemandSampTiming: i32 = -200262;
pub const DAQmxErrorInconsistentAnalogTrigSettings: i32 = -200261;
pub const DAQmxErrorMemMapDataXferModeSampTimingCombo: i32 = -200260;
pub const DAQmxErrorInvalidJumperedAttr: i32 = -200259;
pub const DAQmxErrorInvalidGainBasedOnMinMax: i32 = -200258;
pub const DAQmxErrorInconsistentExcit: i32 = -200257;
pub const DAQmxErrorTopologyNotSupportedByCfgTermBlock: i32 = -200256;
pub const DAQmxErrorBuiltInTempSensorNotSupported: i32 = -200255;
pub const DAQmxErrorInvalidTerm: i32 = -200254;
pub const DAQmxErrorCannotTristateTerm: i32 = -200253;
pub const DAQmxErrorCannotTristateBusyTerm: i32 = -200252;
pub const DAQmxErrorNoDMAChansAvailable: i32 = -200251;
pub const DAQmxErrorInvalidWaveformLengthWithinLoopInScript: i32 = -200250;
pub const DAQmxErrorInvalidSubsetLengthWithinLoopInScript: i32 = -200249;
pub const DAQmxErrorMarkerPosInvalidForLoopInScript: i32 = -200248;
pub const DAQmxErrorIntegerExpectedInScript: i32 = -200247;
pub const DAQmxErrorPLLBecameUnlocked: i32 = -200246;
pub const DAQmxErrorPLLLock: i32 = -200245;
pub const DAQmxErrorDDCClkOutDCMBecameUnlocked: i32 = -200244;
pub const DAQmxErrorDDCClkOutDCMLock: i32 = -200243;
pub const DAQmxErrorClkDoublerDCMBecameUnlocked: i32 = -200242;
pub const DAQmxErrorClkDoublerDCMLock: i32 = -200241;
pub const DAQmxErrorSampClkDCMBecameUnlocked: i32 = -200240;
pub const DAQmxErrorSampClkDCMLock: i32 = -200239;
pub const DAQmxErrorSampClkTimebaseDCMBecameUnlocked: i32 = -200238;
pub const DAQmxErrorSampClkTimebaseDCMLock: i32 = -200237;
pub const DAQmxErrorAttrCannotBeReset: i32 = -200236;
pub const DAQmxErrorExplanationNotFound: i32 = -200235;
pub const DAQmxErrorWriteBufferTooSmall: i32 = -200234;
pub const DAQmxErrorSpecifiedAttrNotValid: i32 = -200233;
pub const DAQmxErrorAttrCannotBeRead: i32 = -200232;
pub const DAQmxErrorAttrCannotBeSet: i32 = -200231;
pub const DAQmxErrorNULLPtrForC_Api: i32 = -200230;
pub const DAQmxErrorReadBufferTooSmall: i32 = -200229;
pub const DAQmxErrorBufferTooSmallForString: i32 = -200228;
pub const DAQmxErrorNoAvailTrigLinesOnDevice: i32 = -200227;
pub const DAQmxErrorTrigBusLineNotAvail: i32 = -200226;
pub const DAQmxErrorCouldNotReserveRequestedTrigLine: i32 = -200225;
pub const DAQmxErrorTrigLineNotFound: i32 = -200224;
pub const DAQmxErrorSCXI1126ThreshHystCombination: i32 = -200223;
pub const DAQmxErrorAcqStoppedToPreventInputBufferOverwrite: i32 = -200222;
pub const DAQmxErrorTimeoutExceeded: i32 = -200221;
pub const DAQmxErrorInvalidDeviceID: i32 = -200220;
pub const DAQmxErrorInvalidAOChanOrder: i32 = -200219;
pub const DAQmxErrorSampleTimingTypeAndDataXferMode: i32 = -200218;
pub const DAQmxErrorBufferWithOnDemandSampTiming: i32 = -200217;
pub const DAQmxErrorBufferAndDataXferMode: i32 = -200216;
pub const DAQmxErrorMemMapAndBuffer: i32 = -200215;
pub const DAQmxErrorNoAnalogTrigHW: i32 = -200214;
pub const DAQmxErrorTooManyPretrigPlusMinPostTrigSamps: i32 = -200213;
pub const DAQmxErrorInconsistentUnitsSpecified: i32 = -200212;
pub const DAQmxErrorMultipleRelaysForSingleRelayOp: i32 = -200211;
pub const DAQmxErrorMultipleDevIDsPerChassisSpecifiedInList: i32 = -200210;
pub const DAQmxErrorDuplicateDevIDInList: i32 = -200209;
pub const DAQmxErrorInvalidRangeStatementCharInList: i32 = -200208;
pub const DAQmxErrorInvalidDeviceIDInList: i32 = -200207;
pub const DAQmxErrorTriggerPolarityConflict: i32 = -200206;
pub const DAQmxErrorCannotScanWithCurrentTopology: i32 = -200205;
pub const DAQmxErrorUnexpectedIdentifierInFullySpecifiedPathInList: i32 = -200204;
pub const DAQmxErrorSwitchCannotDriveMultipleTrigLines: i32 = -200203;
pub const DAQmxErrorInvalidRelayName: i32 = -200202;
pub const DAQmxErrorSwitchScanlistTooBig: i32 = -200201;
pub const DAQmxErrorSwitchChanInUse: i32 = -200200;
pub const DAQmxErrorSwitchNotResetBeforeScan: i32 = -200199;
pub const DAQmxErrorInvalidTopology: i32 = -200198;
pub const DAQmxErrorAttrNotSupported: i32 = -200197;
pub const DAQmxErrorUnexpectedEndOfActionsInList: i32 = -200196;
pub const DAQmxErrorPowerLimitExceeded: i32 = -200195;
pub const DAQmxErrorHWUnexpectedlyPoweredOffAndOn: i32 = -200194;
pub const DAQmxErrorSwitchOperationNotSupported: i32 = -200193;
pub const DAQmxErrorOnlyContinuousScanSupported: i32 = -200192;
pub const DAQmxErrorSwitchDifferentTopologyWhenScanning: i32 = -200191;
pub const DAQmxErrorDisconnectPathNotSameAsExistingPath: i32 = -200190;
pub const DAQmxErrorConnectionNotPermittedOnChanReservedForRouting: i32 = -200189;
pub const DAQmxErrorCannotConnectSrcChans: i32 = -200188;
pub const DAQmxErrorCannotConnectChannelToItself: i32 = -200187;
pub const DAQmxErrorChannelNotReservedForRouting: i32 = -200186;
pub const DAQmxErrorCannotConnectChansDirectly: i32 = -200185;
pub const DAQmxErrorChansAlreadyConnected: i32 = -200184;
pub const DAQmxErrorChanDuplicatedInPath: i32 = -200183;
pub const DAQmxErrorNoPathToDisconnect: i32 = -200182;
pub const DAQmxErrorInvalidSwitchChan: i32 = -200181;
pub const DAQmxErrorNoPathAvailableBetween2SwitchChans: i32 = -200180;
pub const DAQmxErrorExplicitConnectionExists: i32 = -200179;
pub const DAQmxErrorSwitchDifferentSettlingTimeWhenScanning: i32 = -200178;
pub const DAQmxErrorOperationOnlyPermittedWhileScanning: i32 = -200177;
pub const DAQmxErrorOperationNotPermittedWhileScanning: i32 = -200176;
pub const DAQmxErrorHardwareNotResponding: i32 = -200175;
pub const DAQmxErrorInvalidSampAndMasterTimebaseRateCombo: i32 = -200173;
pub const DAQmxErrorNonZeroBufferSizeInProgIOXfer: i32 = -200172;
pub const DAQmxErrorVirtualChanNameUsed: i32 = -200171;
pub const DAQmxErrorPhysicalChanDoesNotExist: i32 = -200170;
pub const DAQmxErrorMemMapOnlyForProgIOXfer: i32 = -200169;
pub const DAQmxErrorTooManyChans: i32 = -200168;
pub const DAQmxErrorCannotHaveCJTempWithOtherChans: i32 = -200167;
pub const DAQmxErrorOutputBufferUnderwrite: i32 = -200166;
pub const DAQmxErrorSensorInvalidCompletionResistance: i32 = -200163;
pub const DAQmxErrorVoltageExcitIncompatibleWith2WireCfg: i32 = -200162;
pub const DAQmxErrorIntExcitSrcNotAvailable: i32 = -200161;
pub const DAQmxErrorCannotCreateChannelAfterTaskVerified: i32 = -200160;
pub const DAQmxErrorLinesReservedForSCXIControl: i32 = -200159;
pub const DAQmxErrorCouldNotReserveLinesForSCXIControl: i32 = -200158;
pub const DAQmxErrorCalibrationFailed: i32 = -200157;
pub const DAQmxErrorReferenceFrequencyInvalid: i32 = -200156;
pub const DAQmxErrorReferenceResistanceInvalid: i32 = -200155;
pub const DAQmxErrorReferenceCurrentInvalid: i32 = -200154;
pub const DAQmxErrorReferenceVoltageInvalid: i32 = -200153;
pub const DAQmxErrorEEPROMDataInvalid: i32 = -200152;
pub const DAQmxErrorCabledModuleNotCapableOfRoutingAI: i32 = -200151;
pub const DAQmxErrorChannelNotAvailableInParallelMode: i32 = -200150;
pub const DAQmxErrorExternalTimebaseRateNotKnownForDelay: i32 = -200149;
pub const DAQmxErrorFREQOUTCannotProduceDesiredFrequency: i32 = -200148;
pub const DAQmxErrorMultipleCounterInputTask: i32 = -200147;
pub const DAQmxErrorCounterStartPauseTriggerConflict: i32 = -200146;
pub const DAQmxErrorCounterInputPauseTriggerAndSampleClockInvalid: i32 = -200145;
pub const DAQmxErrorCounterOutputPauseTriggerInvalid: i32 = -200144;
pub const DAQmxErrorCounterTimebaseRateNotSpecified: i32 = -200143;
pub const DAQmxErrorCounterTimebaseRateNotFound: i32 = -200142;
pub const DAQmxErrorCounterOverflow: i32 = -200141;
pub const DAQmxErrorCounterNoTimebaseEdgesBetweenGates: i32 = -200140;
pub const DAQmxErrorCounterMaxMinRangeFreq: i32 = -200139;
pub const DAQmxErrorCounterMaxMinRangeTime: i32 = -200138;
pub const DAQmxErrorSuitableTimebaseNotFoundTimeCombo: i32 = -200137;
pub const DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo: i32 = -200136;
pub const DAQmxErrorInternalTimebaseSourceDivisorCombo: i32 = -200135;
pub const DAQmxErrorInternalTimebaseSourceRateCombo: i32 = -200134;
pub const DAQmxErrorInternalTimebaseRateDivisorSourceCombo: i32 = -200133;
pub const DAQmxErrorExternalTimebaseRateNotknownForRate: i32 = -200132;
pub const DAQmxErrorAnalogTrigChanNotFirstInScanList: i32 = -200131;
pub const DAQmxErrorNoDivisorForExternalSignal: i32 = -200130;
pub const DAQmxErrorAttributeInconsistentAcrossRepeatedPhysicalChannels: i32 = -200128;
pub const DAQmxErrorCannotHandshakeWithPort0: i32 = -200127;
pub const DAQmxErrorControlLineConflictOnPortC: i32 = -200126;
pub const DAQmxErrorLines4To7ConfiguredForOutput: i32 = -200125;
pub const DAQmxErrorLines4To7ConfiguredForInput: i32 = -200124;
pub const DAQmxErrorLines0To3ConfiguredForOutput: i32 = -200123;
pub const DAQmxErrorLines0To3ConfiguredForInput: i32 = -200122;
pub const DAQmxErrorPortConfiguredForOutput: i32 = -200121;
pub const DAQmxErrorPortConfiguredForInput: i32 = -200120;
pub const DAQmxErrorPortConfiguredForStaticDigitalOps: i32 = -200119;
pub const DAQmxErrorPortReservedForHandshaking: i32 = -200118;
pub const DAQmxErrorPortDoesNotSupportHandshakingDataIO: i32 = -200117;
pub const DAQmxErrorCannotTristate8255OutputLines: i32 = -200116;
pub const DAQmxErrorTemperatureOutOfRangeForCalibration: i32 = -200113;
pub const DAQmxErrorCalibrationHandleInvalid: i32 = -200112;
pub const DAQmxErrorPasswordRequired: i32 = -200111;
pub const DAQmxErrorIncorrectPassword: i32 = -200110;
pub const DAQmxErrorPasswordTooLong: i32 = -200109;
pub const DAQmxErrorCalibrationSessionAlreadyOpen: i32 = -200108;
pub const DAQmxErrorSCXIModuleIncorrect: i32 = -200107;
pub const DAQmxErrorAttributeInconsistentAcrossChannelsOnDevice: i32 = -200106;
pub const DAQmxErrorSCXI1122ResistanceChanNotSupportedForCfg: i32 = -200105;
pub const DAQmxErrorBracketPairingMismatchInList: i32 = -200104;
pub const DAQmxErrorInconsistentNumSamplesToWrite: i32 = -200103;
pub const DAQmxErrorIncorrectDigitalPattern: i32 = -200102;
pub const DAQmxErrorIncorrectNumChannelsToWrite: i32 = -200101;
pub const DAQmxErrorIncorrectReadFunction: i32 = -200100;
pub const DAQmxErrorPhysicalChannelNotSpecified: i32 = -200099;
pub const DAQmxErrorMoreThanOneTerminal: i32 = -200098;
pub const DAQmxErrorMoreThanOneActiveChannelSpecified: i32 = -200097;
pub const DAQmxErrorInvalidNumberSamplesToRead: i32 = -200096;
pub const DAQmxErrorAnalogWaveformExpected: i32 = -200095;
pub const DAQmxErrorDigitalWaveformExpected: i32 = -200094;
pub const DAQmxErrorActiveChannelNotSpecified: i32 = -200093;
pub const DAQmxErrorFunctionNotSupportedForDeviceTasks: i32 = -200092;
pub const DAQmxErrorFunctionNotInLibrary: i32 = -200091;
pub const DAQmxErrorLibraryNotPresent: i32 = -200090;
pub const DAQmxErrorDuplicateTask: i32 = -200089;
pub const DAQmxErrorInvalidTask: i32 = -200088;
pub const DAQmxErrorInvalidChannel: i32 = -200087;
pub const DAQmxErrorInvalidSyntaxForPhysicalChannelRange: i32 = -200086;
pub const DAQmxErrorMinNotLessThanMax: i32 = -200082;
pub const DAQmxErrorSampleRateNumChansConvertPeriodCombo: i32 = -200081;
pub const DAQmxErrorAODuringCounter1DMAConflict: i32 = -200079;
pub const DAQmxErrorAIDuringCounter0DMAConflict: i32 = -200078;
pub const DAQmxErrorInvalidAttributeValue: i32 = -200077;
pub const DAQmxErrorSuppliedCurrentDataOutsideSpecifiedRange: i32 = -200076;
pub const DAQmxErrorSuppliedVoltageDataOutsideSpecifiedRange: i32 = -200075;
pub const DAQmxErrorCannotStoreCalConst: i32 = -200074;
pub const DAQmxErrorSCXIModuleNotFound: i32 = -200073;
pub const DAQmxErrorDuplicatePhysicalChansNotSupported: i32 = -200072;
pub const DAQmxErrorTooManyPhysicalChansInList: i32 = -200071;
pub const DAQmxErrorInvalidAdvanceEventTriggerType: i32 = -200070;
pub const DAQmxErrorDeviceIsNotAValidSwitch: i32 = -200069;
pub const DAQmxErrorDeviceDoesNotSupportScanning: i32 = -200068;
pub const DAQmxErrorScanListCannotBeTimed: i32 = -200067;
pub const DAQmxErrorConnectOperatorInvalidAtPointInList: i32 = -200066;
pub const DAQmxErrorUnexpectedSwitchActionInList: i32 = -200065;
pub const DAQmxErrorUnexpectedSeparatorInList: i32 = -200064;
pub const DAQmxErrorExpectedTerminatorInList: i32 = -200063;
pub const DAQmxErrorExpectedConnectOperatorInList: i32 = -200062;
pub const DAQmxErrorExpectedSeparatorInList: i32 = -200061;
pub const DAQmxErrorFullySpecifiedPathInListContainsRange: i32 = -200060;
pub const DAQmxErrorConnectionSeparatorAtEndOfList: i32 = -200059;
pub const DAQmxErrorIdentifierInListTooLong: i32 = -200058;
pub const DAQmxErrorDuplicateDeviceIDInListWhenSettling: i32 = -200057;
pub const DAQmxErrorChannelNameNotSpecifiedInList: i32 = -200056;
pub const DAQmxErrorDeviceIDNotSpecifiedInList: i32 = -200055;
pub const DAQmxErrorSemicolonDoesNotFollowRangeInList: i32 = -200054;
pub const DAQmxErrorSwitchActionInListSpansMultipleDevices: i32 = -200053;
pub const DAQmxErrorRangeWithoutAConnectActionInList: i32 = -200052;
pub const DAQmxErrorInvalidIdentifierFollowingSeparatorInList: i32 = -200051;
pub const DAQmxErrorInvalidChannelNameInList: i32 = -200050;
pub const DAQmxErrorInvalidNumberInRepeatStatementInList: i32 = -200049;
pub const DAQmxErrorInvalidTriggerLineInList: i32 = -200048;
pub const DAQmxErrorInvalidIdentifierInListFollowingDeviceID: i32 = -200047;
pub const DAQmxErrorInvalidIdentifierInListAtEndOfSwitchAction: i32 = -200046;
pub const DAQmxErrorDeviceRemoved: i32 = -200045;
pub const DAQmxErrorRoutingPathNotAvailable: i32 = -200044;
pub const DAQmxErrorRoutingHardwareBusy: i32 = -200043;
pub const DAQmxErrorRequestedSignalInversionForRoutingNotPossible: i32 = -200042;
pub const DAQmxErrorInvalidRoutingDestinationTerminalName: i32 = -200041;
pub const DAQmxErrorInvalidRoutingSourceTerminalName: i32 = -200040;
pub const DAQmxErrorRoutingNotSupportedForDevice: i32 = -200039;
pub const DAQmxErrorWaitIsLastInstructionOfLoopInScript: i32 = -200038;
pub const DAQmxErrorClearIsLastInstructionOfLoopInScript: i32 = -200037;
pub const DAQmxErrorInvalidLoopIterationsInScript: i32 = -200036;
pub const DAQmxErrorRepeatLoopNestingTooDeepInScript: i32 = -200035;
pub const DAQmxErrorMarkerPositionOutsideSubsetInScript: i32 = -200034;
pub const DAQmxErrorSubsetStartOffsetNotAlignedInScript: i32 = -200033;
pub const DAQmxErrorInvalidSubsetLengthInScript: i32 = -200032;
pub const DAQmxErrorMarkerPositionNotAlignedInScript: i32 = -200031;
pub const DAQmxErrorSubsetOutsideWaveformInScript: i32 = -200030;
pub const DAQmxErrorMarkerOutsideWaveformInScript: i32 = -200029;
pub const DAQmxErrorWaveformInScriptNotInMem: i32 = -200028;
pub const DAQmxErrorKeywordExpectedInScript: i32 = -200027;
pub const DAQmxErrorBufferNameExpectedInScript: i32 = -200026;
pub const DAQmxErrorProcedureNameExpectedInScript: i32 = -200025;
pub const DAQmxErrorScriptHasInvalidIdentifier: i32 = -200024;
pub const DAQmxErrorScriptHasInvalidCharacter: i32 = -200023;
pub const DAQmxErrorResourceAlreadyReserved: i32 = -200022;
pub const DAQmxErrorSelfTestFailed: i32 = -200020;
pub const DAQmxErrorADCOverrun: i32 = -200019;
pub const DAQmxErrorDACUnderflow: i32 = -200018;
pub const DAQmxErrorInputFIFOUnderflow: i32 = -200017;
pub const DAQmxErrorOutputFIFOUnderflow: i32 = -200016;
pub const DAQmxErrorSCXISerialCommunication: i32 = -200015;
pub const DAQmxErrorDigitalTerminalSpecifiedMoreThanOnce: i32 = -200014;
pub const DAQmxErrorDigitalOutputNotSupported: i32 = -200012;
pub const DAQmxErrorInconsistentChannelDirections: i32 = -200011;
pub const DAQmxErrorInputFIFOOverflow: i32 = -200010;
pub const DAQmxErrorTimeStampOverwritten: i32 = -200009;
pub const DAQmxErrorStopTriggerHasNotOccurred: i32 = -200008;
pub const DAQmxErrorRecordNotAvailable: i32 = -200007;
pub const DAQmxErrorRecordOverwritten: i32 = -200006;
pub const DAQmxErrorDataNotAvailable: i32 = -200005;
pub const DAQmxErrorDataOverwrittenInDeviceMemory: i32 = -200004;
pub const DAQmxErrorDuplicatedChannel: i32 = -200003;
pub const DAQmxWarningTimestampCounterRolledOver: u32 = 200003;
pub const DAQmxWarningInputTerminationOverloaded: u32 = 200004;
pub const DAQmxWarningADCOverloaded: u32 = 200005;
pub const DAQmxWarningPLLUnlocked: u32 = 200007;
pub const DAQmxWarningCounter0DMADuringAIConflict: u32 = 200008;
pub const DAQmxWarningCounter1DMADuringAOConflict: u32 = 200009;
pub const DAQmxWarningStoppedBeforeDone: u32 = 200010;
pub const DAQmxWarningRateViolatesSettlingTime: u32 = 200011;
pub const DAQmxWarningRateViolatesMaxADCRate: u32 = 200012;
pub const DAQmxWarningUserDefInfoStringTooLong: u32 = 200013;
pub const DAQmxWarningTooManyInterruptsPerSecond: u32 = 200014;
pub const DAQmxWarningPotentialGlitchDuringWrite: u32 = 200015;
pub const DAQmxWarningDevNotSelfCalibratedWithDAQmx: u32 = 200016;
pub const DAQmxWarningAISampRateTooLow: u32 = 200017;
pub const DAQmxWarningAIConvRateTooLow: u32 = 200018;
pub const DAQmxWarningReadOffsetCoercion: u32 = 200019;
pub const DAQmxWarningPretrigCoercion: u32 = 200020;
pub const DAQmxWarningSampValCoercedToMax: u32 = 200021;
pub const DAQmxWarningSampValCoercedToMin: u32 = 200022;
pub const DAQmxWarningPropertyVersionNew: u32 = 200024;
pub const DAQmxWarningUserDefinedInfoTooLong: u32 = 200025;
pub const DAQmxWarningCAPIStringTruncatedToFitBuffer: u32 = 200026;
pub const DAQmxWarningSampClkRateTooLow: u32 = 200027;
pub const DAQmxWarningPossiblyInvalidCTRSampsInFiniteDMAAcq: u32 = 200028;
pub const DAQmxWarningRISAcqCompletedSomeBinsNotFilled: u32 = 200029;
pub const DAQmxWarningPXIDevTempExceedsMaxOpTemp: u32 = 200030;
pub const DAQmxWarningOutputGainTooLowForRFFreq: u32 = 200031;
pub const DAQmxWarningOutputGainTooHighForRFFreq: u32 = 200032;
pub const DAQmxWarningMultipleWritesBetweenSampClks: u32 = 200033;
pub const DAQmxWarningDeviceMayShutDownDueToHighTemp: u32 = 200034;
pub const DAQmxWarningRateViolatesMinADCRate: u32 = 200035;
pub const DAQmxWarningSampClkRateAboveDevSpecs: u32 = 200036;
pub const DAQmxWarningCOPrevDAQmxWriteSettingsOverwrittenForHWTimedSinglePoint: u32 = 200037;
pub const DAQmxWarningLowpassFilterSettlingTimeExceedsUserTimeBetween2ADCConversions: u32 = 200038;
pub const DAQmxWarningLowpassFilterSettlingTimeExceedsDriverTimeBetween2ADCConversions: u32 =
    200039;
pub const DAQmxWarningSampClkRateViolatesSettlingTimeForGen: u32 = 200040;
pub const DAQmxWarningInvalidCalConstValueForAI: u32 = 200041;
pub const DAQmxWarningInvalidCalConstValueForAO: u32 = 200042;
pub const DAQmxWarningChanCalExpired: u32 = 200043;
pub const DAQmxWarningUnrecognizedEnumValueEncounteredInStorage: u32 = 200044;
pub const DAQmxWarningTableCRCNotCorrect: u32 = 200045;
pub const DAQmxWarningExternalCRCNotCorrect: u32 = 200046;
pub const DAQmxWarningSelfCalCRCNotCorrect: u32 = 200047;
pub const DAQmxWarningDeviceSpecExceeded: u32 = 200048;
pub const DAQmxWarningOnlyGainCalibrated: u32 = 200049;
pub const DAQmxWarningReversePowerProtectionActivated: u32 = 200050;
pub const DAQmxWarningOverVoltageProtectionActivated: u32 = 200051;
pub const DAQmxWarningBufferSizeNotMultipleOfSectorSize: u32 = 200052;
pub const DAQmxWarningSampleRateMayCauseAcqToFail: u32 = 200053;
pub const DAQmxWarningUserAreaCRCNotCorrect: u32 = 200054;
pub const DAQmxWarningPowerUpInfoCRCNotCorrect: u32 = 200055;
pub const DAQmxWarningConnectionCountHasExceededRecommendedLimit: u32 = 200056;
pub const DAQmxWarningNetworkDeviceAlreadyAdded: u32 = 200057;
pub const DAQmxWarningAccessoryConnectionCountIsInvalid: u32 = 200058;
pub const DAQmxWarningUnableToDisconnectPorts: u32 = 200059;
pub const DAQmxWarningReadRepeatedData: u32 = 200060;
pub const DAQmxWarningPXI5600_NotConfigured: u32 = 200061;
pub const DAQmxWarningPXI5661_IncorrectlyConfigured: u32 = 200062;
pub const DAQmxWarningPXIe5601_NotConfigured: u32 = 200063;
pub const DAQmxWarningPXIe5663_IncorrectlyConfigured: u32 = 200064;
pub const DAQmxWarningPXIe5663E_IncorrectlyConfigured: u32 = 200065;
pub const DAQmxWarningPXIe5603_NotConfigured: u32 = 200066;
pub const DAQmxWarningPXIe5665_5603_IncorrectlyConfigured: u32 = 200067;
pub const DAQmxWarningPXIe5667_5603_IncorrectlyConfigured: u32 = 200068;
pub const DAQmxWarningPXIe5605_NotConfigured: u32 = 200069;
pub const DAQmxWarningPXIe5665_5605_IncorrectlyConfigured: u32 = 200070;
pub const DAQmxWarningPXIe5667_5605_IncorrectlyConfigured: u32 = 200071;
pub const DAQmxWarningPXIe5606_NotConfigured: u32 = 200072;
pub const DAQmxWarningPXIe5665_5606_IncorrectlyConfigured: u32 = 200073;
pub const DAQmxWarningPXI5610_NotConfigured: u32 = 200074;
pub const DAQmxWarningPXI5610_IncorrectlyConfigured: u32 = 200075;
pub const DAQmxWarningPXIe5611_NotConfigured: u32 = 200076;
pub const DAQmxWarningPXIe5611_IncorrectlyConfigured: u32 = 200077;
pub const DAQmxWarningUSBHotfixForDAQ: u32 = 200078;
pub const DAQmxWarningNoChangeSupersededByIdleBehavior: u32 = 200079;
pub const DAQmxWarningReadNotCompleteBeforeSampClk: u32 = 209800;
pub const DAQmxWarningWriteNotCompleteBeforeSampClk: u32 = 209801;
pub const DAQmxWarningWaitForNextSampClkDetectedMissedSampClk: u32 = 209802;
pub const DAQmxWarningOutputDataTransferConditionNotSupported: u32 = 209803;
pub const DAQmxWarningTimestampMayBeInvalid: u32 = 209804;
pub const DAQmxWarningFirstSampleTimestampInaccurate: u32 = 209805;
pub const DAQmxErrorInterfaceObsoleted_Routing: i32 = -89169;
pub const DAQmxErrorRoCoServiceNotAvailable_Routing: i32 = -89168;
pub const DAQmxErrorRoutingDestTermPXIDStarXNotInSystemTimingSlot_Routing: i32 = -89167;
pub const DAQmxErrorRoutingSrcTermPXIDStarXNotInSystemTimingSlot_Routing: i32 = -89166;
pub const DAQmxErrorRoutingSrcTermPXIDStarInNonDStarTriggerSlot_Routing: i32 = -89165;
pub const DAQmxErrorRoutingDestTermPXIDStarInNonDStarTriggerSlot_Routing: i32 = -89164;
pub const DAQmxErrorRoutingDestTermPXIClk10InNotInStarTriggerSlot_Routing: i32 = -89162;
pub const DAQmxErrorRoutingDestTermPXIClk10InNotInSystemTimingSlot_Routing: i32 = -89161;
pub const DAQmxErrorRoutingDestTermPXIStarXNotInStarTriggerSlot_Routing: i32 = -89160;
pub const DAQmxErrorRoutingDestTermPXIStarXNotInSystemTimingSlot_Routing: i32 = -89159;
pub const DAQmxErrorRoutingSrcTermPXIStarXNotInStarTriggerSlot_Routing: i32 = -89158;
pub const DAQmxErrorRoutingSrcTermPXIStarXNotInSystemTimingSlot_Routing: i32 = -89157;
pub const DAQmxErrorRoutingSrcTermPXIStarInNonStarTriggerSlot_Routing: i32 = -89156;
pub const DAQmxErrorRoutingDestTermPXIStarInNonStarTriggerSlot_Routing: i32 = -89155;
pub const DAQmxErrorRoutingDestTermPXIStarInStarTriggerSlot_Routing: i32 = -89154;
pub const DAQmxErrorRoutingDestTermPXIStarInSystemTimingSlot_Routing: i32 = -89153;
pub const DAQmxErrorRoutingSrcTermPXIStarInStarTriggerSlot_Routing: i32 = -89152;
pub const DAQmxErrorRoutingSrcTermPXIStarInSystemTimingSlot_Routing: i32 = -89151;
pub const DAQmxErrorInvalidSignalModifier_Routing: i32 = -89150;
pub const DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2_Routing: i32 = -89149;
pub const DAQmxErrorRoutingDestTermPXIStarXNotInSlot2_Routing: i32 = -89148;
pub const DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2_Routing: i32 = -89147;
pub const DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove_Routing: i32 = -89146;
pub const DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove_Routing: i32 = -89145;
pub const DAQmxErrorRoutingDestTermPXIStarInSlot2_Routing: i32 = -89144;
pub const DAQmxErrorRoutingSrcTermPXIStarInSlot2_Routing: i32 = -89143;
pub const DAQmxErrorRoutingDestTermPXIChassisNotIdentified_Routing: i32 = -89142;
pub const DAQmxErrorRoutingSrcTermPXIChassisNotIdentified_Routing: i32 = -89141;
pub const DAQmxErrorTrigLineNotFoundSingleDevRoute_Routing: i32 = -89140;
pub const DAQmxErrorNoCommonTrigLineForRoute_Routing: i32 = -89139;
pub const DAQmxErrorResourcesInUseForRouteInTask_Routing: i32 = -89138;
pub const DAQmxErrorResourcesInUseForRoute_Routing: i32 = -89137;
pub const DAQmxErrorRouteNotSupportedByHW_Routing: i32 = -89136;
pub const DAQmxErrorResourcesInUseForInversionInTask_Routing: i32 = -89135;
pub const DAQmxErrorResourcesInUseForInversion_Routing: i32 = -89134;
pub const DAQmxErrorInversionNotSupportedByHW_Routing: i32 = -89133;
pub const DAQmxErrorResourcesInUseForProperty_Routing: i32 = -89132;
pub const DAQmxErrorRouteSrcAndDestSame_Routing: i32 = -89131;
pub const DAQmxErrorDevAbsentOrUnavailable_Routing: i32 = -89130;
pub const DAQmxErrorInvalidTerm_Routing: i32 = -89129;
pub const DAQmxErrorCannotTristateTerm_Routing: i32 = -89128;
pub const DAQmxErrorCannotTristateBusyTerm_Routing: i32 = -89127;
pub const DAQmxErrorCouldNotReserveRequestedTrigLine_Routing: i32 = -89126;
pub const DAQmxErrorTrigLineNotFound_Routing: i32 = -89125;
pub const DAQmxErrorRoutingPathNotAvailable_Routing: i32 = -89124;
pub const DAQmxErrorRoutingHardwareBusy_Routing: i32 = -89123;
pub const DAQmxErrorRequestedSignalInversionForRoutingNotPossible_Routing: i32 = -89122;
pub const DAQmxErrorInvalidRoutingDestinationTerminalName_Routing: i32 = -89121;
pub const DAQmxErrorInvalidRoutingSourceTerminalName_Routing: i32 = -89120;
pub const DAQmxErrorServiceLocatorNotAvailable_Routing: i32 = -88907;
pub const DAQmxErrorCouldNotConnectToServer_Routing: i32 = -88900;
pub const DAQmxErrorDeviceNameContainsSpacesOrPunctuation_Routing: i32 = -88720;
pub const DAQmxErrorDeviceNameContainsNonprintableCharacters_Routing: i32 = -88719;
pub const DAQmxErrorDeviceNameIsEmpty_Routing: i32 = -88718;
pub const DAQmxErrorDeviceNameNotFound_Routing: i32 = -88717;
pub const DAQmxErrorLocalRemoteDriverVersionMismatch_Routing: i32 = -88716;
pub const DAQmxErrorDuplicateDeviceName_Routing: i32 = -88715;
pub const DAQmxErrorRuntimeAborting_Routing: i32 = -88710;
pub const DAQmxErrorRuntimeAborted_Routing: i32 = -88709;
pub const DAQmxErrorResourceNotInPool_Routing: i32 = -88708;
pub const DAQmxErrorDriverDeviceGUIDNotFound_Routing: i32 = -88705;
pub const DAQmxErrorPALUSBTransactionError: i32 = -50808;
pub const DAQmxErrorPALIsocStreamBufferError: i32 = -50807;
pub const DAQmxErrorPALInvalidAddressComponent: i32 = -50806;
pub const DAQmxErrorPALSharingViolation: i32 = -50805;
pub const DAQmxErrorPALInvalidDeviceState: i32 = -50804;
pub const DAQmxErrorPALConnectionReset: i32 = -50803;
pub const DAQmxErrorPALConnectionAborted: i32 = -50802;
pub const DAQmxErrorPALConnectionRefused: i32 = -50801;
pub const DAQmxErrorPALBusResetOccurred: i32 = -50800;
pub const DAQmxErrorPALWaitInterrupted: i32 = -50700;
pub const DAQmxErrorPALMessageUnderflow: i32 = -50651;
pub const DAQmxErrorPALMessageOverflow: i32 = -50650;
pub const DAQmxErrorPALThreadAlreadyDead: i32 = -50604;
pub const DAQmxErrorPALThreadStackSizeNotSupported: i32 = -50603;
pub const DAQmxErrorPALThreadControllerIsNotThreadCreator: i32 = -50602;
pub const DAQmxErrorPALThreadHasNoThreadObject: i32 = -50601;
pub const DAQmxErrorPALThreadCouldNotRun: i32 = -50600;
pub const DAQmxErrorPALSyncAbandoned: i32 = -50551;
pub const DAQmxErrorPALSyncTimedOut: i32 = -50550;
pub const DAQmxErrorPALReceiverSocketInvalid: i32 = -50503;
pub const DAQmxErrorPALSocketListenerInvalid: i32 = -50502;
pub const DAQmxErrorPALSocketListenerAlreadyRegistered: i32 = -50501;
pub const DAQmxErrorPALDispatcherAlreadyExported: i32 = -50500;
pub const DAQmxErrorPALDMALinkEventMissed: i32 = -50450;
pub const DAQmxErrorPALBusError: i32 = -50413;
pub const DAQmxErrorPALRetryLimitExceeded: i32 = -50412;
pub const DAQmxErrorPALTransferOverread: i32 = -50411;
pub const DAQmxErrorPALTransferOverwritten: i32 = -50410;
pub const DAQmxErrorPALPhysicalBufferFull: i32 = -50409;
pub const DAQmxErrorPALPhysicalBufferEmpty: i32 = -50408;
pub const DAQmxErrorPALLogicalBufferFull: i32 = -50407;
pub const DAQmxErrorPALLogicalBufferEmpty: i32 = -50406;
pub const DAQmxErrorPALTransferAborted: i32 = -50405;
pub const DAQmxErrorPALTransferStopped: i32 = -50404;
pub const DAQmxErrorPALTransferInProgress: i32 = -50403;
pub const DAQmxErrorPALTransferNotInProgress: i32 = -50402;
pub const DAQmxErrorPALCommunicationsFault: i32 = -50401;
pub const DAQmxErrorPALTransferTimedOut: i32 = -50400;
pub const DAQmxErrorPALMemoryHeapNotEmpty: i32 = -50355;
pub const DAQmxErrorPALMemoryBlockCheckFailed: i32 = -50354;
pub const DAQmxErrorPALMemoryPageLockFailed: i32 = -50353;
pub const DAQmxErrorPALMemoryFull: i32 = -50352;
pub const DAQmxErrorPALMemoryAlignmentFault: i32 = -50351;
pub const DAQmxErrorPALMemoryConfigurationFault: i32 = -50350;
pub const DAQmxErrorPALDeviceInitializationFault: i32 = -50303;
pub const DAQmxErrorPALDeviceNotSupported: i32 = -50302;
pub const DAQmxErrorPALDeviceUnknown: i32 = -50301;
pub const DAQmxErrorPALDeviceNotFound: i32 = -50300;
pub const DAQmxErrorPALFeatureDisabled: i32 = -50265;
pub const DAQmxErrorPALComponentBusy: i32 = -50264;
pub const DAQmxErrorPALComponentAlreadyInstalled: i32 = -50263;
pub const DAQmxErrorPALComponentNotUnloadable: i32 = -50262;
pub const DAQmxErrorPALComponentNeverLoaded: i32 = -50261;
pub const DAQmxErrorPALComponentAlreadyLoaded: i32 = -50260;
pub const DAQmxErrorPALComponentCircularDependency: i32 = -50259;
pub const DAQmxErrorPALComponentInitializationFault: i32 = -50258;
pub const DAQmxErrorPALComponentImageCorrupt: i32 = -50257;
pub const DAQmxErrorPALFeatureNotSupported: i32 = -50256;
pub const DAQmxErrorPALFunctionNotFound: i32 = -50255;
pub const DAQmxErrorPALFunctionObsolete: i32 = -50254;
pub const DAQmxErrorPALComponentTooNew: i32 = -50253;
pub const DAQmxErrorPALComponentTooOld: i32 = -50252;
pub const DAQmxErrorPALComponentNotFound: i32 = -50251;
pub const DAQmxErrorPALVersionMismatch: i32 = -50250;
pub const DAQmxErrorPALFileFault: i32 = -50209;
pub const DAQmxErrorPALFileWriteFault: i32 = -50208;
pub const DAQmxErrorPALFileReadFault: i32 = -50207;
pub const DAQmxErrorPALFileSeekFault: i32 = -50206;
pub const DAQmxErrorPALFileCloseFault: i32 = -50205;
pub const DAQmxErrorPALFileOpenFault: i32 = -50204;
pub const DAQmxErrorPALDiskFull: i32 = -50203;
pub const DAQmxErrorPALOSFault: i32 = -50202;
pub const DAQmxErrorPALOSInitializationFault: i32 = -50201;
pub const DAQmxErrorPALOSUnsupported: i32 = -50200;
pub const DAQmxErrorPALCalculationOverflow: i32 = -50175;
pub const DAQmxErrorPALHardwareFault: i32 = -50152;
pub const DAQmxErrorPALFirmwareFault: i32 = -50151;
pub const DAQmxErrorPALSoftwareFault: i32 = -50150;
pub const DAQmxErrorPALMessageQueueFull: i32 = -50108;
pub const DAQmxErrorPALResourceAmbiguous: i32 = -50107;
pub const DAQmxErrorPALResourceBusy: i32 = -50106;
pub const DAQmxErrorPALResourceInitialized: i32 = -50105;
pub const DAQmxErrorPALResourceNotInitialized: i32 = -50104;
pub const DAQmxErrorPALResourceReserved: i32 = -50103;
pub const DAQmxErrorPALResourceNotReserved: i32 = -50102;
pub const DAQmxErrorPALResourceNotAvailable: i32 = -50101;
pub const DAQmxErrorPALResourceOwnedBySystem: i32 = -50100;
pub const DAQmxErrorPALBadToken: i32 = -50020;
pub const DAQmxErrorPALBadThreadMultitask: i32 = -50019;
pub const DAQmxErrorPALBadLibrarySpecifier: i32 = -50018;
pub const DAQmxErrorPALBadAddressSpace: i32 = -50017;
pub const DAQmxErrorPALBadWindowType: i32 = -50016;
pub const DAQmxErrorPALBadAddressClass: i32 = -50015;
pub const DAQmxErrorPALBadWriteCount: i32 = -50014;
pub const DAQmxErrorPALBadWriteOffset: i32 = -50013;
pub const DAQmxErrorPALBadWriteMode: i32 = -50012;
pub const DAQmxErrorPALBadReadCount: i32 = -50011;
pub const DAQmxErrorPALBadReadOffset: i32 = -50010;
pub const DAQmxErrorPALBadReadMode: i32 = -50009;
pub const DAQmxErrorPALBadCount: i32 = -50008;
pub const DAQmxErrorPALBadOffset: i32 = -50007;
pub const DAQmxErrorPALBadMode: i32 = -50006;
pub const DAQmxErrorPALBadDataSize: i32 = -50005;
pub const DAQmxErrorPALBadPointer: i32 = -50004;
pub const DAQmxErrorPALBadSelector: i32 = -50003;
pub const DAQmxErrorPALBadDevice: i32 = -50002;
pub const DAQmxErrorPALIrrelevantAttribute: i32 = -50001;
pub const DAQmxErrorPALValueConflict: i32 = -50000;
pub const DAQmxWarningPALValueConflict: u32 = 50000;
pub const DAQmxWarningPALIrrelevantAttribute: u32 = 50001;
pub const DAQmxWarningPALBadDevice: u32 = 50002;
pub const DAQmxWarningPALBadSelector: u32 = 50003;
pub const DAQmxWarningPALBadPointer: u32 = 50004;
pub const DAQmxWarningPALBadDataSize: u32 = 50005;
pub const DAQmxWarningPALBadMode: u32 = 50006;
pub const DAQmxWarningPALBadOffset: u32 = 50007;
pub const DAQmxWarningPALBadCount: u32 = 50008;
pub const DAQmxWarningPALBadReadMode: u32 = 50009;
pub const DAQmxWarningPALBadReadOffset: u32 = 50010;
pub const DAQmxWarningPALBadReadCount: u32 = 50011;
pub const DAQmxWarningPALBadWriteMode: u32 = 50012;
pub const DAQmxWarningPALBadWriteOffset: u32 = 50013;
pub const DAQmxWarningPALBadWriteCount: u32 = 50014;
pub const DAQmxWarningPALBadAddressClass: u32 = 50015;
pub const DAQmxWarningPALBadWindowType: u32 = 50016;
pub const DAQmxWarningPALBadThreadMultitask: u32 = 50019;
pub const DAQmxWarningPALResourceOwnedBySystem: u32 = 50100;
pub const DAQmxWarningPALResourceNotAvailable: u32 = 50101;
pub const DAQmxWarningPALResourceNotReserved: u32 = 50102;
pub const DAQmxWarningPALResourceReserved: u32 = 50103;
pub const DAQmxWarningPALResourceNotInitialized: u32 = 50104;
pub const DAQmxWarningPALResourceInitialized: u32 = 50105;
pub const DAQmxWarningPALResourceBusy: u32 = 50106;
pub const DAQmxWarningPALResourceAmbiguous: u32 = 50107;
pub const DAQmxWarningPALFirmwareFault: u32 = 50151;
pub const DAQmxWarningPALHardwareFault: u32 = 50152;
pub const DAQmxWarningPALOSUnsupported: u32 = 50200;
pub const DAQmxWarningPALOSFault: u32 = 50202;
pub const DAQmxWarningPALFunctionObsolete: u32 = 50254;
pub const DAQmxWarningPALFunctionNotFound: u32 = 50255;
pub const DAQmxWarningPALFeatureNotSupported: u32 = 50256;
pub const DAQmxWarningPALComponentInitializationFault: u32 = 50258;
pub const DAQmxWarningPALComponentAlreadyLoaded: u32 = 50260;
pub const DAQmxWarningPALComponentNotUnloadable: u32 = 50262;
pub const DAQmxWarningPALMemoryAlignmentFault: u32 = 50351;
pub const DAQmxWarningPALMemoryHeapNotEmpty: u32 = 50355;
pub const DAQmxWarningPALTransferNotInProgress: u32 = 50402;
pub const DAQmxWarningPALTransferInProgress: u32 = 50403;
pub const DAQmxWarningPALTransferStopped: u32 = 50404;
pub const DAQmxWarningPALTransferAborted: u32 = 50405;
pub const DAQmxWarningPALLogicalBufferEmpty: u32 = 50406;
pub const DAQmxWarningPALLogicalBufferFull: u32 = 50407;
pub const DAQmxWarningPALPhysicalBufferEmpty: u32 = 50408;
pub const DAQmxWarningPALPhysicalBufferFull: u32 = 50409;
pub const DAQmxWarningPALTransferOverwritten: u32 = 50410;
pub const DAQmxWarningPALTransferOverread: u32 = 50411;
pub const DAQmxWarningPALDispatcherAlreadyExported: u32 = 50500;
pub const DAQmxWarningPALSyncAbandoned: u32 = 50551;
pub type uInt8 = ::std::os::raw::c_uchar;
pub type int16 = ::std::os::raw::c_short;
pub type uInt16 = ::std::os::raw::c_ushort;
pub type int32 = ::std::os::raw::c_long;
pub type uInt32 = ::std::os::raw::c_ulong;
pub type float64 = f64;
pub type int64 = ::std::os::raw::c_longlong;
pub type uInt64 = ::std::os::raw::c_ulonglong;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct CVITime {
    pub lsb: uInt64,
    pub msb: int64,
}
#[test]
fn bindgen_test_layout_CVITime() {
    assert_eq!(
        ::std::mem::size_of::<CVITime>(),
        16usize,
        concat!("Size of: ", stringify!(CVITime))
    );
    assert_eq!(
        ::std::mem::align_of::<CVITime>(),
        4usize,
        concat!("Alignment of ", stringify!(CVITime))
    );
    fn test_field_lsb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CVITime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lsb) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CVITime),
                "::",
                stringify!(lsb)
            )
        );
    }
    test_field_lsb();
    fn test_field_msb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CVITime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).msb) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CVITime),
                "::",
                stringify!(msb)
            )
        );
    }
    test_field_msb();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CVIAbsoluteTime {
    pub cviTime: CVITime,
    pub u32Data: [uInt32; 4usize],
}
#[test]
fn bindgen_test_layout_CVIAbsoluteTime() {
    assert_eq!(
        ::std::mem::size_of::<CVIAbsoluteTime>(),
        16usize,
        concat!("Size of: ", stringify!(CVIAbsoluteTime))
    );
    assert_eq!(
        ::std::mem::align_of::<CVIAbsoluteTime>(),
        4usize,
        concat!("Alignment of ", stringify!(CVIAbsoluteTime))
    );
    fn test_field_cviTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CVIAbsoluteTime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cviTime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CVIAbsoluteTime),
                "::",
                stringify!(cviTime)
            )
        );
    }
    test_field_cviTime();
    fn test_field_u32Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CVIAbsoluteTime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u32Data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CVIAbsoluteTime),
                "::",
                stringify!(u32Data)
            )
        );
    }
    test_field_u32Data();
}
pub type bool32 = uInt32;
pub type TaskHandle = *mut ::std::os::raw::c_void;
pub type CalHandle = uInt32;
extern "C" {
    pub fn DAQmxLoadTask(
        taskName: *const ::std::os::raw::c_char,
        taskHandle: *mut TaskHandle,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTask(
        taskName: *const ::std::os::raw::c_char,
        taskHandle: *mut TaskHandle,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAddGlobalChansToTask(
        taskHandle: TaskHandle,
        channelNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxStartTask(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxStopTask(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxClearTask(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxWaitUntilTaskDone(taskHandle: TaskHandle, timeToWait: float64) -> int32;
}
extern "C" {
    pub fn DAQmxWaitForValidTimestamp(
        taskHandle: TaskHandle,
        timestampEvent: int32,
        timeout: float64,
        timestamp: *mut CVIAbsoluteTime,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxIsTaskDone(taskHandle: TaskHandle, isTaskDone: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxTaskControl(taskHandle: TaskHandle, action: int32) -> int32;
}
extern "C" {
    pub fn DAQmxGetNthTaskChannel(
        taskHandle: TaskHandle,
        index: uInt32,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetNthTaskDevice(
        taskHandle: TaskHandle,
        index: uInt32,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetTaskAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
pub type DAQmxEveryNSamplesEventCallbackPtr = ::std::option::Option<
    unsafe extern "C" fn(
        taskHandle: TaskHandle,
        everyNsamplesEventType: int32,
        nSamples: uInt32,
        callbackData: *mut ::std::os::raw::c_void,
    ) -> int32,
>;
pub type DAQmxDoneEventCallbackPtr = ::std::option::Option<
    unsafe extern "C" fn(
        taskHandle: TaskHandle,
        status: int32,
        callbackData: *mut ::std::os::raw::c_void,
    ) -> int32,
>;
pub type DAQmxSignalEventCallbackPtr = ::std::option::Option<
    unsafe extern "C" fn(
        taskHandle: TaskHandle,
        signalID: int32,
        callbackData: *mut ::std::os::raw::c_void,
    ) -> int32,
>;
extern "C" {
    pub fn DAQmxRegisterEveryNSamplesEvent(
        task: TaskHandle,
        everyNsamplesEventType: int32,
        nSamples: uInt32,
        options: uInt32,
        callbackFunction: DAQmxEveryNSamplesEventCallbackPtr,
        callbackData: *mut ::std::os::raw::c_void,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxRegisterDoneEvent(
        task: TaskHandle,
        options: uInt32,
        callbackFunction: DAQmxDoneEventCallbackPtr,
        callbackData: *mut ::std::os::raw::c_void,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxRegisterSignalEvent(
        task: TaskHandle,
        signalID: int32,
        options: uInt32,
        callbackFunction: DAQmxSignalEventCallbackPtr,
        callbackData: *mut ::std::os::raw::c_void,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIVoltageChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAICurrentChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        shuntResistorLoc: int32,
        extShuntResistorVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIVoltageRMSChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAICurrentRMSChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        shuntResistorLoc: int32,
        extShuntResistorVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIThrmcplChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        thermocoupleType: int32,
        cjcSource: int32,
        cjcVal: float64,
        cjcChannel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIRTDChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        rtdType: int32,
        resistanceConfig: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        r0: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIThrmstrChanIex(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        resistanceConfig: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        a: float64,
        b: float64,
        c: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIThrmstrChanVex(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        resistanceConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        a: float64,
        b: float64,
        c: float64,
        r1: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIFreqVoltageChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        thresholdLevel: float64,
        hysteresis: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIResistanceChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        resistanceConfig: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIStrainGageChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        strainConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        gageFactor: float64,
        initialBridgeVoltage: float64,
        nominalGageResistance: float64,
        poissonRatio: float64,
        leadWireResistance: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIRosetteStrainGageChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        rosetteType: int32,
        gageOrientation: float64,
        rosetteMeasTypes: *const int32,
        numRosetteMeasTypes: uInt32,
        strainConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        gageFactor: float64,
        nominalGageResistance: float64,
        poissonRatio: float64,
        leadWireResistance: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIForceBridgeTwoPointLinChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        firstElectricalVal: float64,
        secondElectricalVal: float64,
        electricalUnits: int32,
        firstPhysicalVal: float64,
        secondPhysicalVal: float64,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIForceBridgeTableChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        electricalVals: *const float64,
        numElectricalVals: uInt32,
        electricalUnits: int32,
        physicalVals: *const float64,
        numPhysicalVals: uInt32,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIForceBridgePolynomialChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        forwardCoeffs: *const float64,
        numForwardCoeffs: uInt32,
        reverseCoeffs: *const float64,
        numReverseCoeffs: uInt32,
        electricalUnits: int32,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIPressureBridgeTwoPointLinChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        firstElectricalVal: float64,
        secondElectricalVal: float64,
        electricalUnits: int32,
        firstPhysicalVal: float64,
        secondPhysicalVal: float64,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIPressureBridgeTableChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        electricalVals: *const float64,
        numElectricalVals: uInt32,
        electricalUnits: int32,
        physicalVals: *const float64,
        numPhysicalVals: uInt32,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIPressureBridgePolynomialChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        forwardCoeffs: *const float64,
        numForwardCoeffs: uInt32,
        reverseCoeffs: *const float64,
        numReverseCoeffs: uInt32,
        electricalUnits: int32,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAITorqueBridgeTwoPointLinChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        firstElectricalVal: float64,
        secondElectricalVal: float64,
        electricalUnits: int32,
        firstPhysicalVal: float64,
        secondPhysicalVal: float64,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAITorqueBridgeTableChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        electricalVals: *const float64,
        numElectricalVals: uInt32,
        electricalUnits: int32,
        physicalVals: *const float64,
        numPhysicalVals: uInt32,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAITorqueBridgePolynomialChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        forwardCoeffs: *const float64,
        numForwardCoeffs: uInt32,
        reverseCoeffs: *const float64,
        numReverseCoeffs: uInt32,
        electricalUnits: int32,
        physicalUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIBridgeChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        nominalBridgeResistance: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIVoltageChanWithExcit(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        bridgeConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        useExcitForScaling: bool32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAITempBuiltInSensorChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        units: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIAccelChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        sensitivity: float64,
        sensitivityUnits: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIVelocityIEPEChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        sensitivity: float64,
        sensitivityUnits: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIForceIEPEChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        sensitivity: float64,
        sensitivityUnits: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIMicrophoneChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        units: int32,
        micSensitivity: float64,
        maxSndPressLevel: float64,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIChargeChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIAccelChargeChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        sensitivity: float64,
        sensitivityUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIAccel4WireDCVoltageChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        sensitivity: float64,
        sensitivityUnits: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        useExcitForScaling: bool32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIPosLVDTChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        sensitivity: float64,
        sensitivityUnits: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        voltageExcitFreq: float64,
        ACExcitWireMode: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIPosRVDTChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        sensitivity: float64,
        sensitivityUnits: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        voltageExcitFreq: float64,
        ACExcitWireMode: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIPosEddyCurrProxProbeChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        sensitivity: float64,
        sensitivityUnits: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAIDeviceTempChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        units: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIVoltageChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAICurrentChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        shuntResistorLoc: int32,
        extShuntResistorVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIThrmcplChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        cjcSource: int32,
        cjcVal: float64,
        cjcChannel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIRTDChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        resistanceConfig: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIThrmstrChanIex(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        resistanceConfig: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIThrmstrChanVex(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        resistanceConfig: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        r1: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIResistanceChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        resistanceConfig: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIStrainGageChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        initialBridgeVoltage: float64,
        leadWireResistance: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIForceBridgeChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIPressureBridgeChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAITorqueBridgeChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIBridgeChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIVoltageChanWithExcit(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIAccelChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIForceIEPEChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        minVal: float64,
        maxVal: float64,
        units: int32,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIMicrophoneChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        units: int32,
        maxSndPressLevel: float64,
        currentExcitSource: int32,
        currentExcitVal: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIPosLVDTChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        voltageExcitFreq: float64,
        ACExcitWireMode: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTEDSAIPosRVDTChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        voltageExcitSource: int32,
        voltageExcitVal: float64,
        voltageExcitFreq: float64,
        ACExcitWireMode: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAOVoltageChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAOCurrentChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateAOFuncGenChan(
        taskHandle: TaskHandle,
        physicalChannel: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        type_: int32,
        freq: float64,
        amplitude: float64,
        offset: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateDIChan(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        nameToAssignToLines: *const ::std::os::raw::c_char,
        lineGrouping: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateDOChan(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        nameToAssignToLines: *const ::std::os::raw::c_char,
        lineGrouping: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIFreqChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        edge: int32,
        measMethod: int32,
        measTime: float64,
        divisor: uInt32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIPeriodChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        edge: int32,
        measMethod: int32,
        measTime: float64,
        divisor: uInt32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCICountEdgesChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        edge: int32,
        initialCount: uInt32,
        countDirection: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIDutyCycleChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minFreq: float64,
        maxFreq: float64,
        edge: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIPulseWidthChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        startingEdge: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCISemiPeriodChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCITwoEdgeSepChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
        firstEdge: int32,
        secondEdge: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIPulseChanFreq(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIPulseChanTime(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        units: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIPulseChanTicks(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        sourceTerminal: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCILinEncoderChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        decodingType: int32,
        ZidxEnable: bool32,
        ZidxVal: float64,
        ZidxPhase: int32,
        units: int32,
        distPerPulse: float64,
        initialPos: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIAngEncoderChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        decodingType: int32,
        ZidxEnable: bool32,
        ZidxVal: float64,
        ZidxPhase: int32,
        units: int32,
        pulsesPerRev: uInt32,
        initialAngle: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCILinVelocityChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        decodingType: int32,
        units: int32,
        distPerPulse: float64,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIAngVelocityChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        minVal: float64,
        maxVal: float64,
        decodingType: int32,
        units: int32,
        pulsesPerRev: uInt32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCIGPSTimestampChan(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        units: int32,
        syncMethod: int32,
        customScaleName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCOPulseChanFreq(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        units: int32,
        idleState: int32,
        initialDelay: float64,
        freq: float64,
        dutyCycle: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCOPulseChanTime(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        units: int32,
        idleState: int32,
        initialDelay: float64,
        lowTime: float64,
        highTime: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateCOPulseChanTicks(
        taskHandle: TaskHandle,
        counter: *const ::std::os::raw::c_char,
        nameToAssignToChannel: *const ::std::os::raw::c_char,
        sourceTerminal: *const ::std::os::raw::c_char,
        idleState: int32,
        initialDelay: int32,
        lowTicks: int32,
        highTicks: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalCalDate(
        taskHandle: TaskHandle,
        channelName: *const ::std::os::raw::c_char,
        year: *mut uInt32,
        month: *mut uInt32,
        day: *mut uInt32,
        hour: *mut uInt32,
        minute: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalCalDate(
        taskHandle: TaskHandle,
        channelName: *const ::std::os::raw::c_char,
        year: uInt32,
        month: uInt32,
        day: uInt32,
        hour: uInt32,
        minute: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalExpDate(
        taskHandle: TaskHandle,
        channelName: *const ::std::os::raw::c_char,
        year: *mut uInt32,
        month: *mut uInt32,
        day: *mut uInt32,
        hour: *mut uInt32,
        minute: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalExpDate(
        taskHandle: TaskHandle,
        channelName: *const ::std::os::raw::c_char,
        year: uInt32,
        month: uInt32,
        day: uInt32,
        hour: uInt32,
        minute: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetChanAttribute(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetChanAttribute(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        attribute: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetChanAttribute(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        attribute: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgSampClkTiming(
        taskHandle: TaskHandle,
        source: *const ::std::os::raw::c_char,
        rate: float64,
        activeEdge: int32,
        sampleMode: int32,
        sampsPerChan: uInt64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgHandshakingTiming(
        taskHandle: TaskHandle,
        sampleMode: int32,
        sampsPerChan: uInt64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgBurstHandshakingTimingImportClock(
        taskHandle: TaskHandle,
        sampleMode: int32,
        sampsPerChan: uInt64,
        sampleClkRate: float64,
        sampleClkSrc: *const ::std::os::raw::c_char,
        sampleClkActiveEdge: int32,
        pauseWhen: int32,
        readyEventActiveLevel: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgBurstHandshakingTimingExportClock(
        taskHandle: TaskHandle,
        sampleMode: int32,
        sampsPerChan: uInt64,
        sampleClkRate: float64,
        sampleClkOutpTerm: *const ::std::os::raw::c_char,
        sampleClkPulsePolarity: int32,
        pauseWhen: int32,
        readyEventActiveLevel: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgChangeDetectionTiming(
        taskHandle: TaskHandle,
        risingEdgeChan: *const ::std::os::raw::c_char,
        fallingEdgeChan: *const ::std::os::raw::c_char,
        sampleMode: int32,
        sampsPerChan: uInt64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgImplicitTiming(
        taskHandle: TaskHandle,
        sampleMode: int32,
        sampsPerChan: uInt64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgPipelinedSampClkTiming(
        taskHandle: TaskHandle,
        source: *const ::std::os::raw::c_char,
        rate: float64,
        activeEdge: int32,
        sampleMode: int32,
        sampsPerChan: uInt64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetTimingAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetTimingAttribute(taskHandle: TaskHandle, attribute: int32, ...) -> int32;
}
extern "C" {
    pub fn DAQmxResetTimingAttribute(taskHandle: TaskHandle, attribute: int32) -> int32;
}
extern "C" {
    pub fn DAQmxGetTimingAttributeEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetTimingAttributeEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        attribute: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetTimingAttributeEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        attribute: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxDisableStartTrig(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxCfgDigEdgeStartTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerEdge: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgAnlgEdgeStartTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerSlope: int32,
        triggerLevel: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgAnlgMultiEdgeStartTrig(
        taskHandle: TaskHandle,
        triggerSources: *const ::std::os::raw::c_char,
        triggerSlopeArray: *const int32,
        triggerLevelArray: *const float64,
        arraySize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgAnlgWindowStartTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerWhen: int32,
        windowTop: float64,
        windowBottom: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgTimeStartTrig(
        taskHandle: TaskHandle,
        when: CVIAbsoluteTime,
        timescale: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgDigPatternStartTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerPattern: *const ::std::os::raw::c_char,
        triggerWhen: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxDisableRefTrig(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxCfgDigEdgeRefTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerEdge: int32,
        pretriggerSamples: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgAnlgEdgeRefTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerSlope: int32,
        triggerLevel: float64,
        pretriggerSamples: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgAnlgMultiEdgeRefTrig(
        taskHandle: TaskHandle,
        triggerSources: *const ::std::os::raw::c_char,
        triggerSlopeArray: *const int32,
        triggerLevelArray: *const float64,
        pretriggerSamples: uInt32,
        arraySize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgAnlgWindowRefTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerWhen: int32,
        windowTop: float64,
        windowBottom: float64,
        pretriggerSamples: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgDigPatternRefTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerPattern: *const ::std::os::raw::c_char,
        triggerWhen: int32,
        pretriggerSamples: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetTrigAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetTrigAttribute(taskHandle: TaskHandle, attribute: int32, ...) -> int32;
}
extern "C" {
    pub fn DAQmxResetTrigAttribute(taskHandle: TaskHandle, attribute: int32) -> int32;
}
extern "C" {
    pub fn DAQmxReadAnalogF64(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut float64,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadAnalogScalarF64(
        taskHandle: TaskHandle,
        timeout: float64,
        value: *mut float64,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadBinaryI16(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut int16,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadBinaryU16(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut uInt16,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadBinaryI32(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut int32,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadBinaryU32(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut uInt32,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadDigitalU8(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut uInt8,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadDigitalU16(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut uInt16,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadDigitalU32(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut uInt32,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadDigitalScalarU32(
        taskHandle: TaskHandle,
        timeout: float64,
        value: *mut uInt32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadDigitalLines(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut uInt8,
        arraySizeInBytes: uInt32,
        sampsPerChanRead: *mut int32,
        numBytesPerSamp: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCounterF64(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        readArray: *mut float64,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCounterU32(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        readArray: *mut uInt32,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCounterF64Ex(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut float64,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCounterU32Ex(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        fillMode: bool32,
        readArray: *mut uInt32,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCounterScalarF64(
        taskHandle: TaskHandle,
        timeout: float64,
        value: *mut float64,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCounterScalarU32(
        taskHandle: TaskHandle,
        timeout: float64,
        value: *mut uInt32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCtrFreq(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        interleaved: bool32,
        readArrayFrequency: *mut float64,
        readArrayDutyCycle: *mut float64,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCtrTime(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        interleaved: bool32,
        readArrayHighTime: *mut float64,
        readArrayLowTime: *mut float64,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCtrTicks(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        interleaved: bool32,
        readArrayHighTicks: *mut uInt32,
        readArrayLowTicks: *mut uInt32,
        arraySizeInSamps: uInt32,
        sampsPerChanRead: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCtrFreqScalar(
        taskHandle: TaskHandle,
        timeout: float64,
        frequency: *mut float64,
        dutyCycle: *mut float64,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCtrTimeScalar(
        taskHandle: TaskHandle,
        timeout: float64,
        highTime: *mut float64,
        lowTime: *mut float64,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadCtrTicksScalar(
        taskHandle: TaskHandle,
        timeout: float64,
        highTicks: *mut uInt32,
        lowTicks: *mut uInt32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxReadRaw(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        timeout: float64,
        readArray: *mut ::std::os::raw::c_void,
        arraySizeInBytes: uInt32,
        sampsRead: *mut int32,
        numBytesPerSamp: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetNthTaskReadChannel(
        taskHandle: TaskHandle,
        index: uInt32,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadAttribute(taskHandle: TaskHandle, attribute: int32, ...) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadAttribute(taskHandle: TaskHandle, attribute: int32) -> int32;
}
extern "C" {
    pub fn DAQmxConfigureLogging(
        taskHandle: TaskHandle,
        filePath: *const ::std::os::raw::c_char,
        loggingMode: int32,
        groupName: *const ::std::os::raw::c_char,
        operation: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxStartNewFile(
        taskHandle: TaskHandle,
        filePath: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteAnalogF64(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const float64,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteAnalogScalarF64(
        taskHandle: TaskHandle,
        autoStart: bool32,
        timeout: float64,
        value: float64,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteBinaryI16(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const int16,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteBinaryU16(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const uInt16,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteBinaryI32(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const int32,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteBinaryU32(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const uInt32,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteDigitalU8(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const uInt8,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteDigitalU16(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const uInt16,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteDigitalU32(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const uInt32,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteDigitalScalarU32(
        taskHandle: TaskHandle,
        autoStart: bool32,
        timeout: float64,
        value: uInt32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteDigitalLines(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        writeArray: *const uInt8,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteCtrFreq(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        frequency: *const float64,
        dutyCycle: *const float64,
        numSampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteCtrFreqScalar(
        taskHandle: TaskHandle,
        autoStart: bool32,
        timeout: float64,
        frequency: float64,
        dutyCycle: float64,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteCtrTime(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        highTime: *const float64,
        lowTime: *const float64,
        numSampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteCtrTimeScalar(
        taskHandle: TaskHandle,
        autoStart: bool32,
        timeout: float64,
        highTime: float64,
        lowTime: float64,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteCtrTicks(
        taskHandle: TaskHandle,
        numSampsPerChan: int32,
        autoStart: bool32,
        timeout: float64,
        dataLayout: bool32,
        highTicks: *const uInt32,
        lowTicks: *const uInt32,
        numSampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteCtrTicksScalar(
        taskHandle: TaskHandle,
        autoStart: bool32,
        timeout: float64,
        highTicks: uInt32,
        lowTicks: uInt32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteRaw(
        taskHandle: TaskHandle,
        numSamps: int32,
        autoStart: bool32,
        timeout: float64,
        writeArray: *const ::std::os::raw::c_void,
        sampsPerChanWritten: *mut int32,
        reserved: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetWriteAttribute(taskHandle: TaskHandle, attribute: int32, ...) -> int32;
}
extern "C" {
    pub fn DAQmxResetWriteAttribute(taskHandle: TaskHandle, attribute: int32) -> int32;
}
extern "C" {
    pub fn DAQmxExportSignal(
        taskHandle: TaskHandle,
        signalID: int32,
        outputTerminal: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedSignalAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedSignalAttribute(taskHandle: TaskHandle, attribute: int32, ...) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedSignalAttribute(taskHandle: TaskHandle, attribute: int32) -> int32;
}
extern "C" {
    pub fn DAQmxCreateLinScale(
        name: *const ::std::os::raw::c_char,
        slope: float64,
        yIntercept: float64,
        preScaledUnits: int32,
        scaledUnits: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateMapScale(
        name: *const ::std::os::raw::c_char,
        prescaledMin: float64,
        prescaledMax: float64,
        scaledMin: float64,
        scaledMax: float64,
        preScaledUnits: int32,
        scaledUnits: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreatePolynomialScale(
        name: *const ::std::os::raw::c_char,
        forwardCoeffs: *const float64,
        numForwardCoeffsIn: uInt32,
        reverseCoeffs: *const float64,
        numReverseCoeffsIn: uInt32,
        preScaledUnits: int32,
        scaledUnits: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateTableScale(
        name: *const ::std::os::raw::c_char,
        prescaledVals: *const float64,
        numPrescaledValsIn: uInt32,
        scaledVals: *const float64,
        numScaledValsIn: uInt32,
        preScaledUnits: int32,
        scaledUnits: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCalculateReversePolyCoeff(
        forwardCoeffs: *const float64,
        numForwardCoeffsIn: uInt32,
        minValX: float64,
        maxValX: float64,
        numPointsToCompute: int32,
        reversePolyOrder: int32,
        reverseCoeffs: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleAttribute(
        scaleName: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleAttribute(
        scaleName: *const ::std::os::raw::c_char,
        attribute: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgInputBuffer(taskHandle: TaskHandle, numSampsPerChan: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxCfgOutputBuffer(taskHandle: TaskHandle, numSampsPerChan: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetBufferAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetBufferAttribute(taskHandle: TaskHandle, attribute: int32, ...) -> int32;
}
extern "C" {
    pub fn DAQmxResetBufferAttribute(taskHandle: TaskHandle, attribute: int32) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchCreateScanList(
        scanList: *const ::std::os::raw::c_char,
        taskHandle: *mut TaskHandle,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchConnect(
        switchChannel1: *const ::std::os::raw::c_char,
        switchChannel2: *const ::std::os::raw::c_char,
        waitForSettling: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchConnectMulti(
        connectionList: *const ::std::os::raw::c_char,
        waitForSettling: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchDisconnect(
        switchChannel1: *const ::std::os::raw::c_char,
        switchChannel2: *const ::std::os::raw::c_char,
        waitForSettling: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchDisconnectMulti(
        connectionList: *const ::std::os::raw::c_char,
        waitForSettling: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchDisconnectAll(
        deviceName: *const ::std::os::raw::c_char,
        waitForSettling: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchSetTopologyAndReset(
        deviceName: *const ::std::os::raw::c_char,
        newTopology: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchFindPath(
        switchChannel1: *const ::std::os::raw::c_char,
        switchChannel2: *const ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_char,
        pathBufferSize: uInt32,
        pathStatus: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchOpenRelays(
        relayList: *const ::std::os::raw::c_char,
        waitForSettling: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchCloseRelays(
        relayList: *const ::std::os::raw::c_char,
        waitForSettling: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchGetSingleRelayCount(
        relayName: *const ::std::os::raw::c_char,
        count: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchGetMultiRelayCount(
        relayList: *const ::std::os::raw::c_char,
        count: *mut uInt32,
        countArraySize: uInt32,
        numRelayCountsRead: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchGetSingleRelayPos(
        relayName: *const ::std::os::raw::c_char,
        relayPos: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchGetMultiRelayPos(
        relayList: *const ::std::os::raw::c_char,
        relayPos: *mut uInt32,
        relayPosArraySize: uInt32,
        numRelayPossRead: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSwitchWaitForSettling(deviceName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanAttribute(
        switchChannelName: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchChanAttribute(
        switchChannelName: *const ::std::os::raw::c_char,
        attribute: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDeviceAttribute(
        deviceName: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchDeviceAttribute(
        deviceName: *const ::std::os::raw::c_char,
        attribute: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchScanAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchScanAttribute(taskHandle: TaskHandle, attribute: int32, ...) -> int32;
}
extern "C" {
    pub fn DAQmxResetSwitchScanAttribute(taskHandle: TaskHandle, attribute: int32) -> int32;
}
extern "C" {
    pub fn DAQmxDisableAdvTrig(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxCfgDigEdgeAdvTrig(
        taskHandle: TaskHandle,
        triggerSource: *const ::std::os::raw::c_char,
        triggerEdge: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSendSoftwareTrigger(taskHandle: TaskHandle, triggerID: int32) -> int32;
}
extern "C" {
    pub fn DAQmxConnectTerms(
        sourceTerminal: *const ::std::os::raw::c_char,
        destinationTerminal: *const ::std::os::raw::c_char,
        signalModifiers: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxDisconnectTerms(
        sourceTerminal: *const ::std::os::raw::c_char,
        destinationTerminal: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxTristateOutputTerm(outputTerminal: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxResetDevice(deviceName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxSelfTestDevice(deviceName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxGetDeviceAttribute(
        deviceName: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateWatchdogTimerTask(
        deviceName: *const ::std::os::raw::c_char,
        taskName: *const ::std::os::raw::c_char,
        taskHandle: *mut TaskHandle,
        timeout: float64,
        lines: *const ::std::os::raw::c_char,
        expState: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCreateWatchdogTimerTaskEx(
        deviceName: *const ::std::os::raw::c_char,
        taskName: *const ::std::os::raw::c_char,
        taskHandle: *mut TaskHandle,
        timeout: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxControlWatchdogTask(taskHandle: TaskHandle, action: int32) -> int32;
}
extern "C" {
    pub fn DAQmxCfgWatchdogAOExpirStates(
        taskHandle: TaskHandle,
        channelNames: *const ::std::os::raw::c_char,
        expirStateArray: *const float64,
        outputTypeArray: *const int32,
        arraySize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgWatchdogCOExpirStates(
        taskHandle: TaskHandle,
        channelNames: *const ::std::os::raw::c_char,
        expirStateArray: *const int32,
        arraySize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCfgWatchdogDOExpirStates(
        taskHandle: TaskHandle,
        channelNames: *const ::std::os::raw::c_char,
        expirStateArray: *const int32,
        arraySize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogAttribute(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetWatchdogAttribute(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        attribute: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetWatchdogAttribute(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        attribute: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSelfCal(deviceName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxPerformBridgeOffsetNullingCal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxPerformBridgeOffsetNullingCalEx(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        skipUnsupportedChannels: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxPerformThrmcplLeadOffsetNullingCal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        skipUnsupportedChannels: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxPerformStrainShuntCal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        shuntResistorValue: float64,
        shuntResistorLocation: int32,
        skipUnsupportedChannels: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxPerformStrainShuntCalEx(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        shuntResistorValue: float64,
        shuntResistorLocation: int32,
        shuntResistorSelect: int32,
        shuntResistorSource: int32,
        skipUnsupportedChannels: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxPerformBridgeShuntCal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        shuntResistorValue: float64,
        shuntResistorLocation: int32,
        bridgeResistance: float64,
        skipUnsupportedChannels: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxPerformBridgeShuntCalEx(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        shuntResistorValue: float64,
        shuntResistorLocation: int32,
        shuntResistorSelect: int32,
        shuntResistorSource: int32,
        bridgeResistance: float64,
        skipUnsupportedChannels: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSelfCalLastDateAndTime(
        deviceName: *const ::std::os::raw::c_char,
        year: *mut uInt32,
        month: *mut uInt32,
        day: *mut uInt32,
        hour: *mut uInt32,
        minute: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetExtCalLastDateAndTime(
        deviceName: *const ::std::os::raw::c_char,
        year: *mut uInt32,
        month: *mut uInt32,
        day: *mut uInt32,
        hour: *mut uInt32,
        minute: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxRestoreLastExtCalConst(deviceName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxESeriesCalAdjust(calHandle: CalHandle, referenceVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxMSeriesCalAdjust(calHandle: CalHandle, referenceVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxSSeriesCalAdjust(calHandle: CalHandle, referenceVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxSCBaseboardCalAdjust(calHandle: CalHandle, referenceVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAOSeriesCalAdjust(calHandle: CalHandle, referenceVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxXSeriesCalAdjust(calHandle: CalHandle, referenceVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxDeviceSupportsCal(
        deviceName: *const ::std::os::raw::c_char,
        calSupported: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCalInfoAttribute(
        deviceName: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCalInfoAttribute(
        deviceName: *const ::std::os::raw::c_char,
        attribute: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxInitExtCal(
        deviceName: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        calHandle: *mut CalHandle,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCloseExtCal(calHandle: CalHandle, action: int32) -> int32;
}
extern "C" {
    pub fn DAQmxChangeExtCalPassword(
        deviceName: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        newPassword: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxDSASetCalTemp(calHandle: CalHandle, temperature: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjustDSAAICal(calHandle: CalHandle, referenceVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjustDSAAICalEx(
        calHandle: CalHandle,
        referenceVoltage: float64,
        inputsShorted: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjustDSAAICalWithGainAndCoupling(
        calHandle: CalHandle,
        coupling: int32,
        gain: float64,
        referenceVoltage: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjustDSAAOCal(
        calHandle: CalHandle,
        channel: uInt32,
        requestedLowVoltage: float64,
        actualLowVoltage: float64,
        requestedHighVoltage: float64,
        actualHighVoltage: float64,
        gainSetting: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4610Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
        offset: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjustDSATimebaseCal(calHandle: CalHandle, referenceFrequency: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjustDSAAOTimebaseCal(
        calHandle: CalHandle,
        measuredFrequency: float64,
        calComplete: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetupDSAAOTimebaseCal(
        calHandle: CalHandle,
        expectedFrequency: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet4463AdjustPoints(
        calHandle: CalHandle,
        terminalConfig: int32,
        gain: float64,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4463Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        referenceVoltage: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup4463Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        gain: float64,
        outputVoltage: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup4480Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        calMode: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjustTIOTimebaseCal(calHandle: CalHandle, referenceFrequency: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4204Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        lowPassFreq: float64,
        trackHoldEnabled: bool32,
        inputVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4220Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        gain: float64,
        inputVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4224Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        gain: float64,
        inputVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4225Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        gain: float64,
        inputVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup433xCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        excitationVoltage: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust433xCal(
        calHandle: CalHandle,
        refVoltage: float64,
        refExcitation: float64,
        shuntLocation: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup4339Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        calMode: int32,
        rangeMax: float64,
        rangeMin: float64,
        excitationVoltage: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4339Cal(calHandle: CalHandle, refVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxGet4339CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4300Cal(calHandle: CalHandle, refVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetup4302Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet4302CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4302Cal(calHandle: CalHandle, refVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetup4303Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet4303CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4303Cal(calHandle: CalHandle, refVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetup4304Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet4304CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4304Cal(calHandle: CalHandle, refVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetup4305Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet4305CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4305Cal(calHandle: CalHandle, refVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4309Cal(calHandle: CalHandle, refVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4310Cal(calHandle: CalHandle, refVoltage: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4353Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        refVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4357Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        refVals: *const float64,
        numRefVals: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup4322Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        outputType: int32,
        outputVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust4322Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        refVal: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet4322CalAdjustPoints(
        calHandle: CalHandle,
        outputType: int32,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxConnectSCExpressCalAccChans(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        connection: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxDisconnectSCExpressCalAccChans(calHandle: CalHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetPossibleSCExpressCalAccConnections(
        deviceName: *const ::std::os::raw::c_char,
        channelNames: *const ::std::os::raw::c_char,
        connections: *mut ::std::os::raw::c_char,
        connectionsBufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSCExpressCalAccBridgeOutput(
        calHandle: CalHandle,
        voltsPerVolt: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxFieldDAQSetCalTemp(calHandle: CalHandle, temperature: float64) -> int32;
}
extern "C" {
    pub fn DAQmxGet11601CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust11601Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet11603CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust11603Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup11605Cal(calHandle: CalHandle, rangeMin: float64, rangeMax: float64) -> int32;
}
extern "C" {
    pub fn DAQmxGet11605CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust11605Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet11613CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust11613Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet11614CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust11614Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup11634Cal(calHandle: CalHandle, rangeMin: float64, rangeMax: float64) -> int32;
}
extern "C" {
    pub fn DAQmxGet11634CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust11634Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup11637Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        bridgeConfig: int32,
        voltageExcitation: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust11637Cal(
        calHandle: CalHandle,
        value: float64,
        actualReading: *mut float64,
        asFoundGainError: *mut float64,
        asFoundOffsetError: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9201CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxCSeriesSetCalTemp(calHandle: CalHandle, temperature: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9201Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9202CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9202Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9203CalAdjustPoints(
        calHandle: CalHandle,
        rangeMin: float64,
        rangeMax: float64,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9203GainCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9203OffsetCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9205Cal(calHandle: CalHandle, value: float64) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9206Cal(calHandle: CalHandle, value: float64) -> int32;
}
extern "C" {
    pub fn DAQmxGet9207CalAdjustPoints(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9207GainCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9207OffsetCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9208CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9208GainCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9208OffsetCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9209CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9209GainCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        terminalConfig: int32,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9209OffsetCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9210Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9211Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9212CalAdjustPoints(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9212Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9213CalAdjustPoints(
        calHandle: CalHandle,
        rangeMin: float64,
        rangeMax: float64,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9213Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9214CalAdjustPoints(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9214Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9215CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9215Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9216CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9216Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9217CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9217Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9218Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
        measType: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9218CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9218Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9219Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
        measType: int32,
        bridgeConfig: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9219CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9219Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9220CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9220Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9221CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9221Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9222CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9222Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9223CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9223Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9224CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9224Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9225CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9225Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9226CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9226Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9227CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9227Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9228CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9228Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9229CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9229Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9230CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9230Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9231CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9231Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9232CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9232Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9234CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9234GainCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9234OffsetCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9238CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9238Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9239CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9239Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9242CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9242Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9242Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9244CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9244Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9244Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9246CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9246Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9247CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9247Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9250CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9250Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9251CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9251Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9252CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9252Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9253CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9253Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9260CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9260Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9260Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9262CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9262Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9262Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9263CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9263Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9263Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9264CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9264Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9264Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9265CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9265Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9265Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9266CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9266Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9266Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9269CalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9269Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9269Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9628AICalAdjustPoints(
        calHandle: CalHandle,
        rangeMin: float64,
        rangeMax: float64,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9628AICal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9629AICalAdjustPoints(
        calHandle: CalHandle,
        rangeMin: float64,
        rangeMax: float64,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9629AICal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9638AICalAdjustPoints(
        calHandle: CalHandle,
        rangeMin: float64,
        rangeMax: float64,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9638AICal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        rangeMin: float64,
        rangeMax: float64,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9628AOCalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9628AOCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9628AOCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9629AOCalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9629AOCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9629AOCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9638AOCalAdjustPoints(
        calHandle: CalHandle,
        adjustmentPoints: *mut int32,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup9638AOCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9638AOCal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGet9775CalAdjustPoints(
        calHandle: CalHandle,
        coupling: uInt32,
        adjustmentPoints: *mut float64,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust9775Cal(
        calHandle: CalHandle,
        channelNames: *const ::std::os::raw::c_char,
        value: float64,
        coupling: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1102Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1102Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1104Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1104Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1112Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1112Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1122Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1122Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1124Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        range: int32,
        dacValue: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1124Cal(calHandle: CalHandle, measOutput: float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1125Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1125Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1126Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        upperFreqLimit: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1126Cal(calHandle: CalHandle, refFreq: float64, measOutput: float64)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetup1141Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1141Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1142Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1142Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1143Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1143Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1502Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1502Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1503Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1503Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1503CurrentCal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        measCurrent: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1520Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1520Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1521Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1521Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup153xCal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        gain: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust153xCal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetup1540Cal(
        calHandle: CalHandle,
        channelName: *const ::std::os::raw::c_char,
        excitationVoltage: float64,
        excitationFreq: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAdjust1540Cal(
        calHandle: CalHandle,
        refVoltage: float64,
        measOutput: float64,
        inputCalSource: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxConfigureTEDS(
        physicalChannel: *const ::std::os::raw::c_char,
        filePath: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxClearTEDS(physicalChannel: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxWriteToTEDSFromArray(
        physicalChannel: *const ::std::os::raw::c_char,
        bitStream: *const uInt8,
        arraySize: uInt32,
        basicTEDSOptions: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWriteToTEDSFromFile(
        physicalChannel: *const ::std::os::raw::c_char,
        filePath: *const ::std::os::raw::c_char,
        basicTEDSOptions: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAttribute(
        physicalChannel: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxWaitForNextSampleClock(
        taskHandle: TaskHandle,
        timeout: float64,
        isLate: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetRealTimeAttribute(
        taskHandle: TaskHandle,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetRealTimeAttribute(taskHandle: TaskHandle, attribute: int32, ...) -> int32;
}
extern "C" {
    pub fn DAQmxResetRealTimeAttribute(taskHandle: TaskHandle, attribute: int32) -> int32;
}
extern "C" {
    pub fn DAQmxIsReadOrWriteLate(errorCode: int32) -> bool32;
}
extern "C" {
    pub fn DAQmxSaveTask(
        taskHandle: TaskHandle,
        saveAs: *const ::std::os::raw::c_char,
        author: *const ::std::os::raw::c_char,
        options: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSaveGlobalChan(
        taskHandle: TaskHandle,
        channelName: *const ::std::os::raw::c_char,
        saveAs: *const ::std::os::raw::c_char,
        author: *const ::std::os::raw::c_char,
        options: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSaveScale(
        scaleName: *const ::std::os::raw::c_char,
        saveAs: *const ::std::os::raw::c_char,
        author: *const ::std::os::raw::c_char,
        options: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxDeleteSavedTask(taskName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxDeleteSavedGlobalChan(channelName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxDeleteSavedScale(scaleName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedTaskAttribute(
        taskName: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedChanAttribute(
        channel: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedScaleAttribute(
        scaleName: *const ::std::os::raw::c_char,
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSystemInfoAttribute(
        attribute: int32,
        value: *mut ::std::os::raw::c_void,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigitalPowerUpStates(
        deviceName: *const ::std::os::raw::c_char,
        channelNames: *const ::std::os::raw::c_char,
        state: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigitalPowerUpStates(
        deviceName: *const ::std::os::raw::c_char,
        channelName: *const ::std::os::raw::c_char,
        state: *mut int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigitalPullUpPullDownStates(
        deviceName: *const ::std::os::raw::c_char,
        channelName: *const ::std::os::raw::c_char,
        state: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigitalPullUpPullDownStates(
        deviceName: *const ::std::os::raw::c_char,
        channelName: *const ::std::os::raw::c_char,
        state: *mut int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnalogPowerUpStates(
        deviceName: *const ::std::os::raw::c_char,
        channelNames: *const ::std::os::raw::c_char,
        state: float64,
        channelType: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnalogPowerUpStatesWithOutputType(
        channelNames: *const ::std::os::raw::c_char,
        stateArray: *const float64,
        channelTypeArray: *const int32,
        arraySize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnalogPowerUpStates(
        deviceName: *const ::std::os::raw::c_char,
        channelName: *const ::std::os::raw::c_char,
        state: *mut float64,
        channelType: int32,
        ...
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnalogPowerUpStatesWithOutputType(
        channelNames: *const ::std::os::raw::c_char,
        stateArray: *mut float64,
        channelTypeArray: *mut int32,
        arraySizePtr: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigitalLogicFamilyPowerUpState(
        deviceName: *const ::std::os::raw::c_char,
        logicFamily: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigitalLogicFamilyPowerUpState(
        deviceName: *const ::std::os::raw::c_char,
        logicFamily: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAddNetworkDevice(
        IPAddress: *const ::std::os::raw::c_char,
        deviceName: *const ::std::os::raw::c_char,
        attemptReservation: bool32,
        timeout: float64,
        deviceNameOut: *mut ::std::os::raw::c_char,
        deviceNameOutBufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxDeleteNetworkDevice(deviceName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxReserveNetworkDevice(
        deviceName: *const ::std::os::raw::c_char,
        overrideReservation: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxUnreserveNetworkDevice(deviceName: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxAutoConfigureCDAQSyncConnections(
        chassisDevicesPorts: *const ::std::os::raw::c_char,
        timeout: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAutoConfiguredCDAQSyncConnections(
        portList: *mut ::std::os::raw::c_char,
        portListSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAreConfiguredCDAQSyncPortsDisconnected(
        chassisDevicesPorts: *const ::std::os::raw::c_char,
        timeout: float64,
        disconnectedPortsExist: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDisconnectedCDAQSyncPorts(
        portList: *mut ::std::os::raw::c_char,
        portListSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxAddCDAQSyncConnection(portList: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxRemoveCDAQSyncConnection(portList: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxGetErrorString(
        errorCode: int32,
        errorString: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetExtendedErrorInfo(
        errorString: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    #[doc = " NI-DAQmx Specific Attribute Get/Set/Reset Function Declarations **********"]
    pub fn DAQmxGetBufInputBufSize(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetBufInputBufSize(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetBufInputBufSize(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetBufInputOnbrdBufSize(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetBufOutputBufSize(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetBufOutputBufSize(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetBufOutputBufSize(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetBufOutputOnbrdBufSize(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetBufOutputOnbrdBufSize(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetBufOutputOnbrdBufSize(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSelfCalSupported(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSelfCalLastTemp(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetExtCalRecommendedInterval(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetExtCalLastTemp(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCalUserDefinedInfo(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCalUserDefinedInfo(
        deviceName: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCalUserDefinedInfoMaxSize(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCalDevTemp(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCalAccConnectionCount(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCalAccConnectionCount(
        deviceName: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCalRecommendedAccConnectionCountLimit(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIMax(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIMax(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIMax(taskHandle: TaskHandle, channel: *const ::std::os::raw::c_char)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetAIMin(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIMin(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIMin(taskHandle: TaskHandle, channel: *const ::std::os::raw::c_char)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetAICustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAICustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAICustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIMeasType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIVoltageUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIVoltageUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIVoltageUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIVoltagedBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIVoltagedBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIVoltagedBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIVoltageACRMSUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIVoltageACRMSUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIVoltageACRMSUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAITempUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAITempUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAITempUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmcplType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIThrmcplType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIThrmcplType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmcplScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIThrmcplScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIThrmcplScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmcplCJCSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmcplCJCVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIThrmcplCJCVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIThrmcplCJCVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmcplCJCChan(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRTDType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRTDType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRTDType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRTDR0(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRTDR0(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRTDR0(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRTDA(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRTDA(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRTDA(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRTDB(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRTDB(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRTDB(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRTDC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRTDC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRTDC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmstrA(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIThrmstrA(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIThrmstrA(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmstrB(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIThrmstrB(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIThrmstrB(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmstrC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIThrmstrC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIThrmstrC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmstrR1(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIThrmstrR1(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIThrmstrR1(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIForceReadFromChan(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIForceReadFromChan(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIForceReadFromChan(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAICurrentUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAICurrentUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAICurrentUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAICurrentACRMSUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAICurrentACRMSUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAICurrentACRMSUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIStrainUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIStrainUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIStrainUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIStrainGageForceReadFromChan(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIStrainGageForceReadFromChan(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIStrainGageForceReadFromChan(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIStrainGageGageFactor(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIStrainGageGageFactor(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIStrainGageGageFactor(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIStrainGagePoissonRatio(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIStrainGagePoissonRatio(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIStrainGagePoissonRatio(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIStrainGageCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIStrainGageCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIStrainGageCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRosetteStrainGageRosetteType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRosetteStrainGageOrientation(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRosetteStrainGageOrientation(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRosetteStrainGageOrientation(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRosetteStrainGageStrainChans(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRosetteStrainGageRosetteMeasType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRosetteStrainGageRosetteMeasType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRosetteStrainGageRosetteMeasType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIResistanceUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIResistanceUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIResistanceUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFreqThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFreqThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFreqThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFreqHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFreqHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFreqHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILVDTUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILVDTUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILVDTUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILVDTSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILVDTSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILVDTSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILVDTSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILVDTSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILVDTSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRVDTUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRVDTUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRVDTUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRVDTSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRVDTSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRVDTSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRVDTSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRVDTSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRVDTSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIEddyCurrentProxProbeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIEddyCurrentProxProbeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIEddyCurrentProxProbeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIEddyCurrentProxProbeSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIEddyCurrentProxProbeSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIEddyCurrentProxProbeSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIEddyCurrentProxProbeSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIEddyCurrentProxProbeSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIEddyCurrentProxProbeSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAISoundPressureMaxSoundPressureLvl(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAISoundPressureMaxSoundPressureLvl(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAISoundPressureMaxSoundPressureLvl(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAISoundPressureUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAISoundPressureUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAISoundPressureUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAISoundPressuredBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAISoundPressuredBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAISoundPressuredBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIMicrophoneSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIMicrophoneSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIMicrophoneSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAccelUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAccelUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAccelUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAcceldBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAcceldBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAcceldBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAccel4WireDCVoltageSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAccel4WireDCVoltageSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAccel4WireDCVoltageSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAccel4WireDCVoltageSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAccel4WireDCVoltageSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAccel4WireDCVoltageSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAccelSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAccelSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAccelSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAccelSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAccelSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAccelSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAccelChargeSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAccelChargeSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAccelChargeSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAccelChargeSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAccelChargeSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAccelChargeSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIVelocityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIVelocityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIVelocityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIVelocityIEPESensordBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIVelocityIEPESensordBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIVelocityIEPESensordBRef(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIVelocityIEPESensorSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIVelocityIEPESensorSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIVelocityIEPESensorSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIVelocityIEPESensorSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIVelocityIEPESensorSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIVelocityIEPESensorSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIForceUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIForceUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIForceUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIForceIEPESensorSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIForceIEPESensorSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIForceIEPESensorSensitivity(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIForceIEPESensorSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIForceIEPESensorSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIForceIEPESensorSensitivityUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIPressureUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIPressureUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIPressureUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAITorqueUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAITorqueUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAITorqueUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeElectricalUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeElectricalUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeElectricalUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgePhysicalUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgePhysicalUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgePhysicalUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeTwoPointLinFirstElectricalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeTwoPointLinFirstElectricalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeTwoPointLinFirstElectricalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeTwoPointLinSecondElectricalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeTwoPointLinSecondElectricalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeTwoPointLinSecondElectricalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeTableElectricalVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeTableElectricalVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeTableElectricalVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeTablePhysicalVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeTablePhysicalVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeTablePhysicalVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgePolyForwardCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgePolyForwardCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgePolyForwardCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgePolyReverseCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgePolyReverseCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgePolyReverseCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChargeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChargeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChargeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIIsTEDS(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAITEDSUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAICoupling(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAICoupling(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAICoupling(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAITermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAITermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAITermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIInputSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIInputSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIInputSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIResistanceCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIResistanceCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIResistanceCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILeadWireResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILeadWireResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILeadWireResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeNomResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeNomResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeNomResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeInitialVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeInitialVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeInitialVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeInitialRatio(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeInitialRatio(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeInitialRatio(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeShuntCalEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeShuntCalEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeShuntCalEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeShuntCalSelect(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeShuntCalSelect(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeShuntCalSelect(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeShuntCalShuntCalASrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeShuntCalShuntCalASrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeShuntCalShuntCalASrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeShuntCalGainAdjust(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeShuntCalGainAdjust(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeShuntCalGainAdjust(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeShuntCalShuntCalAResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeShuntCalShuntCalAResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeShuntCalShuntCalAResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeShuntCalShuntCalAActualResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeShuntCalShuntCalAActualResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeShuntCalShuntCalAActualResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeShuntCalShuntCalBResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeShuntCalShuntCalBResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeShuntCalShuntCalBResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeShuntCalShuntCalBActualResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeShuntCalShuntCalBActualResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeShuntCalShuntCalBActualResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeBalanceCoarsePot(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeBalanceCoarsePot(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeBalanceCoarsePot(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIBridgeBalanceFinePot(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIBridgeBalanceFinePot(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIBridgeBalanceFinePot(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAICurrentShuntLoc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAICurrentShuntLoc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAICurrentShuntLoc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAICurrentShuntResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAICurrentShuntResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAICurrentShuntResistance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitSense(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitSense(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitSense(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitUseForScaling(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitUseForScaling(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitUseForScaling(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitUseMultiplexed(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitUseMultiplexed(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitUseMultiplexed(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitActualVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitActualVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitActualVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitDCorAC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitDCorAC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitDCorAC(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitVoltageOrCurrent(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitVoltageOrCurrent(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitVoltageOrCurrent(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIExcitIdleOutputBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIExcitIdleOutputBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIExcitIdleOutputBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIACExcitFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIACExcitFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIACExcitFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIACExcitSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIACExcitSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIACExcitSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIACExcitWireMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIACExcitWireMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIACExcitWireMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAISensorPowerVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAISensorPowerVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAISensorPowerVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAISensorPowerCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAISensorPowerCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAISensorPowerCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAISensorPowerType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAISensorPowerType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAISensorPowerType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIOpenThrmcplDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIOpenThrmcplDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIOpenThrmcplDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIThrmcplLeadOffsetVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIThrmcplLeadOffsetVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIThrmcplLeadOffsetVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAtten(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAtten(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAtten(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIProbeAtten(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIProbeAtten(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIProbeAtten(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILowpassEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILowpassEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILowpassEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILowpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILowpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILowpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILowpassSwitchCapClkSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILowpassSwitchCapClkSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILowpassSwitchCapClkSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILowpassSwitchCapExtClkFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILowpassSwitchCapExtClkFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILowpassSwitchCapExtClkFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILowpassSwitchCapExtClkDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILowpassSwitchCapExtClkDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILowpassSwitchCapExtClkDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILowpassSwitchCapOutClkDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILowpassSwitchCapOutClkDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILowpassSwitchCapOutClkDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrLowpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrLowpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrLowpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrHighpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrHighpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrHighpassCutoffFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrBandpassCenterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrBandpassCenterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrBandpassCenterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrBandpassWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrBandpassWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrBandpassWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrNotchCenterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrNotchCenterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrNotchCenterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrNotchWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrNotchWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrNotchWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDigFltrCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDigFltrCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFilterEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFilterEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFilterEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFilterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFilterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFilterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFilterResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFilterResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFilterResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFilterOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFilterOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFilterOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFilterDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRemoveFilterDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRemoveFilterDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRemoveFilterDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIFilterDelayAdjustment(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIFilterDelayAdjustment(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIFilterDelayAdjustment(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAveragingWinSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAveragingWinSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAveragingWinSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIResolutionUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIResolution(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRawSampSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRawSampJustification(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIADCTimingMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIADCTimingMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIADCTimingMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIADCCustomTimingMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIADCCustomTimingMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIADCCustomTimingMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDitherEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDitherEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDitherEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalHasValidCalInfo(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalEnableCal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalEnableCal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalEnableCal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalApplyCalIfExp(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalApplyCalIfExp(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalApplyCalIfExp(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalScaleType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalTablePreScaledVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalTablePreScaledVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalTablePreScaledVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalTableScaledVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalTableScaledVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalTableScaledVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalPolyForwardCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalPolyForwardCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalPolyForwardCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalPolyReverseCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalPolyReverseCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalPolyReverseCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalOperatorName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalOperatorName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalOperatorName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalDesc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalDesc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalDesc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalVerifRefVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalVerifRefVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalVerifRefVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChanCalVerifAcqVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChanCalVerifAcqVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChanCalVerifAcqVals(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRngHigh(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRngHigh(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRngHigh(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRngLow(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRngLow(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRngLow(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDCOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDCOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDCOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIGain(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIGain(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIGain(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAISampAndHoldEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAISampAndHoldEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAISampAndHoldEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIAutoZeroMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIAutoZeroMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIAutoZeroMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIChopEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIChopEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIChopEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDataXferMaxRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDataXferMaxRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDataXferMaxRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDataXferCustomThreshold(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIDataXferCustomThreshold(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIDataXferCustomThreshold(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIRawDataCompressionType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIRawDataCompressionType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIRawDataCompressionType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAILossyLSBRemovalCompressedSampSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAILossyLSBRemovalCompressedSampSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAILossyLSBRemovalCompressedSampSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDevScalingCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIEnhancedAliasRejectionEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIEnhancedAliasRejectionEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIEnhancedAliasRejectionEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIOpenChanDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIOpenChanDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIOpenChanDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIInputLimitsFaultDetectUpperLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIInputLimitsFaultDetectUpperLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIInputLimitsFaultDetectUpperLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIInputLimitsFaultDetectLowerLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIInputLimitsFaultDetectLowerLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIInputLimitsFaultDetectLowerLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIInputLimitsFaultDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIInputLimitsFaultDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIInputLimitsFaultDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIPowerSupplyFaultDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIPowerSupplyFaultDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIPowerSupplyFaultDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIOvercurrentDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIOvercurrentDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIOvercurrentDetectEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOMax(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOMax(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOMax(taskHandle: TaskHandle, channel: *const ::std::os::raw::c_char)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetAOMin(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOMin(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOMin(taskHandle: TaskHandle, channel: *const ::std::os::raw::c_char)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetAOCustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOCustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOCustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOOutputType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOVoltageUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOVoltageUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOVoltageUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOVoltageCurrentLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOVoltageCurrentLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOVoltageCurrentLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOCurrentUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOCurrentUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOCurrentUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFuncGenType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFuncGenType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFuncGenType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFuncGenFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFuncGenFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFuncGenFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFuncGenAmplitude(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFuncGenAmplitude(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFuncGenAmplitude(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFuncGenOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFuncGenOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFuncGenOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFuncGenSquareDutyCycle(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFuncGenSquareDutyCycle(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFuncGenSquareDutyCycle(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFuncGenModulationType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFuncGenModulationType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFuncGenModulationType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFuncGenFMDeviation(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFuncGenFMDeviation(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFuncGenFMDeviation(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOOutputImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOOutputImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOOutputImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOLoadImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOLoadImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOLoadImpedance(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOIdleOutputBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOIdleOutputBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOIdleOutputBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOCommonModeOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOCommonModeOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOCommonModeOffset(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOResolutionUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOResolutionUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOResolutionUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOResolution(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACRngHigh(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACRngHigh(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACRngHigh(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACRngLow(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACRngLow(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACRngLow(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACRefConnToGnd(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACRefConnToGnd(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACRefConnToGnd(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACRefAllowConnToGnd(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACRefAllowConnToGnd(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACRefAllowConnToGnd(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACRefSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACRefSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACRefSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACRefExtSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACRefExtSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACRefExtSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACRefVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACRefVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACRefVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACOffsetSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACOffsetSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACOffsetSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACOffsetExtSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACOffsetExtSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACOffsetExtSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODACOffsetVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODACOffsetVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODACOffsetVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOReglitchEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOReglitchEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOReglitchEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFilterDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFilterDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFilterDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOFilterDelayAdjustment(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOFilterDelayAdjustment(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOFilterDelayAdjustment(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOGain(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOGain(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOGain(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAODevScalingCoeff(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOEnhancedImageRejectionEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOEnhancedImageRejectionEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOEnhancedImageRejectionEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIInvertLines(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIInvertLines(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIInvertLines(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDINumLines(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIDigFltrEnableBusMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIDigFltrEnableBusMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIDigFltrEnableBusMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDITristate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDITristate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDITristate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDILogicFamily(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDILogicFamily(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDILogicFamily(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDIAcquireOn(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDIAcquireOn(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDIAcquireOn(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOOutputDriveType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOOutputDriveType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOOutputDriveType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOInvertLines(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOInvertLines(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOInvertLines(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDONumLines(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOTristate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOTristate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOTristate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOLineStatesStartState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOLineStatesStartState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOLineStatesStartState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOLineStatesPausedState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOLineStatesPausedState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOLineStatesPausedState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOLineStatesDoneState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOLineStatesDoneState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOLineStatesDoneState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOLogicFamily(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOLogicFamily(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOLogicFamily(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOOvercurrentLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOOvercurrentLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOOvercurrentLimit(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOOvercurrentAutoReenable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOOvercurrentAutoReenable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOOvercurrentAutoReenable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOOvercurrentReenablePeriod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOOvercurrentReenablePeriod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOOvercurrentReenablePeriod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDOGenerateOn(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDOGenerateOn(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDOGenerateOn(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIMax(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIMax(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIMax(taskHandle: TaskHandle, channel: *const ::std::os::raw::c_char)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetCIMin(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIMin(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIMin(taskHandle: TaskHandle, channel: *const ::std::os::raw::c_char)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetCICustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICustomScaleName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIMeasType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqMeasMeth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqMeasMeth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqMeasMeth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqEnableAveraging(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqEnableAveraging(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqEnableAveraging(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFreqDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFreqDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFreqDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodMeasMeth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodMeasMeth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodMeasMeth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodEnableAveraging(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodEnableAveraging(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodEnableAveraging(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPeriodDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPeriodDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPeriodDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesDir(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesDir(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesDir(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesDirTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesDirTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesDirTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountDirDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountDirDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountDirDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesInitialCnt(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesInitialCnt(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesInitialCnt(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetResetCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetResetCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetResetCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesCountResetActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesCountResetActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesCountResetActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateHyst(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICountEdgesGateWhen(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICountEdgesGateWhen(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICountEdgesGateWhen(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDutyCycleTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDutyCycleTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDutyCycleTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDutyCycleTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDutyCycleTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDutyCycleTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDutyCycleLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDutyCycleLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDutyCycleLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDutyCycleDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDutyCycleDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDutyCycleDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDutyCycleDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDutyCycleDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDutyCycleDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDutyCycleDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDutyCycleDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDutyCycleDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDutyCycleDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDutyCycleDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDutyCycleDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDutyCycleStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDutyCycleStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDutyCycleStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIAngEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIAngEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIAngEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIAngEncoderPulsesPerRev(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIAngEncoderPulsesPerRev(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIAngEncoderPulsesPerRev(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIAngEncoderInitialAngle(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIAngEncoderInitialAngle(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIAngEncoderInitialAngle(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCILinEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCILinEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCILinEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCILinEncoderDistPerPulse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCILinEncoderDistPerPulse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCILinEncoderDistPerPulse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCILinEncoderInitialPos(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCILinEncoderInitialPos(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCILinEncoderInitialPos(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderDecodingType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderDecodingType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderDecodingType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderAInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderAInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderAInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderAInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderAInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderAInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderAInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderAInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderAInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderAInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderAInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderAInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderAInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderAInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderAInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderAInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderAInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderAInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderAInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderAInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderAInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderAInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderAInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderAInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderBInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderBInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderBInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderBInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderBInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderBInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderBInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderBInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderBInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderBInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderBInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderBInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderBInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderBInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderBInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderBInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderBInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderBInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderBInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderBInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderBInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderBInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderBInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderBInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZInputDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZIndexEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZIndexEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZIndexEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZIndexVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZIndexVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZIndexVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIEncoderZIndexPhase(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIEncoderZIndexPhase(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIEncoderZIndexPhase(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseWidthStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseWidthStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseWidthStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITimestampUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITimestampUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITimestampUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITimestampInitialSeconds(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITimestampInitialSeconds(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITimestampInitialSeconds(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIGPSSyncMethod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIGPSSyncMethod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIGPSSyncMethod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIGPSSyncSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIGPSSyncSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIGPSSyncSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityAngEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityAngEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityAngEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityAngEncoderPulsesPerRev(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityAngEncoderPulsesPerRev(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityAngEncoderPulsesPerRev(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityLinEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityLinEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityLinEncoderUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityLinEncoderDistPerPulse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityLinEncoderDistPerPulse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityLinEncoderDistPerPulse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderDecodingType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderDecodingType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderDecodingType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderAInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderAInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderAInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderAInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderAInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderAInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderAInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderAInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderAInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderBInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderBInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderBInputTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderBInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderBInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderBInputTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderBInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderBInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderBInputLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityMeasTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIVelocityDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIVelocityDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIVelocityDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepFirstEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepFirstEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepFirstEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITwoEdgeSepSecondEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCITwoEdgeSepSecondEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCITwoEdgeSepSecondEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISemiPeriodStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISemiPeriodStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISemiPeriodStartingEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseFreqStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseFreqStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseFreqStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTimeStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTimeStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTimeStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksTermCfg(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksLogicLvlBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPulseTicksStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPulseTicksStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPulseTicksStartEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIThreshVoltage(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFilterEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFilterEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFilterEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFilterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFilterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFilterFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFilterResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFilterResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFilterResponse(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFilterOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFilterOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFilterOrder(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFilterDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIFilterDelayUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIOutputState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCITCReached(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCICtrTimebaseMasterTimebaseDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCICtrTimebaseMasterTimebaseDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCICtrTimebaseMasterTimebaseDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISampClkOverrunBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISampClkOverrunBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISampClkOverrunBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCISampClkOverrunSentinelVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCISampClkOverrunSentinelVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCISampClkOverrunSentinelVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCINumPossiblyInvalidSamps(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIDupCountPrevent(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIDupCountPrevent(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIDupCountPrevent(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIPrescaler(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIPrescaler(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIPrescaler(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCIMaxMeasPeriod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCIMaxMeasPeriod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCIMaxMeasPeriod(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOOutputType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseIdleState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseIdleState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseIdleState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseTerm(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseTimeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseTimeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseTimeUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseHighTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseHighTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseHighTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseLowTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseLowTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseLowTime(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseTimeInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseTimeInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseTimeInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseDutyCyc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseDutyCyc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseDutyCyc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseFreqUnits(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseFreq(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseFreqInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseFreqInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseFreqInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseHighTicks(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseHighTicks(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseHighTicks(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseLowTicks(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseLowTicks(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseLowTicks(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseTicksInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPulseTicksInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPulseTicksInitialDelay(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseActiveEdge(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseDigFltrEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseDigSyncEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOOutputState(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOAutoIncrCnt(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOAutoIncrCnt(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOAutoIncrCnt(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOCtrTimebaseMasterTimebaseDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOCtrTimebaseMasterTimebaseDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOCtrTimebaseMasterTimebaseDiv(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPulseDone(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOEnableInitialDelayOnRetrigger(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOEnableInitialDelayOnRetrigger(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOEnableInitialDelayOnRetrigger(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOConstrainedGenMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOConstrainedGenMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOConstrainedGenMode(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOUseOnlyOnBrdMem(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCODataXferMech(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCODataXferReqCond(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOUsbXferReqSize(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOUsbXferReqCount(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOMemMapEnable(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCOPrescaler(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetCOPrescaler(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetCOPrescaler(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCORdyForNewVal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetChanType(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetPhysicalChanName(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetChanDescr(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetChanDescr(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetChanDescr(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetChanIsGlobal(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetChanSyncUnlockBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetChanSyncUnlockBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetChanSyncUnlockBehavior(
        taskHandle: TaskHandle,
        channel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevIsSimulated(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevProductCategory(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevProductType(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevProductNum(device: *const ::std::os::raw::c_char, data: *mut uInt32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevSerialNum(device: *const ::std::os::raw::c_char, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAccessoryProductTypes(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAccessoryProductNums(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAccessorySerialNums(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetCarrierSerialNum(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetFieldDAQDevName(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetFieldDAQBankDevNames(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevChassisModuleDevNames(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAnlgTrigSupported(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDigTrigSupported(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevTimeTrigSupported(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIPhysicalChans(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAISupportedMeasTypes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIMaxSingleChanRate(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIMaxMultiChanRate(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIMinRate(device: *const ::std::os::raw::c_char, data: *mut float64)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAISimultaneousSamplingSupported(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAINumSampTimingEngines(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAISampModes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAINumSyncPulseSrcs(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAITrigUsage(device: *const ::std::os::raw::c_char, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIVoltageRngs(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIVoltageIntExcitDiscreteVals(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIVoltageIntExcitRangeVals(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIChargeRngs(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAICurrentRngs(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAICurrentIntExcitDiscreteVals(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIBridgeRngs(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIResistanceRngs(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIFreqRngs(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIGains(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAICouplings(device: *const ::std::os::raw::c_char, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAILowpassCutoffFreqDiscreteVals(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAILowpassCutoffFreqRangeVals(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIDigFltrTypes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIDigFltrLowpassCutoffFreqDiscreteVals(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAIDigFltrLowpassCutoffFreqRangeVals(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOPhysicalChans(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOSupportedOutputTypes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOMaxRate(device: *const ::std::os::raw::c_char, data: *mut float64)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOMinRate(device: *const ::std::os::raw::c_char, data: *mut float64)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOSampClkSupported(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAONumSampTimingEngines(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOSampModes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAONumSyncPulseSrcs(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOTrigUsage(device: *const ::std::os::raw::c_char, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOVoltageRngs(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOCurrentRngs(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevAOGains(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDILines(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDIPorts(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDIMaxRate(device: *const ::std::os::raw::c_char, data: *mut float64)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDINumSampTimingEngines(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDITrigUsage(device: *const ::std::os::raw::c_char, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDOLines(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDOPorts(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDOMaxRate(device: *const ::std::os::raw::c_char, data: *mut float64)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDONumSampTimingEngines(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevDOTrigUsage(device: *const ::std::os::raw::c_char, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCIPhysicalChans(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCISupportedMeasTypes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCITrigUsage(device: *const ::std::os::raw::c_char, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCISampClkSupported(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCISampModes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCIMaxSize(device: *const ::std::os::raw::c_char, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCIMaxTimebase(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCOPhysicalChans(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCOSupportedOutputTypes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCOSampClkSupported(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCOSampModes(
        device: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCOTrigUsage(device: *const ::std::os::raw::c_char, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCOMaxSize(device: *const ::std::os::raw::c_char, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCOMaxTimebase(
        device: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevTEDSHWTEDSSupported(
        device: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevNumDMAChans(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevBusType(device: *const ::std::os::raw::c_char, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevPCIBusNum(device: *const ::std::os::raw::c_char, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevPCIDevNum(device: *const ::std::os::raw::c_char, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevPXIChassisNum(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevPXISlotNum(device: *const ::std::os::raw::c_char, data: *mut uInt32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCompactDAQChassisDevName(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCompactDAQSlotNum(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCompactRIOChassisDevName(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevCompactRIOSlotNum(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevTCPIPHostname(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevTCPIPEthernetIP(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevTCPIPWirelessIP(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevTerminals(
        device: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevNumTimeTrigs(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDevNumTimestampEngines(
        device: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAIConvClkOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAIConvClkOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAIConvClkOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAIConvClkPulsePolarity(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetExported10MHzRefClkOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExported10MHzRefClkOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExported10MHzRefClkOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExported20MHzTimebaseOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExported20MHzTimebaseOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExported20MHzTimebaseOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedSampClkOutputBehavior(taskHandle: TaskHandle, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedSampClkOutputBehavior(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedSampClkOutputBehavior(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedSampClkOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedSampClkOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedSampClkOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedSampClkDelayOffset(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedSampClkDelayOffset(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedSampClkDelayOffset(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedSampClkPulsePolarity(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedSampClkPulsePolarity(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedSampClkPulsePolarity(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedSampClkTimebaseOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedSampClkTimebaseOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedSampClkTimebaseOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedDividedSampClkTimebaseOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedDividedSampClkTimebaseOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedDividedSampClkTimebaseOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAdvTrigOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAdvTrigOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAdvTrigOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAdvTrigPulsePolarity(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAdvTrigPulseWidthUnits(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAdvTrigPulseWidthUnits(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAdvTrigPulseWidthUnits(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAdvTrigPulseWidth(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAdvTrigPulseWidth(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAdvTrigPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedPauseTrigOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedPauseTrigOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedPauseTrigOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle, data: *mut int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedPauseTrigLvlActiveLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedRefTrigOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedRefTrigOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedRefTrigOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedRefTrigPulsePolarity(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedRefTrigPulsePolarity(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedRefTrigPulsePolarity(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedStartTrigOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedStartTrigOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedStartTrigOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedStartTrigPulsePolarity(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedStartTrigPulsePolarity(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedStartTrigPulsePolarity(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAdvCmpltEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAdvCmpltEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAdvCmpltEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAdvCmpltEventDelay(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAdvCmpltEventDelay(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAdvCmpltEventDelay(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAdvCmpltEventPulsePolarity(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAdvCmpltEventPulsePolarity(taskHandle: TaskHandle, data: int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAdvCmpltEventPulsePolarity(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAdvCmpltEventPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAdvCmpltEventPulseWidth(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAdvCmpltEventPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAIHoldCmpltEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAIHoldCmpltEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAIHoldCmpltEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedAIHoldCmpltEventPulsePolarity(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedAIHoldCmpltEventPulsePolarity(
        taskHandle: TaskHandle,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedAIHoldCmpltEventPulsePolarity(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedChangeDetectEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedChangeDetectEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedChangeDetectEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedChangeDetectEventPulsePolarity(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedChangeDetectEventPulsePolarity(
        taskHandle: TaskHandle,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedChangeDetectEventPulsePolarity(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedCtrOutEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedCtrOutEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedCtrOutEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedCtrOutEventOutputBehavior(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedCtrOutEventOutputBehavior(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedCtrOutEventOutputBehavior(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedCtrOutEventPulsePolarity(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedCtrOutEventPulsePolarity(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedCtrOutEventPulsePolarity(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedCtrOutEventToggleIdleState(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedCtrOutEventToggleIdleState(taskHandle: TaskHandle, data: int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedCtrOutEventToggleIdleState(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedHshkEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedHshkEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedHshkEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedHshkEventOutputBehavior(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedHshkEventOutputBehavior(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedHshkEventOutputBehavior(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedHshkEventDelay(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedHshkEventDelay(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedHshkEventDelay(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedHshkEventInterlockedAssertedLvl(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedHshkEventInterlockedAssertedLvl(
        taskHandle: TaskHandle,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedHshkEventInterlockedAssertedLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedHshkEventInterlockedAssertOnStart(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedHshkEventInterlockedAssertOnStart(
        taskHandle: TaskHandle,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedHshkEventInterlockedAssertOnStart(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedHshkEventInterlockedDeassertDelay(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedHshkEventInterlockedDeassertDelay(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedHshkEventInterlockedDeassertDelay(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedHshkEventPulsePolarity(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedHshkEventPulsePolarity(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedHshkEventPulsePolarity(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedHshkEventPulseWidth(taskHandle: TaskHandle, data: *mut float64)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedHshkEventPulseWidth(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedHshkEventPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedRdyForXferEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedRdyForXferEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedRdyForXferEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedRdyForXferEventLvlActiveLvl(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedRdyForXferEventLvlActiveLvl(
        taskHandle: TaskHandle,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedRdyForXferEventLvlActiveLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedRdyForXferEventDeassertCond(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedRdyForXferEventDeassertCond(
        taskHandle: TaskHandle,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedRdyForXferEventDeassertCond(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold(
        taskHandle: TaskHandle,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold(
        taskHandle: TaskHandle,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold(
        taskHandle: TaskHandle,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedDataActiveEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedDataActiveEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedDataActiveEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedDataActiveEventLvlActiveLvl(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedDataActiveEventLvlActiveLvl(
        taskHandle: TaskHandle,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedDataActiveEventLvlActiveLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedRdyForStartEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedRdyForStartEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedRdyForStartEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedRdyForStartEventLvlActiveLvl(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedRdyForStartEventLvlActiveLvl(
        taskHandle: TaskHandle,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedRdyForStartEventLvlActiveLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedSyncPulseEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedSyncPulseEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedSyncPulseEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetExportedWatchdogExpiredEventOutputTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetExportedWatchdogExpiredEventOutputTerm(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetExportedWatchdogExpiredEventOutputTerm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedChanAuthor(
        channel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedChanAllowInteractiveEditing(
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedChanAllowInteractiveDeletion(
        channel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedScaleAuthor(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedScaleAllowInteractiveEditing(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedScaleAllowInteractiveDeletion(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedTaskAuthor(
        taskName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedTaskAllowInteractiveEditing(
        taskName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPersistedTaskAllowInteractiveDeletion(
        taskName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAISupportedMeasTypes(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAITermCfgs(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAIInputSrcs(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAISensorPowerTypes(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAISensorPowerVoltageRangeVals(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAIPowerControlVoltage(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetPhysicalChanAIPowerControlVoltage(
        physicalChannel: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetPhysicalChanAIPowerControlVoltage(
        physicalChannel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAIPowerControlEnable(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetPhysicalChanAIPowerControlEnable(
        physicalChannel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetPhysicalChanAIPowerControlEnable(
        physicalChannel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAIPowerControlType(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetPhysicalChanAIPowerControlType(
        physicalChannel: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetPhysicalChanAIPowerControlType(
        physicalChannel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAISensorPowerOpenChan(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAISensorPowerOvercurrent(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAOSupportedOutputTypes(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAOSupportedPowerUpOutputTypes(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAOTermCfgs(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAOManualControlEnable(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetPhysicalChanAOManualControlEnable(
        physicalChannel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetPhysicalChanAOManualControlEnable(
        physicalChannel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAOManualControlShortDetected(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAOManualControlAmplitude(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanAOManualControlFreq(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOPowerAmpChannelEnable(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAOPowerAmpChannelEnable(
        physicalChannel: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAOPowerAmpChannelEnable(
        physicalChannel: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOPowerAmpScalingCoeff(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOPowerAmpOvercurrent(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOPowerAmpGain(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAOPowerAmpOffset(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanDIPortWidth(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanDISampClkSupported(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanDISampModes(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanDIChangeDetectSupported(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanDOPortWidth(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanDOSampClkSupported(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanDOSampModes(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanCISupportedMeasTypes(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanCOSupportedOutputTypes(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanTEDSMfgID(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanTEDSModelNum(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanTEDSSerialNum(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanTEDSVersionNum(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanTEDSVersionLetter(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanTEDSBitStream(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut uInt8,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetPhysicalChanTEDSTemplateIDs(
        physicalChannel: *const ::std::os::raw::c_char,
        data: *mut uInt32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadRelativeTo(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadRelativeTo(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadRelativeTo(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOffset(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadOffset(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadOffset(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadChannelsToRead(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadChannelsToRead(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadChannelsToRead(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadReadAllAvailSamp(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadReadAllAvailSamp(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadReadAllAvailSamp(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadAutoStart(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadAutoStart(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadAutoStart(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOverWrite(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadOverWrite(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadOverWrite(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetLoggingFilePath(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetLoggingFilePath(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetLoggingFilePath(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetLoggingMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetLoggingMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetLoggingMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetLoggingTDMSGroupName(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetLoggingTDMSGroupName(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetLoggingTDMSGroupName(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetLoggingTDMSOperation(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetLoggingTDMSOperation(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetLoggingTDMSOperation(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetLoggingPause(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetLoggingPause(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetLoggingPause(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetLoggingSampsPerFile(taskHandle: TaskHandle, data: *mut uInt64) -> int32;
}
extern "C" {
    pub fn DAQmxSetLoggingSampsPerFile(taskHandle: TaskHandle, data: uInt64) -> int32;
}
extern "C" {
    pub fn DAQmxResetLoggingSampsPerFile(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetLoggingFileWriteSize(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetLoggingFileWriteSize(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetLoggingFileWriteSize(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetLoggingFilePreallocationSize(taskHandle: TaskHandle, data: *mut uInt64)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetLoggingFilePreallocationSize(taskHandle: TaskHandle, data: uInt64) -> int32;
}
extern "C" {
    pub fn DAQmxResetLoggingFilePreallocationSize(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadCurrReadPos(taskHandle: TaskHandle, data: *mut uInt64) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadAvailSampPerChan(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadTotalSampPerChanAcquired(taskHandle: TaskHandle, data: *mut uInt64)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetReadCommonModeRangeErrorChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadCommonModeRangeErrorChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadExcitFaultChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadExcitFaultChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOvercurrentChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOvercurrentChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOvertemperatureChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOvertemperatureChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOpenChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOpenChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOpenChansDetails(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOpenCurrentLoopChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOpenCurrentLoopChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOpenThrmcplChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOpenThrmcplChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOverloadedChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadOverloadedChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadInputLimitsFaultChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadInputLimitsFaultChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadPLLUnlockedChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadPLLUnlockedChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadPowerSupplyFaultChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadPowerSupplyFaultChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadSyncUnlockedChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadSyncUnlockedChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadAccessoryInsertionOrRemovalDetected(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadDevsWithInsertedOrRemovedAccessories(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadChangeDetectHasOverflowed(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadRawDataWidth(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadNumChans(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadDigitalLinesBytesPerChan(taskHandle: TaskHandle, data: *mut uInt32)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetReadWaitMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadWaitMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadWaitMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetReadSleepTime(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetReadSleepTime(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetReadSleepTime(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRealTimeConvLateErrorsToWarnings(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetRealTimeConvLateErrorsToWarnings(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRealTimeConvLateErrorsToWarnings(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRealTimeNumOfWarmupIters(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRealTimeNumOfWarmupIters(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRealTimeNumOfWarmupIters(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRealTimeWaitForNextSampClkWaitMode(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetRealTimeWaitForNextSampClkWaitMode(taskHandle: TaskHandle, data: int32)
        -> int32;
}
extern "C" {
    pub fn DAQmxResetRealTimeWaitForNextSampClkWaitMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRealTimeReportMissedSamp(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRealTimeReportMissedSamp(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRealTimeReportMissedSamp(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRealTimeWriteRecoveryMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRealTimeWriteRecoveryMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRealTimeWriteRecoveryMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleDescr(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleDescr(
        scaleName: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleScaledUnits(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleScaledUnits(
        scaleName: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScalePreScaledUnits(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScalePreScaledUnits(
        scaleName: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleType(scaleName: *const ::std::os::raw::c_char, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleLinSlope(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleLinSlope(scaleName: *const ::std::os::raw::c_char, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleLinYIntercept(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleLinYIntercept(
        scaleName: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleMapScaledMax(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleMapScaledMax(
        scaleName: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleMapPreScaledMax(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleMapPreScaledMax(
        scaleName: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleMapScaledMin(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleMapScaledMin(
        scaleName: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleMapPreScaledMin(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleMapPreScaledMin(
        scaleName: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScalePolyForwardCoeff(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScalePolyForwardCoeff(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScalePolyReverseCoeff(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScalePolyReverseCoeff(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleTableScaledVals(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleTableScaledVals(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetScaleTablePreScaledVals(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetScaleTablePreScaledVals(
        scaleName: *const ::std::os::raw::c_char,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanUsage(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchChanUsage(
        switchChannelName: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanAnlgBusSharingEnable(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchChanAnlgBusSharingEnable(
        switchChannelName: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxACCarryCurrent(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxACSwitchCurrent(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxACCarryPwr(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxACSwitchPwr(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxDCCarryCurrent(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxDCSwitchCurrent(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxDCCarryPwr(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxDCSwitchPwr(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxACVoltage(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanMaxDCVoltage(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanWireMode(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanBandwidth(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchChanImpedance(
        switchChannelName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevSettlingTime(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchDevSettlingTime(
        deviceName: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevAutoConnAnlgBus(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchDevAutoConnAnlgBus(
        deviceName: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling(
        deviceName: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevSettled(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevRelayList(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevNumRelays(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevSwitchChanList(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevNumSwitchChans(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevNumRows(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevNumColumns(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevTopology(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchDevTemperature(
        deviceName: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchScanBreakMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchScanBreakMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSwitchScanBreakMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchScanRepeatMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSwitchScanRepeatMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSwitchScanRepeatMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSwitchScanWaitingForAdv(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetSysGlobalChans(data: *mut ::std::os::raw::c_char, bufferSize: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetSysScales(data: *mut ::std::os::raw::c_char, bufferSize: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetSysTasks(data: *mut ::std::os::raw::c_char, bufferSize: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetSysDevNames(data: *mut ::std::os::raw::c_char, bufferSize: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetSysNIDAQMajorVersion(data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetSysNIDAQMinorVersion(data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetSysNIDAQUpdateVersion(data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetTaskName(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetTaskChannels(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetTaskNumChans(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetTaskDevices(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetTaskNumDevices(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetTaskComplete(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampQuantSampMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampQuantSampMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampQuantSampMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampQuantSampPerChan(taskHandle: TaskHandle, data: *mut uInt64) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampQuantSampPerChan(taskHandle: TaskHandle, data: uInt64) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampQuantSampPerChan(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampTimingType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampTimingType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampTimingType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkRate(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkMaxRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkSrc(taskHandle: TaskHandle, data: *const ::std::os::raw::c_char)
        -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkActiveEdge(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkActiveEdge(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkActiveEdge(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkOverrunBehavior(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkOverrunBehavior(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkOverrunBehavior(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkUnderflowBehavior(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkUnderflowBehavior(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkUnderflowBehavior(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkTimebaseDiv(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkTimebaseDiv(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkTimebaseDiv(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkTimebaseRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkTimebaseRate(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkTimebaseActiveEdge(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkTimebaseActiveEdge(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkTimebaseActiveEdge(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkTimebaseMasterTimebaseDiv(
        taskHandle: TaskHandle,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkTimebaseMasterTimebaseDiv(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkTimebaseMasterTimebaseDiv(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkTimebaseTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkDigFltrEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle, data: *mut float64)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkDigSyncEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkWriteWfmUseInitialWfmDT(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkWriteWfmUseInitialWfmDT(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkWriteWfmUseInitialWfmDT(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetHshkDelayAfterXfer(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetHshkDelayAfterXfer(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetHshkDelayAfterXfer(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetHshkStartCond(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetHshkStartCond(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetHshkStartCond(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetHshkSampleInputDataWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetHshkSampleInputDataWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetHshkSampleInputDataWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetChangeDetectDIRisingEdgePhysicalChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetChangeDetectDIRisingEdgePhysicalChans(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetChangeDetectDIRisingEdgePhysicalChans(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetChangeDetectDIFallingEdgePhysicalChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetChangeDetectDIFallingEdgePhysicalChans(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetChangeDetectDIFallingEdgePhysicalChans(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetChangeDetectDITristate(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetChangeDetectDITristate(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetChangeDetectDITristate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle, data: *mut bool32)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetOnDemandSimultaneousAOEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetImplicitUnderflowBehavior(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetImplicitUnderflowBehavior(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetImplicitUnderflowBehavior(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvRate(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvRateEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvRateEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvRateEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvMaxRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvMaxRateEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvSrc(taskHandle: TaskHandle, data: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvActiveEdge(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvActiveEdge(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvActiveEdge(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvActiveEdgeEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvActiveEdgeEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvActiveEdgeEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvTimebaseDiv(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvTimebaseDiv(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvTimebaseDiv(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvTimebaseDivEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvTimebaseDivEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvTimebaseDivEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvTimebaseSrc(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvTimebaseSrc(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvTimebaseSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvTimebaseSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvTimebaseSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDelayFromSampClkDelayUnits(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDelayFromSampClkDelayUnits(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDelayFromSampClkDelayUnits(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDelayFromSampClkDelayUnitsEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDelayFromSampClkDelayUnitsEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDelayFromSampClkDelayUnitsEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDelayFromSampClkDelay(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetDelayFromSampClkDelay(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetDelayFromSampClkDelay(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDelayFromSampClkDelayEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDelayFromSampClkDelayEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDelayFromSampClkDelayEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigFltrEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigFltrEnableEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigFltrEnableEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigFltrEnableEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigFltrMinPulseWidthEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigFltrMinPulseWidthEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigFltrMinPulseWidthEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigFltrTimebaseSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigFltrTimebaseSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigFltrTimebaseSrcEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigFltrTimebaseRateEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigFltrTimebaseRateEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigFltrTimebaseRateEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigSyncEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAIConvDigSyncEnableEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAIConvDigSyncEnableEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAIConvDigSyncEnableEx(
        taskHandle: TaskHandle,
        deviceNames: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetMasterTimebaseRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetMasterTimebaseRate(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetMasterTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetMasterTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetMasterTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetMasterTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefClkRate(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefClkRate(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefClkRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefClkSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefClkSrc(taskHandle: TaskHandle, data: *const ::std::os::raw::c_char) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefClkSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSyncPulseType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSyncPulseType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetSyncPulseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetSyncPulseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseTimeWhen(taskHandle: TaskHandle, data: *mut CVIAbsoluteTime) -> int32;
}
extern "C" {
    pub fn DAQmxSetSyncPulseTimeWhen(taskHandle: TaskHandle, data: CVIAbsoluteTime) -> int32;
}
extern "C" {
    pub fn DAQmxResetSyncPulseTimeWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseTimeTimescale(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSyncPulseTimeTimescale(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSyncPulseTimeTimescale(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseSyncTime(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseMinDelayToStart(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetSyncPulseMinDelayToStart(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetSyncPulseMinDelayToStart(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseResetTime(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseResetDelay(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetSyncPulseResetDelay(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetSyncPulseResetDelay(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncPulseTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSyncClkInterval(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSyncClkInterval(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSyncClkInterval(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampTimingEngine(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampTimingEngine(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampTimingEngine(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetFirstSampTimestampEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetFirstSampTimestampEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetFirstSampTimestampEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetFirstSampTimestampTimescale(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetFirstSampTimestampTimescale(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetFirstSampTimestampTimescale(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetFirstSampTimestampVal(
        taskHandle: TaskHandle,
        data: *mut CVIAbsoluteTime,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetFirstSampClkWhen(taskHandle: TaskHandle, data: *mut CVIAbsoluteTime) -> int32;
}
extern "C" {
    pub fn DAQmxSetFirstSampClkWhen(taskHandle: TaskHandle, data: CVIAbsoluteTime) -> int32;
}
extern "C" {
    pub fn DAQmxResetFirstSampClkWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetFirstSampClkTimescale(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetFirstSampClkTimescale(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetFirstSampClkTimescale(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetFirstSampClkOffset(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetFirstSampClkOffset(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetFirstSampClkOffset(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeStartTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeStartTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeStartTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeStartTrigEdge(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeStartTrigEdge(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeStartTrigEdge(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeStartTrigDigFltrEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeStartTrigDigSyncEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternStartTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternStartTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternStartTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternStartTrigPattern(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternStartTrigPattern(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternStartTrigPattern(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternStartTrigWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternStartTrigWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternStartTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigSlope(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigHyst(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigCoupling(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeStartTrigDigSyncEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeStartTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeStartTrigSrcs(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeStartTrigSrcs(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeStartTrigSrcs(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeStartTrigSlopes(
        taskHandle: TaskHandle,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeStartTrigSlopes(
        taskHandle: TaskHandle,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeStartTrigSlopes(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeStartTrigLvls(
        taskHandle: TaskHandle,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeStartTrigLvls(
        taskHandle: TaskHandle,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeStartTrigLvls(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeStartTrigHysts(
        taskHandle: TaskHandle,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeStartTrigHysts(
        taskHandle: TaskHandle,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeStartTrigHysts(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeStartTrigCouplings(
        taskHandle: TaskHandle,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeStartTrigCouplings(
        taskHandle: TaskHandle,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeStartTrigCouplings(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigTop(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigTop(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigTop(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigBtm(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigBtm(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigBtm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigCoupling(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigCoupling(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigCoupling(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigDigFltrEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinStartTrigDigSyncEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinStartTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinStartTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigTrigWhen(taskHandle: TaskHandle, data: *mut CVIAbsoluteTime) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigTrigWhen(taskHandle: TaskHandle, data: CVIAbsoluteTime) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigTimescale(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigTimescale(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigTimescale(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigTimestampEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigTimestampEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigTimestampEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigTimestampTimescale(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigTimestampTimescale(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigTimestampTimescale(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigTimestampVal(
        taskHandle: TaskHandle,
        data: *mut CVIAbsoluteTime,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigDelay(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigDelay(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigDelay(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigDelayUnits(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigDelayUnits(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigDelayUnits(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigRetriggerable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigRetriggerable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigRetriggerable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigTrigWin(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigTrigWin(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigTrigWin(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigRetriggerWin(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigRetriggerWin(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigRetriggerWin(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetStartTrigMaxNumTrigsToDetect(taskHandle: TaskHandle, data: *mut uInt32)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetStartTrigMaxNumTrigsToDetect(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetStartTrigMaxNumTrigsToDetect(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigPretrigSamples(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigPretrigSamples(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigPretrigSamples(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeRefTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeRefTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeRefTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeRefTrigEdge(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeRefTrigEdge(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeRefTrigEdge(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternRefTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternRefTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternRefTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternRefTrigPattern(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternRefTrigPattern(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternRefTrigPattern(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternRefTrigWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternRefTrigWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternRefTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigSlope(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigHyst(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigCoupling(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle, data: *mut bool32)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle, data: *mut bool32)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgEdgeRefTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeRefTrigSrcs(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeRefTrigSrcs(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeRefTrigSrcs(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeRefTrigSlopes(
        taskHandle: TaskHandle,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeRefTrigSlopes(
        taskHandle: TaskHandle,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeRefTrigSlopes(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeRefTrigLvls(
        taskHandle: TaskHandle,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeRefTrigLvls(
        taskHandle: TaskHandle,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeRefTrigLvls(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeRefTrigHysts(
        taskHandle: TaskHandle,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeRefTrigHysts(
        taskHandle: TaskHandle,
        data: *mut float64,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeRefTrigHysts(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgMultiEdgeRefTrigCouplings(
        taskHandle: TaskHandle,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgMultiEdgeRefTrigCouplings(
        taskHandle: TaskHandle,
        data: *mut int32,
        arraySizeInElements: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgMultiEdgeRefTrigCouplings(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigTop(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigTop(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigTop(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigBtm(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigBtm(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigBtm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigCoupling(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigCoupling(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigCoupling(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinRefTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigAutoTrigEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigAutoTrigEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigAutoTrigEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigAutoTriggered(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigTimestampEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigTimestampEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigTimestampEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigTimestampTimescale(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigTimestampTimescale(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigTimestampTimescale(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigTimestampVal(taskHandle: TaskHandle, data: *mut CVIAbsoluteTime)
        -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigDelay(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigDelay(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigDelay(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigRetriggerable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigRetriggerable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigRetriggerable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigTrigWin(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigTrigWin(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigTrigWin(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigRetriggerWin(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigRetriggerWin(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigRetriggerWin(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetRefTrigMaxNumTrigsToDetect(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxSetRefTrigMaxNumTrigsToDetect(taskHandle: TaskHandle, data: uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxResetRefTrigMaxNumTrigsToDetect(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAdvTrigType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAdvTrigType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAdvTrigType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeAdvTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeAdvTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeAdvTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeAdvTrigEdge(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeAdvTrigEdge(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeAdvTrigEdge(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeAdvTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetHshkTrigType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetHshkTrigType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetHshkTrigType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetInterlockedHshkTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetInterlockedHshkTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetInterlockedHshkTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetInterlockedHshkTrigAssertedLvl(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetInterlockedHshkTrigAssertedLvl(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetInterlockedHshkTrigAssertedLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetPauseTrigType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetPauseTrigType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetPauseTrigType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetPauseTrigTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigLvl(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigHyst(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigCoupling(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgLvlPauseTrigDigSyncEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigTop(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigTop(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigTop(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigBtm(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigBtm(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigBtm(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigCoupling(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetAnlgWinPauseTrigDigSyncEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetAnlgWinPauseTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetAnlgWinPauseTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigLvlPauseTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigLvlPauseTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigLvlPauseTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigLvlPauseTrigWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigLvlPauseTrigWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigLvlPauseTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle, data: *mut bool32)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigLvlPauseTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle, data: *mut bool32)
        -> int32;
}
extern "C" {
    pub fn DAQmxSetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigLvlPauseTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternPauseTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternPauseTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternPauseTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternPauseTrigPattern(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternPauseTrigPattern(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternPauseTrigPattern(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigPatternPauseTrigWhen(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigPatternPauseTrigWhen(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigPatternPauseTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetArmStartTrigType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetArmStartTrigType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetArmStartTrigType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetArmStartTerm(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeArmStartTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeArmStartTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeArmStartTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeArmStartTrigEdge(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate(
        taskHandle: TaskHandle,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeArmStartTrigDigSyncEnable(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeArmStartTrigDigSyncEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeArmStartTrigDigSyncEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetArmStartTrigTrigWhen(
        taskHandle: TaskHandle,
        data: *mut CVIAbsoluteTime,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetArmStartTrigTrigWhen(taskHandle: TaskHandle, data: CVIAbsoluteTime) -> int32;
}
extern "C" {
    pub fn DAQmxResetArmStartTrigTrigWhen(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetArmStartTrigTimescale(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetArmStartTrigTimescale(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetArmStartTrigTimescale(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetArmStartTrigTimestampEnable(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxSetArmStartTrigTimestampEnable(taskHandle: TaskHandle, data: bool32) -> int32;
}
extern "C" {
    pub fn DAQmxResetArmStartTrigTimestampEnable(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetArmStartTrigTimestampTimescale(
        taskHandle: TaskHandle,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetArmStartTrigTimestampTimescale(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetArmStartTrigTimestampTimescale(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetArmStartTrigTimestampVal(
        taskHandle: TaskHandle,
        data: *mut CVIAbsoluteTime,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetTriggerSyncType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetTriggerSyncType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetTriggerSyncType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogTimeout(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetWatchdogTimeout(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetWatchdogTimeout(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogExpirTrigType(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetWatchdogExpirTrigType(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetWatchdogExpirTrigType(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogExpirTrigTrigOnNetworkConnLoss(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetWatchdogExpirTrigTrigOnNetworkConnLoss(
        taskHandle: TaskHandle,
        data: bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetWatchdogExpirTrigTrigOnNetworkConnLoss(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeWatchdogExpirTrigSrc(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeWatchdogExpirTrigSrc(
        taskHandle: TaskHandle,
        data: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeWatchdogExpirTrigSrc(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetDigEdgeWatchdogExpirTrigEdge(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogDOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetWatchdogDOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetWatchdogDOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogAOOutputType(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetWatchdogAOOutputType(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetWatchdogAOOutputType(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogAOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        data: *mut float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetWatchdogAOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        data: float64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetWatchdogAOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogCOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        data: *mut int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxSetWatchdogCOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
        data: int32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxResetWatchdogCOExpirState(
        taskHandle: TaskHandle,
        lines: *const ::std::os::raw::c_char,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWatchdogHasExpired(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteRelativeTo(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetWriteRelativeTo(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetWriteRelativeTo(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOffset(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetWriteOffset(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetWriteOffset(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteRegenMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetWriteRegenMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetWriteRegenMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteCurrWritePos(taskHandle: TaskHandle, data: *mut uInt64) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOvercurrentChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOvercurrentChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOvertemperatureChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOvertemperatureChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteExternalOvervoltageChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteExternalOvervoltageChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOverloadedChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOverloadedChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOpenCurrentLoopChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteOpenCurrentLoopChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWritePowerSupplyFaultChansExist(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWritePowerSupplyFaultChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteSyncUnlockedChansExist(taskHandle: TaskHandle, data: *mut bool32) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteSyncUnlockedChans(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteSpaceAvail(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteTotalSampPerChanGenerated(
        taskHandle: TaskHandle,
        data: *mut uInt64,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteAccessoryInsertionOrRemovalDetected(
        taskHandle: TaskHandle,
        data: *mut bool32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteDevsWithInsertedOrRemovedAccessories(
        taskHandle: TaskHandle,
        data: *mut ::std::os::raw::c_char,
        bufferSize: uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteRawDataWidth(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteNumChans(taskHandle: TaskHandle, data: *mut uInt32) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteWaitMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetWriteWaitMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetWriteWaitMode(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteSleepTime(taskHandle: TaskHandle, data: *mut float64) -> int32;
}
extern "C" {
    pub fn DAQmxSetWriteSleepTime(taskHandle: TaskHandle, data: float64) -> int32;
}
extern "C" {
    pub fn DAQmxResetWriteSleepTime(taskHandle: TaskHandle) -> int32;
}
extern "C" {
    pub fn DAQmxGetWriteDigitalLinesBytesPerChan(
        taskHandle: TaskHandle,
        data: *mut uInt32,
    ) -> int32;
}
extern "C" {
    pub fn DAQmxGetSampClkTimingResponseMode(taskHandle: TaskHandle, data: *mut int32) -> int32;
}
extern "C" {
    pub fn DAQmxSetSampClkTimingResponseMode(taskHandle: TaskHandle, data: int32) -> int32;
}
extern "C" {
    pub fn DAQmxResetSampClkTimingResponseMode(taskHandle: TaskHandle) -> int32;
}
